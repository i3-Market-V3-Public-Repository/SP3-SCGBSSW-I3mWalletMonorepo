"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("worker_threads"),s=require("axios"),i=require("axios-retry"),a=require("events"),o=require("eventsource"),r=require("dotenv");function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var u=n(s),h=n(i),l=n(o);class c{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const s=t.randomBytes(16),i=t.createCipheriv(this.alg,this.key,s),a=Buffer.concat([i.update(e),i.final()]),o=i.getAuthTag();return Buffer.concat([s,o,a])}decrypt(e){const s=e.subarray(0,16),i=e.subarray(16,32),a=e.subarray(32),o=t.createDecipheriv(this.alg,this.key,s);return o.setAuthTag(i),Buffer.concat([o.update(a),o.final()])}}if(!e.isMainThread&&"object"==typeof e.workerData&&"scrypt-thread"===e.workerData._name){const{passwordOrKey:O,opts:D}=e.workerData;async function N(e,s){const i={...s.alg_options,maxmem:256*s.alg_options.N*s.alg_options.r},a="string"==typeof e?e:e.export(),o=new Promise(((e,o)=>{t.scrypt(a,s.salt,s.derived_key_length,i,((t,s)=>{null!==t&&o(t),e(s)}))}));return await o}N(O,D).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class d{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=p(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),o=await w(t,{...e,salt:a}),r=p(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),n=p(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[u,h]=await Promise.all([w(o,{...s,salt:r}),w(o,{...i,salt:n})]);this._authKey=u,this._encKey=new c(h,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function p(e,s,i){let a="";for(const t in i)a=s.replace(t,i[t]);return t.createHash(e).update(a).digest()}async function w(s,i){return await new Promise(((a,o)=>{const r={_name:"scrypt-thread",passwordOrKey:s,opts:i},n=new e.Worker(__filename,{workerData:r});n.on("message",(e=>{a(t.createSecretKey(e))})),n.on("error",(t=>{o(t)})),n.on("messageerror",(t=>{o(t)}))}))}class m extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof m)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new m("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof s.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new m("no-uploaded-storage",void 0);case"invalid-credentials":return new m("invalid-credentials",void 0);case"invalid-timestamp":return new m("invalid-timestamp",void 0);case"quota-exceeded":return new m("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new m("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new m("http-connection-error",s)}if(t instanceof Error){const e=new m("error",t,{cause:t.cause});return e.stack=t.stack,e}return new m("unknown",t)}}class f{axios;defaultCallOptions;defaultUrl;_stop;uploading;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.uploading={}}getAxiosInstance(t){const e=u.default.create();return void 0!==t?.retries&&h.default(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>!this._stop&&i.isNetworkOrIdempotentRequestError(t)}),e}async waitForUploadsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.uploading[e])for(const t of this.uploading[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.uploading)await this.waitForUploadsToFinsh(t).catch();this._stop=!1}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e,a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new m("http-request-canceled",{request:{method:"GET",url:s,headers:a}});const o=await this.axios.get(s,{headers:a}).catch((t=>{throw m.from(t)}));if(void 0!==i?.responseStatus&&o.status!==i.responseStatus)throw new m("validation",{description:`Received HTTP status ${o.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return o.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e,a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new m("http-request-canceled",{request:{method:"DELETE",url:s,headers:a}});const o=await this.axios.delete(s,{headers:a}).catch((t=>{throw m.from(t)}));if(void 0!==i?.responseStatus&&o.status!==i.responseStatus)throw new m("validation",{description:`Received HTTP status ${o.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return o.data}async upload(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new m("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequentialPost&&await this.waitForUploadsToFinsh(e).catch(),this.uploading[e]=[];const o=this.axios[t](e,s,{headers:a}),r=this.uploading[e].push(o)-1,n=await o.catch((t=>{throw m.from(t)})),u=i?.beforeUploadFinish;if(void 0!==u&&await u(n.data),r===this.uploading[e].length-1)this.uploading[e].pop();else{let t=r;do{delete this.uploading[e][r],t--}while(void 0===this.uploading[e][t])}if(0===this.uploading[e].length&&delete this.uploading[e],void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new m("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}async post(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.upload("post",i,a,o)}async put(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.upload("put",i,a,o)}}r.config();const g=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},v=["0","false","FALSE"],y=["1","true","FALSE"],_=v.concat(y);function T(t,e){const s=void 0===(i=process.env[t])?"":i;var i;const a=(e=e??{})?.isBoolean??!1;if(a&&(e={...e,allowedValues:_}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(g(t,e.allowedValues.join(", ")))}if(a&&y.includes(s))return!0;if(a&&v.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(g(t,e.allowedValues.join(", ")));return s}T("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const E="v"+T("npm_package_version",{defaultValue:"0.0.1"})[0],I={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function k(t,e){switch(m.from(e).message){case"invalid-credentials":case"unauthorized":return I.INITIALIZED;case"sse-connection-error":return t>=I.LOGGED_IN?I.LOGGED_IN:I.INITIALIZED;default:return t}}class C extends a.EventEmitter{timestamp;token;name;opts;serverRootUrl;serverPrefix;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;_state;_initialized;vaultRequest;keyManager;es;constructor(e,s){super({captureRejections:!0}),this.name=s?.name??t.randomBytes(16).toString("hex"),this.opts=s;const i=new URL(e);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this._state=I.NOT_INITIALIZED,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})).catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){if(t<I.NOT_INITIALIZED||t>I.CONNECTED)throw new Error("invalid state");if(t-this._state>1||this.state-t>1)throw new Error("steps MUST be passed one by one");if(this._state!==t){switch(t){case I.NOT_INITIALIZED:delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this._initialized=new Promise(((t,e)=>{e(new m("not-initialized",void 0))}));break;case I.INITIALIZED:this._state===I.LOGGED_IN&&(delete this.keyManager,delete this.vaultRequest,delete this.token,delete this.timestamp,this.es?.close(),delete this.es)}this._state=t,this.emit("state-changed",this._state)}}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfigurationPromise=C.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new m("not-initialized",t)})),this.state=I.INITIALIZED}async initEventSourceClient(){if(this.state!==I.LOGGED_IN)throw new Error("cannot be called if not logged in");const t=this.wellKnownCvsConfiguration.vault_configuration[E].events_endpoint;this.es=new l.default(t,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0===e.timestamp?this.emit("empty-storage"):e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.state=I.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForUploadsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForUploadsToFinsh().finally((()=>{this.logout(),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state=k(this.state,t)}}async initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new d(t,e,s.vault_configuration[E].key_derivation),await this.keyManager.initialized}logout(){this.state<I.LOGGED_IN||(this.state===I.CONNECTED&&(this.state=I.LOGGED_IN),this.state=I.INITIALIZED)}close(){this.logout(),this.wellKnownCvsConfigurationPromise?.stop(),this.wellKnownCvsConfigurationPromise?.promise.catch((()=>{})),this.state=I.NOT_INITIALIZED}async login(t,e,s){this.state===I.NOT_INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const i={username:t,authkey:this.keyManager.authKey},a=new f({retryOptions:this.opts?.defaultRetryOptions}),o=this.wellKnownCvsConfiguration,r=await a.post(o.vault_configuration.v2.token_endpoint,i,{responseStatus:200});this.token=r.token,this.vaultRequest=new f({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequentialPost:!0},defaultUrl:o.vault_configuration.v2.vault_endpoint}),this.timestamp=s,this.state=I.LOGGED_IN,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForUploadsToFinsh();const e=new f({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[E].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw this.state=k(this.state,t),t}}async getStorage(){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForUploadsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new m("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=k(this.state,e),m.from(e)}}async updateStorage(t,e=!1,s){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new m("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=this.vaultRequest,o=await a.post(s,{bearerToken:this.token,responseStatus:201,beforeUploadFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),o.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),this.state=k(this.state,t),m.from(t)}}async deleteStorage(){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),this.logout()}catch(t){throw t instanceof m&&"unauthorized"===t.message&&this.logout(),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration,e=new f({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new f({retryOptions:e}),i=s.get(t+"/.well-known/cvs-configuration",{responseStatus:200});return{stop:s.stop,promise:i}}static async computeAuthKey(t,e,s,i){const a=C.getWellKnownCvsConfiguration(t,i),o=await a.promise,r=new d(e,s,o.vault_configuration[E].key_derivation);return await r.initialized,r.authKey}}exports.KeyManager=d,exports.Request=f,exports.SecretKey=c,exports.VAULT_STATE=I,exports.VaultClient=C,exports.VaultError=m,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=w;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
