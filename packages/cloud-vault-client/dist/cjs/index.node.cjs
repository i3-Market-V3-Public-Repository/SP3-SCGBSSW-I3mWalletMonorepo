"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("worker_threads"),s=require("axios"),a=require("events"),i=require("eventsource"),n=require("dotenv");function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o=r(s),u=r(i);class c{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const s=t.randomBytes(16),a=t.createCipheriv(this.alg,this.key,s),i=Buffer.concat([a.update(e),a.final()]),n=a.getAuthTag();return Buffer.concat([s,n,i])}decrypt(e){const s=e.subarray(0,16),a=e.subarray(16,32),i=e.subarray(32),n=t.createDecipheriv(this.alg,this.key,s);return n.setAuthTag(a),Buffer.concat([n.update(i),n.final()])}}if(!e.isMainThread){const{passwordOrKey:x,opts:b}=e.workerData;async function E(e,s){const a={...s.alg_options,maxmem:256*s.alg_options.N*s.alg_options.r},i="string"==typeof e?e:e.export(),n=new Promise(((e,n)=>{t.scrypt(i,s.salt,s.derived_key_length,a,((t,s)=>{null!==t&&n(t),e(s)}))}));return await n}E(x,b).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class h{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:a}=this.derivationOptions,i=l(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),n=await d(t,{...e,salt:i}),r=l(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),o=l(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[u,h]=await Promise.all([d(n,{...s,salt:r}),d(n,{...a,salt:o})]);this._authKey=u,this._encKey=new c(h,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function l(e,s,a){let i="";for(const t in a)i=s.replace(t,a[t]);return t.createHash(e).update(i).digest()}async function d(s,a){return await new Promise(((i,n)=>{const r=new e.Worker(__filename,{workerData:{passwordOrKey:s,opts:a}});r.on("message",(e=>{i(t.createSecretKey(e))})),r.on("error",(t=>{n(t)})),r.on("messageerror",(t=>{n(t)}))}))}class p extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof p)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new p("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof s.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new p("no-uploaded-storage",void 0);case"invalid-credentials":return new p("invalid-credentials",void 0);case"quota-exceeded":return new p("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new p("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new p("http-connection-error",s)}if(t instanceof Error){const e=new p("error",t,{cause:t.cause});return e.stack=t.stack,e}return new p("unknown",t)}}var m={get:async function(t,e){const s={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(s.Authorization="Bearer "+e.bearerToken);const a=await o.default.get(t,{headers:s}).catch((t=>{throw p.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new p("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},post:async function(t,e,s){const a={"Content-Type":"application/json"};void 0!==s?.bearerToken&&(a.Authorization="Bearer "+s.bearerToken);const i=await o.default.post(t,e,{headers:a}).catch((t=>{throw p.from(t)}));if(void 0!==s?.responseStatus&&i.status!==s.responseStatus)throw new p("validation",{description:`Received HTTP status ${i.status} does not match the expected one (${s.responseStatus})`},{cause:"HTTP status does not match the expected one"});return i.data},put:async function(t,e,s){const a={"Content-Type":"application/json"};void 0!==s?.bearerToken&&(a.Authorization="Bearer "+s.bearerToken);const i=await o.default.put(t,e,{headers:a}).catch((t=>{throw p.from(t)}));if(void 0!==s?.responseStatus&&i.status!==s.responseStatus)throw new p("validation",{description:`Received HTTP status ${i.status} does not match the expected one (${s.responseStatus})`},{cause:"HTTP status does not match the expected one"});return i.data},delete:async function(t,e){const s={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(s.Authorization="Bearer "+e.bearerToken);const a=await o.default.delete(t,{headers:s}).catch((t=>{throw p.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new p("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data}};n.config();const w=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},g=["0","false","FALSE"],v=["1","true","FALSE"],f=g.concat(v);function y(t,e){const s=void 0===(a=process.env[t])?"":a;var a;const i=(e=e??{})?.isBoolean??!1;if(i&&(e={...e,allowedValues:f}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(w(t,e.allowedValues.join(", ")))}if(i&&v.includes(s))return!0;if(i&&g.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(w(t,e.allowedValues.join(", ")));return s}y("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const _="v"+y("npm_package_version",{defaultValue:"0.0.1"})[0],k=0,T=1,K=2,z=3;function S(t,e){switch(p.from(e).message){case"invalid-credentials":case"unauthorized":return T;case"sse-connection-error":return t>=K?K:T;default:return t}}class C extends a.EventEmitter{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;_state;_initialized;keyManager;es;constructor(e,s){super({captureRejections:!0}),this.name=s??t.randomBytes(16).toString("hex"),this.serverUrl=e,this._state=k,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})),this._initialized.catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){this._state!==t&&(this._state=t,this._state<K&&(this.token=void 0),this.emit("state-changed",this._state))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfiguration=await C.getWellKnownCvsConfiguration(this.serverUrl).catch((t=>{throw new p("not-initialized",t)})),this.state=T}async initEventSourceClient(){if(this.state<K)throw new Error("cannot be called if not logged in");if(this.state>=z)return;const t=this.wellKnownCvsConfiguration;this.es=new u.default(this.serverUrl+t.vault_configuration[_].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.state=z})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.state=S(this.state,t)}}async initKeyManager(t,e){this.state===k&&await this.initialized;const s=this.wellKnownCvsConfiguration;this.keyManager=new h(t,e,s.vault_configuration[_].key_derivation),await this.keyManager.initialized}logout(){this.es?.close(),this.state=K,this.token=void 0,this.state=T}async login(t,e){this.state===T&&await this.initialized,await this.initKeyManager(t,e);const s={username:t,authkey:this.keyManager.authKey},a=this.wellKnownCvsConfiguration,i=await m.post(this.serverUrl+a.vault_configuration.v2.token_endpoint,s,{responseStatus:200});this.token=i.token,this.state=K,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<K)throw new p("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{const e=await m.get(this.serverUrl+t.vault_configuration[_].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw this.state=S(this.state,t),t}}async getStorage(){if(this.state<K)throw new p("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.wellKnownCvsConfiguration,s=await m.get(this.serverUrl+e.vault_configuration[_].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new p("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const a=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:a,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=S(this.state,e),p.from(e)}}async updateStorage(t,e=!1){if(this.state<K)throw new p("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new p("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s=Date.now();this.emit("sync-start",s);const a=this.wellKnownCvsConfiguration;try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const i={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},n=await m.post(this.serverUrl+a.vault_configuration[_].vault_endpoint,i,{bearerToken:this.token,responseStatus:201});return this.timestamp=n.timestamp,this.emit("sync-stop",s,Date.now()),this.timestamp}catch(t){throw this.emit("sync-stop",s,Date.now()),this.state=S(this.state,t),p.from(t)}}async deleteStorage(){if(this.state<K)throw new p("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await m.delete(this.serverUrl+t.vault_configuration[_].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}catch(t){throw t instanceof p&&"unauthorized"===t.message&&(this.token=void 0,this.state=T),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration;return(await m.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static async getWellKnownCvsConfiguration(t){return await m.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}static async computeAuthKey(t,e,s){const a=await C.getWellKnownCvsConfiguration(t),i=new h(e,s,a.vault_configuration[_].key_derivation);return await i.initialized,i.authKey}}exports.KeyManager=h,exports.SecretKey=c,exports.VaultClient=C,exports.VaultError=p,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=d;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
