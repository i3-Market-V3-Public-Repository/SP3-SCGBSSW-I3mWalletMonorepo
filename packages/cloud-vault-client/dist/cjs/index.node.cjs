"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("axios"),i=require("events"),a=require("eventsource"),n=require("dotenv");function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o=s(e),r=s(a);class u{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const i=t.randomBytes(16),a=t.createCipheriv(this.alg,this.key,i),n=Buffer.concat([a.update(e),a.final()]),s=a.getAuthTag();return Buffer.concat([i,s,n])}decrypt(e){const i=e.subarray(0,16),a=e.subarray(16,32),n=e.subarray(32),s=t.createDecipheriv(this.alg,this.key,i);return s.setAuthTag(a),Buffer.concat([s.update(n),s.final()])}}class h{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:a}=this.derivationOptions,n=c(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),s=await d(t,{...e,salt:n}),o=c(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),r=c(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[h,l]=await Promise.all([d(s,{...i,salt:o}),d(s,{...a,salt:r})]);this._authKey=h,this._encKey=new u(l,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function c(e,i,a){let n="";for(const t in a)n=i.replace(t,a[t]);return t.createHash(e).update(n).digest()}async function d(e,i){const a={...i.alg_options,maxmem:256*i.alg_options.N*i.alg_options.r},n="string"==typeof e?e:e.export(),s=new Promise(((e,s)=>{t.scrypt(n,i.salt,i.derived_key_length,a,((i,a)=>{null!==i&&s(i),e(t.createSecretKey(a))}))}));return await s}n.config();const l=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},m=["0","false","FALSE"],p=["1","true","FALSE"],w=m.concat(p);function g(t,e){const i=void 0===(a=process.env[t])?"":a;var a;const n=(e=e??{})?.isBoolean??!1;if(n&&(e={...e,allowedValues:w}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(l(t,e.allowedValues.join(", ")))}if(n&&p.includes(i))return!0;if(n&&m.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(l(t,e.allowedValues.join(", ")));return i}g("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const f="v"+g("npm_package_version",{defaultValue:"0.0.1"})[0];class v extends Error{data;message;constructor(t,e,i){super(t,i),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof v)return t;if(t instanceof Event)return new v("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof e.AxiosError){if("Unauthorized"===t.response?.data.name)return new v("unauthorized",void 0);if(404===t.response?.status&&"no storage"===t.response.data.name)return new v("no-uploadded-storage",void 0);const e={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new v("http-connection-error",e)}if(t instanceof Error){const e=new v("error",t,{cause:t.cause});return e.stack=t.stack,e}return new v("unknown",t)}}class y extends i.EventEmitter{timestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;initialized;es;constructor(e,i,a,n){super({captureRejections:!0}),this.name=n??t.randomBytes(16).toString("hex"),this.serverUrl=e,this.username=i,this.password=a,this.initialized=this.init()}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration;this.keyManager=new h(this.username,this.password,t.vault_configuration[f].key_derivation),await this.keyManager.initialized,delete this.password}catch(t){throw v.from(t)}}async getWellKnownCvsConfiguration(){const t=await o.default.get(this.serverUrl+"/.well-known/cvs-configuration");this.wellKnownCvsConfiguration=t.data}async initEventSourceClient(){if(void 0===this.token)throw new v("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;this.es=new r.default(this.serverUrl+t.vault_configuration[f].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.emitError(t)}}emitError(t){const e=v.from(t);switch(e.message){case"unauthorized":this.logout(),this.emit("logged-out");break;case"sse-connection-error":this.emit("connection-error",e);break;default:this.emit("error",e)}}logout(){this.es?.close(),this.token=void 0,this.emit("logged-out")}async getAuthKey(){return await this.initialized.catch((t=>{throw new v("not-initialized",t)})),this.keyManager.authKey}async login(){await this.initialized.catch((t=>{throw new v("not-initialized",t)}));const t={username:this.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,i=await o.default.post(this.serverUrl+e.vault_configuration.v2.token_endpoint,t).catch((t=>{throw v.from(t)}));if(200!==i.status)throw new v("validation",{description:`Received HTTP status ${i.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});const a=i.data;this.token=a.token,await this.initEventSourceClient().catch((t=>{throw v.from(t)}))}async getRemoteStorageTimestamp(){if(await this.initialized.catch((t=>{throw new v("not-initialized",t)})),void 0===this.token)throw new v("unauthorized",void 0);const t=this.wellKnownCvsConfiguration,e=await o.default.get(this.serverUrl+t.vault_configuration[f].timestamp_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}}).catch((t=>{throw v.from(t)}));if(200!==e.status)throw new v("validation",{description:`Received HTTP status ${e.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});return(this.timestamp??0)<e.data.timestamp&&(this.timestamp=e.data.timestamp),e.data.timestamp}async getStorage(){if(await this.initialized.catch((t=>{throw new v("not-initialized",t)})),void 0===this.token)throw new v("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=this.keyManager.encKey,i=await o.default.get(this.serverUrl+t.vault_configuration[f].vault_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});if(200!==i.status)throw new v("validation",{description:`Received HTTP status ${i.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});if(i.data.timestamp<(this.timestamp??0))throw new v("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const a=e.decrypt(Buffer.from(i.data.ciphertext,"base64url"));return this.timestamp=i.data.timestamp,{storage:a,timestamp:i.data.timestamp}}catch(t){throw v.from(t)}}async updateStorage(t,e=!1){if(await this.initialized.catch((t=>{throw new v("not-initialized",t)})),void 0===this.token)throw new v("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new v("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});try{const i=this.wellKnownCvsConfiguration,a=this.keyManager.encKey;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const n={ciphertext:a.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},s=await o.default.post(this.serverUrl+i.vault_configuration[f].vault_endpoint,n,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});if(201!==s.status)throw new v("validation",{description:`Received HTTP status ${s.status} does not match the expected one (201)`},{cause:"HTTP status does not match the expected one"});this.timestamp=s.data.timestamp}catch(t){throw v.from(t)}}async deleteStorage(){if(await this.initialized.catch((t=>{throw new v("not-initialized",t)})),void 0===this.token)throw new v("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=await o.default.delete(this.serverUrl+t.vault_configuration[f].vault_endpoint,{headers:{Authorization:"Bearer "+this.token}});if(204!==e.status)throw new v("validation",{description:`Received HTTP status ${e.status} does not match the expected one (204)`},{cause:"HTTP status does not match the expected one"});delete this.timestamp,this.logout()}catch(t){throw v.from(t)}}async getServerPublicKey(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration,e=await o.default.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint);if(200!==e.status)throw new v("validation",{description:`Received HTTP status ${e.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});return e.data.jwk}catch(t){throw v.from(t)}}}exports.KeyManager=h,exports.SecretKey=u,exports.VaultClient=y,exports.deriveKey=d;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
