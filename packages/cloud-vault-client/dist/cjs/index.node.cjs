"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("axios"),i=require("events"),a=require("eventsource"),n=require("dotenv");function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o=s(e),r=s(a);class u{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const i=t.randomBytes(16),a=t.createCipheriv(this.alg,this.key,i),n=Buffer.concat([a.update(e),a.final()]),s=a.getAuthTag();return Buffer.concat([i,s,n])}decrypt(e){const i=e.subarray(0,16),a=e.subarray(16,32),n=e.subarray(32),s=t.createDecipheriv(this.alg,this.key,i);return s.setAuthTag(a),Buffer.concat([s.update(n),s.final()])}}class c{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:a}=this.derivationOptions,n=l(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),s=await h(t,{...e,salt:n}),o=l(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),r=l(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[c,d]=await Promise.all([h(s,{...i,salt:o}),h(s,{...a,salt:r})]);this._authKey=c,this._encKey=new u(d,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function l(e,i,a){let n="";for(const t in a)n=i.replace(t,a[t]);return t.createHash(e).update(n).digest()}async function h(e,i){const a={...i.alg_options,maxmem:256*i.alg_options.N*i.alg_options.r},n="string"==typeof e?e:e.export(),s=new Promise(((e,s)=>{t.scrypt(n,i.salt,i.derived_key_length,a,((i,a)=>{null!==i&&s(i),e(t.createSecretKey(a))}))}));return await s}class d extends Error{data;message;constructor(t,e,i){super(t,i),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof d)return t;if(t instanceof Event)return new d("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof e.AxiosError){if("Unauthorized"===t.response?.data.name)return new d("unauthorized",void 0);if(404===t.response?.status&&"no storage"===t.response.data.name)return new d("no-uploaded-storage",void 0);if(404===t.response?.status&&"invalid credentials"===t.response.data.name)return new d("invalid-credentials",void 0);const e={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new d("http-connection-error",e)}if(t instanceof Error){const e=new d("error",t,{cause:t.cause});return e.stack=t.stack,e}return new d("unknown",t)}}var p={get:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const a=await o.default.get(t,{headers:i}).catch((t=>{throw d.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new d("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},post:async function(t,e,i){const a={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken);const n=await o.default.post(t,e,{headers:a}).catch((t=>{throw d.from(t)}));if(void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new d("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data},put:async function(t,e,i){const a={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken);const n=await o.default.put(t,e,{headers:a}).catch((t=>{throw d.from(t)}));if(void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new d("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data},delete:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const a=await o.default.delete(t,{headers:i}).catch((t=>{throw d.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new d("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data}};n.config();const m=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},v=["0","false","FALSE"],w=["1","true","FALSE"],g=v.concat(w);function f(t,e){const i=void 0===(a=process.env[t])?"":a;var a;const n=(e=e??{})?.isBoolean??!1;if(n&&(e={...e,allowedValues:g}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(m(t,e.allowedValues.join(", ")))}if(n&&w.includes(i))return!0;if(n&&v.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(m(t,e.allowedValues.join(", ")));return i}f("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const y="v"+f("npm_package_version",{defaultValue:"0.0.1"})[0];class k extends i.EventEmitter{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;initialized;keyManager;es;constructor(e,i,a){super({captureRejections:!0}),this.name=a??t.randomBytes(16).toString("hex"),this.serverUrl=e,this.token=i,this.initialized=this.init()}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfiguration=await k.getWellKnownCvsConfiguration(this.serverUrl).catch((t=>{throw new d("not-initialized",t)})),void 0!==this.token&&await this.initEventSourceClient().catch((t=>{throw d.from(t)}))}async initEventSourceClient(){if(void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;this.es=new r.default(this.serverUrl+t.vault_configuration[y].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.emitError(t)}}emitError(t){const e=d.from(t);switch(e.message){case"unauthorized":this.logout(),this.emit("logged-out");break;case"sse-connection-error":this.emit("connection-error",e);break;default:this.emit("error",e)}}async initKeyManager(t,e){await this.initialized;const i=this.wellKnownCvsConfiguration;this.keyManager=new c(t,e,i.vault_configuration[y].key_derivation),await this.keyManager.initialized}logout(){this.es?.close(),this.token=void 0,this.emit("logged-out")}async login(t,e){await this.initialized;const i=this.wellKnownCvsConfiguration;await this.initKeyManager(t,e);const a={username:t,authkey:this.keyManager.authKey},n=await p.post(this.serverUrl+i.vault_configuration.v2.token_endpoint,a,{responseStatus:200});this.token=n.token,await this.initEventSourceClient().catch((t=>{throw d.from(t)}))}async getRemoteStorageTimestamp(){if(await this.initialized,void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration,e=await p.get(this.serverUrl+t.vault_configuration[y].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}async getStorage(){if(await this.initialized,void 0===this.token||void 0===this.keyManager)throw new d("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=await p.get(this.serverUrl+t.vault_configuration[y].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(e.timestamp<(this.timestamp??0))throw new d("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,{storage:i,timestamp:e.timestamp}}catch(t){throw d.from(t)}}async updateStorage(t,e=!1){if(await this.initialized,void 0===this.token||void 0===this.keyManager)throw new d("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new d("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i=this.wellKnownCvsConfiguration;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const a={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},n=await p.post(this.serverUrl+i.vault_configuration[y].vault_endpoint,a,{bearerToken:this.token,responseStatus:201});this.timestamp=n.timestamp}async deleteStorage(){if(await this.initialized,void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;await p.delete(this.serverUrl+t.vault_configuration[y].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration;return(await p.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static async getWellKnownCvsConfiguration(t){return await p.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}static async computeAuthKey(t,e,i){const a=await k.getWellKnownCvsConfiguration(t),n=new c(e,i,a.vault_configuration[y].key_derivation);return await n.initialized,n.authKey}}exports.KeyManager=c,exports.SecretKey=u,exports.VaultClient=k,exports.VaultError=d,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=h;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
