"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("axios"),i=require("events"),s=require("eventsource"),a=require("dotenv");function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=r(e),o=r(s);class l{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const i=t.randomBytes(16),s=t.createCipheriv(this.alg,this.key,i),a=Buffer.concat([s.update(e),s.final()]),r=s.getAuthTag();return Buffer.concat([i,r,a])}decrypt(e){const i=e.subarray(0,16),s=e.subarray(16,32),a=e.subarray(32),r=t.createDecipheriv(this.alg,this.key,i);return r.setAuthTag(s),Buffer.concat([r.update(a),r.final()])}}class u{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:s}=this.derivationOptions,a=h(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),r=await d(t,{...e,salt:a}),n=h(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),o=h(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),[u,c]=await Promise.all([d(r,{...i,salt:n}),d(r,{...s,salt:o})]);this._authKey=u,this._encKey=new l(c,s.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function h(e,i,s){let a="";for(const t in s)a=i.replaceAll(t,s[t]);return t.createHash(e).update(a).digest()}async function d(e,i){const s={...i.alg_options,maxmem:256*i.alg_options.N*i.alg_options.r},a="string"==typeof e?e:e.export(),r=new Promise(((e,r)=>{t.scrypt(a,i.salt,i.derived_key_length,s,((i,s)=>{null!==i&&r(i),e(t.createSecretKey(s))}))}));return await r}a.config();const c=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},m=["0","false","FALSE"],g=["1","true","FALSE"],p=m.concat(g);function f(t,e){const i=void 0===(s=process.env[t])?"":s;var s;const a=(e=e??{})?.isBoolean??!1;if(a&&(e={...e,allowedValues:p}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(c(t,e.allowedValues.join(", ")))}if(a&&g.includes(i))return!0;if(a&&m.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(c(t,e.allowedValues.join(", ")));return i}f("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const v="v"+f("npm_package_version",{defaultValue:"0.0.1"})[0];class y extends i.EventEmitter{timestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;defaultEvents;initialized;es;constructor(e,i,s,a){super({captureRejections:!0}),this.name=a??t.randomBytes(16).toString("hex"),this.serverUrl=e,this.username=i,this.password=s,this.defaultEvents={connected:"connected",close:"close","login-required":"login-required","storage-updated":"storage-updated","storage-deleted":"storage-deleted",conflict:"conflict",error:"error"},this.initialized=this.init()}async init(){try{await this.getWellKnownCvsConfiguration()}catch(t){return this.emitError(t),!1}const t=this.wellKnownCvsConfiguration;this.keyManager=new u(this.username,this.password,t.vault_configuration[v].key_derivation);try{await this.keyManager.initialized}catch(t){return this.emitError(t),!1}return delete this.password,!0}emitError(t){if(t instanceof e.AxiosError)if("Unauthorized"===t.response?.data.name)this.logout(),this.emit(this.defaultEvents["login-required"]);else{const e={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};this.emit(this.defaultEvents.error,e)}else this.emit(this.defaultEvents.error,t)}async getWellKnownCvsConfiguration(){const t=await n.default.get(this.serverUrl+"/.well-known/cvs-configuration");this.wellKnownCvsConfiguration=t.data}async initEventSourceClient(){if(void 0===this.token)throw new Error("Cannot subscribe to events without login first");const t=this.wellKnownCvsConfiguration;this.es=new o.default(this.serverUrl+t.vault_configuration[v].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.emit(this.defaultEvents.connected,e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit(this.defaultEvents["storage-updated"],this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.close(),this.emit(this.defaultEvents["storage-deleted"])})),this.es.onerror=t=>{this.emitError(t)}}close(){this.logout(),this.emit(this.defaultEvents.close)}async getAuthKey(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),null}return this.keyManager.authKey}async login(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),!1}const t={username:this.username,authkey:this.keyManager.authKey};try{const e=this.wellKnownCvsConfiguration,i=await n.default.post(this.serverUrl+e.vault_configuration.v2.token_endpoint,t);if(200!==i.status)return this.emitError(i),!1;const s=i.data;return this.token=s.token,await this.initEventSourceClient(),!0}catch(t){return this.emitError(t),!1}}logout(){this.token=void 0,this.es?.close()}async getRemoteStorageTimestamp(){try{if(void 0===this.token)return this.emit(this.defaultEvents["login-required"]),null;const t=this.wellKnownCvsConfiguration,e=await n.default.get(this.serverUrl+t.vault_configuration[v].timestamp_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 200!==e.status?(this.emitError(e),null):((this.timestamp??0)<e.data.timestamp&&(this.timestamp=e.data.timestamp),e.data.timestamp)}catch(t){return this.emitError(t),null}}async getStorage(){try{if(void 0===this.token)return this.emit(this.defaultEvents["login-required"]),null;const t=this.wellKnownCvsConfiguration,e=this.keyManager.encKey,i=await n.default.get(this.serverUrl+t.vault_configuration[v].vault_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});if(200!==i.status)return this.emitError(i),null;if(i.data.timestamp<(this.timestamp??0))return this.emitError(new Error("Received timestamp is older than the latest one published")),null;const s=e.decrypt(Buffer.from(i.data.ciphertext,"base64url"));return this.timestamp=i.data.timestamp,{storage:s,timestamp:i.data.timestamp}}catch(t){return this.emitError(t),null}}async updateStorage(t,e=!1){try{if(void 0===this.token)return this.emit(this.defaultEvents["login-required"]),!1;if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)return this.emit(this.defaultEvents.conflict),!1;const i=this.wellKnownCvsConfiguration,s=this.keyManager.encKey;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const a={ciphertext:s.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},r=await n.default.post(this.serverUrl+i.vault_configuration[v].vault_endpoint,a,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 201!==r.status?(this.emitError(r),!1):(this.timestamp=r.data.timestamp,!0)}catch(t){this.emitError(t)}return!1}async deleteStorage(){try{if(void 0===this.token)return this.logout(),this.emit(this.defaultEvents["login-required"]),!1;const t=this.wellKnownCvsConfiguration,e=await n.default.delete(this.serverUrl+t.vault_configuration[v].vault_endpoint,{headers:{Authorization:"Bearer "+this.token}});return 204!==e.status?(this.emitError(e),!1):(this.emit(this.defaultEvents["storage-deleted"]),delete this.timestamp,this.close(),!0)}catch(t){this.emitError(t)}return!1}async getServerPublicKey(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration,e=await n.default.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint);return 200!==e.status?(this.emitError(e),null):e.data.jwk}catch(t){return this.emitError(t),null}}}exports.KeyManager=u,exports.SecretKey=l,exports.VaultClient=y,exports.deriveKey=d;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
