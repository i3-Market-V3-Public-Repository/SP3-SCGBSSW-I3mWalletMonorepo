"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("worker_threads"),a=require("axios"),s=require("events"),i=require("eventsource"),n=require("dotenv");function o(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var r=o(a),u=o(i);class c{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const a=t.randomBytes(16),s=t.createCipheriv(this.alg,this.key,a),i=Buffer.concat([s.update(e),s.final()]),n=s.getAuthTag();return Buffer.concat([a,n,i])}decrypt(e){const a=e.subarray(0,16),s=e.subarray(16,32),i=e.subarray(32),n=t.createDecipheriv(this.alg,this.key,a);return n.setAuthTag(s),Buffer.concat([n.update(i),n.final()])}}if(!e.isMainThread&&"object"==typeof e.workerData&&"scrypt-thread"===e.workerData._name){const{passwordOrKey:I,opts:C}=e.workerData;async function K(e,a){const s={...a.alg_options,maxmem:256*a.alg_options.N*a.alg_options.r},i="string"==typeof e?e:e.export(),n=new Promise(((e,n)=>{t.scrypt(i,a.salt,a.derived_key_length,s,((t,a)=>{null!==t&&n(t),e(a)}))}));return await n}K(I,C).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class h{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,a){this.username=t,this.derivationOptions=a,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:a,enc:s}=this.derivationOptions,i=l(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),n=await d(t,{...e,salt:i}),o=l(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),r=l(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),[u,h]=await Promise.all([d(n,{...a,salt:o}),d(n,{...s,salt:r})]);this._authKey=u,this._encKey=new c(h,s.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function l(e,a,s){let i="";for(const t in s)i=a.replace(t,s[t]);return t.createHash(e).update(i).digest()}async function d(a,s){return await new Promise(((i,n)=>{const o={_name:"scrypt-thread",passwordOrKey:a,opts:s},r=new e.Worker(__filename,{workerData:o});r.on("message",(e=>{i(t.createSecretKey(e))})),r.on("error",(t=>{n(t)})),r.on("messageerror",(t=>{n(t)}))}))}class p extends Error{data;message;constructor(t,e,a){super(t,a),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof p)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new p("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof a.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new p("no-uploaded-storage",void 0);case"invalid-credentials":return new p("invalid-credentials",void 0);case"quota-exceeded":return new p("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new p("unauthorized",void 0)}const a={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new p("http-connection-error",a)}if(t instanceof Error){const e=new p("error",t,{cause:t.cause});return e.stack=t.stack,e}return new p("unknown",t)}}var m={get:async function(t,e){const a={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(a.Authorization="Bearer "+e.bearerToken);const s=await r.default.get(t,{headers:a}).catch((t=>{throw p.from(t)}));if(void 0!==e?.responseStatus&&s.status!==e.responseStatus)throw new p("validation",{description:`Received HTTP status ${s.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return s.data},post:async function(t,e,a){const s={"Content-Type":"application/json"};void 0!==a?.bearerToken&&(s.Authorization="Bearer "+a.bearerToken);const i=await r.default.post(t,e,{headers:s}).catch((t=>{throw p.from(t)}));if(void 0!==a?.responseStatus&&i.status!==a.responseStatus)throw new p("validation",{description:`Received HTTP status ${i.status} does not match the expected one (${a.responseStatus})`},{cause:"HTTP status does not match the expected one"});return i.data},put:async function(t,e,a){const s={"Content-Type":"application/json"};void 0!==a?.bearerToken&&(s.Authorization="Bearer "+a.bearerToken);const i=await r.default.put(t,e,{headers:s}).catch((t=>{throw p.from(t)}));if(void 0!==a?.responseStatus&&i.status!==a.responseStatus)throw new p("validation",{description:`Received HTTP status ${i.status} does not match the expected one (${a.responseStatus})`},{cause:"HTTP status does not match the expected one"});return i.data},delete:async function(t,e){const a={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(a.Authorization="Bearer "+e.bearerToken);const s=await r.default.delete(t,{headers:a}).catch((t=>{throw p.from(t)}));if(void 0!==e?.responseStatus&&s.status!==e.responseStatus)throw new p("validation",{description:`Received HTTP status ${s.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return s.data}};n.config();const w=(t,e)=>{let a=`Invalid value for ${t}. `;return void 0!==e&&(a+=`Allowed values are ${e} `),a},g=["0","false","FALSE"],f=["1","true","FALSE"],v=g.concat(f);function y(t,e){const a=void 0===(s=process.env[t])?"":s;var s;const i=(e=e??{})?.isBoolean??!1;if(i&&(e={...e,allowedValues:v}),""===a){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(w(t,e.allowedValues.join(", ")))}if(i&&f.includes(a))return!0;if(i&&g.includes(a))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(a))throw new RangeError(w(t,e.allowedValues.join(", ")));return a}y("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const _="v"+y("npm_package_version",{defaultValue:"0.0.1"})[0],T={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function k(t,e){switch(p.from(e).message){case"invalid-credentials":case"unauthorized":return T.INITIALIZED;case"sse-connection-error":return t>=T.LOGGED_IN?T.LOGGED_IN:T.INITIALIZED;default:return t}}class E extends s.EventEmitter{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;_state;_initialized;_uploading;keyManager;es;constructor(e,a){super({captureRejections:!0}),this.name=a??t.randomBytes(16).toString("hex"),this.serverUrl=e,this._state=T.NOT_INITIALIZED,this._initialized=this.init(),this._uploading=new Promise(((t,e)=>{t()}))}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})),this._initialized.catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){this._state!==t&&(this._state=t,this._state<T.LOGGED_IN&&(this.token=void 0),this.emit("state-changed",this._state))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfiguration=await E.getWellKnownCvsConfiguration(this.serverUrl).catch((t=>{throw new p("not-initialized",t)})),this.state=T.INITIALIZED}async initEventSourceClient(){if(this.state<T.LOGGED_IN)throw new Error("cannot be called if not logged in");if(this.state>=T.CONNECTED)return;const t=this.wellKnownCvsConfiguration;this.es=new u.default(this.serverUrl+t.vault_configuration[_].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0!==e.timestamp&&e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.state=T.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{this._uploading.finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this._uploading.finally((()=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state=k(this.state,t)}}async initKeyManager(t,e){this.state===T.NOT_INITIALIZED&&await this.initialized;const a=this.wellKnownCvsConfiguration;this.keyManager=new h(t,e,a.vault_configuration[_].key_derivation),await this.keyManager.initialized}logout(){this.es?.close(),this.timestamp=void 0,this.state=T.LOGGED_IN,this.token=void 0,this.state=T.INITIALIZED}async login(t,e,a){this.state===T.INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const s={username:t,authkey:this.keyManager.authKey},i=this.wellKnownCvsConfiguration,n=await m.post(this.serverUrl+i.vault_configuration.v2.token_endpoint,s,{responseStatus:200});this.token=n.token,this.state=T.LOGGED_IN,this.timestamp=a,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<T.LOGGED_IN)throw new p("unauthorized",void 0);await this._uploading.catch((()=>{}));const t=this.wellKnownCvsConfiguration;try{const e=await m.get(this.serverUrl+t.vault_configuration[_].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw this.state=k(this.state,t),t}}async getStorage(){if(this.state<T.LOGGED_IN)throw new p("unauthorized",void 0);await this._uploading.catch((()=>{}));const t=Date.now();this.emit("sync-start",t);try{const e=this.wellKnownCvsConfiguration,a=await m.get(this.serverUrl+e.vault_configuration[_].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(a.timestamp<(this.timestamp??0))throw new p("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const s=this.keyManager.encKey.decrypt(Buffer.from(a.ciphertext,"base64url"));return this.timestamp=a.timestamp,this.emit("sync-stop",t,Date.now()),{storage:s,timestamp:a.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=k(this.state,e),p.from(e)}}async _updateStorage(t,e=!1){if(this.state<T.LOGGED_IN)throw new p("unauthorized",void 0);const a=Date.now();this.emit("sync-start",a);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new p("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s=this.wellKnownCvsConfiguration,i={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},n=await m.post(this.serverUrl+s.vault_configuration[_].vault_endpoint,i,{bearerToken:this.token,responseStatus:201});return this.timestamp=n.timestamp,this.emit("sync-stop",a,Date.now()),this.timestamp}catch(t){throw this.emit("sync-stop",a,Date.now()),this.state=k(this.state,t),p.from(t)}}async updateStorage(t,e=!1){await this._uploading.catch((()=>{}));let a=0;return this._uploading=new Promise(((s,i)=>{this._updateStorage(t,e).then((t=>{a=t,s()})).catch((t=>{i(t)}))})),await this._uploading,a}async deleteStorage(){if(this.state<T.LOGGED_IN)throw new p("unauthorized",void 0);await this._uploading.catch((()=>{}));const t=this.wellKnownCvsConfiguration;try{await m.delete(this.serverUrl+t.vault_configuration[_].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}catch(t){throw t instanceof p&&"unauthorized"===t.message&&(this.token=void 0,this.state=T.INITIALIZED),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration;return(await m.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static async getWellKnownCvsConfiguration(t){return await m.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}static async computeAuthKey(t,e,a){const s=await E.getWellKnownCvsConfiguration(t),i=new h(e,a,s.vault_configuration[_].key_derivation);return await i.initialized,i.authKey}}exports.KeyManager=h,exports.SecretKey=c,exports.VAULT_STATE=T,exports.VaultClient=E,exports.VaultError=p,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=d;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
