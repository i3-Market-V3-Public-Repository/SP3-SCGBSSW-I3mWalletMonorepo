"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("axios"),i=require("events"),a=require("eventsource"),n=require("dotenv");function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o=s(e),r=s(a);class u{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const i=t.randomBytes(16),a=t.createCipheriv(this.alg,this.key,i),n=Buffer.concat([a.update(e),a.final()]),s=a.getAuthTag();return Buffer.concat([i,s,n])}decrypt(e){const i=e.subarray(0,16),a=e.subarray(16,32),n=e.subarray(32),s=t.createDecipheriv(this.alg,this.key,i);return s.setAuthTag(a),Buffer.concat([s.update(n),s.final()])}}class c{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:a}=this.derivationOptions,n=h(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),s=await l(t,{...e,salt:n}),o=h(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),r=h(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[c,d]=await Promise.all([l(s,{...i,salt:o}),l(s,{...a,salt:r})]);this._authKey=c,this._encKey=new u(d,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function h(e,i,a){let n="";for(const t in a)n=i.replace(t,a[t]);return t.createHash(e).update(n).digest()}async function l(e,i){const a={...i.alg_options,maxmem:256*i.alg_options.N*i.alg_options.r},n="string"==typeof e?e:e.export(),s=new Promise(((e,s)=>{t.scrypt(n,i.salt,i.derived_key_length,a,((i,a)=>{null!==i&&s(i),e(t.createSecretKey(a))}))}));return await s}class d extends Error{data;message;constructor(t,e,i){super(t,i),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof d)return t;if(t instanceof Event)return new d("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof e.AxiosError){if("Unauthorized"===t.response?.data.name)return new d("unauthorized",void 0);if(404===t.response?.status&&"no storage"===t.response.data.name)return new d("no-uploaded-storage",void 0);if(404===t.response?.status&&"invalid credentials"===t.response.data.name)return new d("invalid-credentials",void 0);const e={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new d("http-connection-error",e)}if(t instanceof Error){const e=new d("error",t,{cause:t.cause});return e.stack=t.stack,e}return new d("unknown",t)}}var p={get:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const a=await o.default.get(t,{headers:i}).catch((t=>{throw d.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new d("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},post:async function(t,e,i){const a={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken);const n=await o.default.post(t,e,{headers:a}).catch((t=>{throw d.from(t)}));if(void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new d("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data},put:async function(t,e,i){const a={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken);const n=await o.default.put(t,e,{headers:a}).catch((t=>{throw d.from(t)}));if(void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new d("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data},delete:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const a=await o.default.delete(t,{headers:i}).catch((t=>{throw d.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new d("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data}};n.config();const m=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},v=["0","false","FALSE"],w=["1","true","FALSE"],g=v.concat(w);function f(t,e){const i=void 0===(a=process.env[t])?"":a;var a;const n=(e=e??{})?.isBoolean??!1;if(n&&(e={...e,allowedValues:g}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(m(t,e.allowedValues.join(", ")))}if(n&&w.includes(i))return!0;if(n&&v.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(m(t,e.allowedValues.join(", ")));return i}f("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const y="v"+f("npm_package_version",{defaultValue:"0.0.1"})[0];class k extends i.EventEmitter{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;_initialized;keyManager;es;constructor(e,i,a){super({captureRejections:!0}),this.name=a??t.randomBytes(16).toString("hex"),this.serverUrl=e,this.token=i,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})).catch((t=>{e(t)}))}))}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfiguration=await k.getWellKnownCvsConfiguration(this.serverUrl).catch((t=>{throw new d("not-initialized",t)})),void 0!==this.token&&await this.initEventSourceClient().catch((t=>{throw d.from(t)}))}async initEventSourceClient(){if(void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;this.es=new r.default(this.serverUrl+t.vault_configuration[y].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.emitError(t)}}emitError(t){const e=d.from(t);switch(e.message){case"unauthorized":this.logout(),this.emit("logged-out");break;case"sse-connection-error":this.emit("connection-error",e);break;default:this.emit("error",e)}}async initKeyManager(t,e){await this.initialized;const i=this.wellKnownCvsConfiguration;this.keyManager=new c(t,e,i.vault_configuration[y].key_derivation),await this.keyManager.initialized}logout(){this.es?.close(),this.token=void 0,this.emit("logged-out")}async login(t,e){await this.initialized;const i=this.wellKnownCvsConfiguration;await this.initKeyManager(t,e);const a={username:t,authkey:this.keyManager.authKey},n=await p.post(this.serverUrl+i.vault_configuration.v2.token_endpoint,a,{responseStatus:200});this.token=n.token,await this.initEventSourceClient().catch((t=>{throw d.from(t)}))}async getRemoteStorageTimestamp(){if(await this.initialized,void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration,e=await p.get(this.serverUrl+t.vault_configuration[y].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}async getStorage(){if(await this.initialized,void 0===this.token||void 0===this.keyManager)throw new d("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=await p.get(this.serverUrl+t.vault_configuration[y].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(e.timestamp<(this.timestamp??0))throw new d("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,{storage:i,timestamp:e.timestamp}}catch(t){throw d.from(t)}}async updateStorage(t,e=!1){if(await this.initialized,void 0===this.token||void 0===this.keyManager)throw new d("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new d("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i=this.wellKnownCvsConfiguration;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const a={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},n=await p.post(this.serverUrl+i.vault_configuration[y].vault_endpoint,a,{bearerToken:this.token,responseStatus:201});this.timestamp=n.timestamp}async deleteStorage(){if(await this.initialized,void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;await p.delete(this.serverUrl+t.vault_configuration[y].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration;return(await p.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static async getWellKnownCvsConfiguration(t){return await p.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}static async computeAuthKey(t,e,i){const a=await k.getWellKnownCvsConfiguration(t),n=new c(e,i,a.vault_configuration[y].key_derivation);return await n.initialized,n.authKey}}exports.KeyManager=c,exports.SecretKey=u,exports.VaultClient=k,exports.VaultError=d,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=l;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cy9zZWNyZXQta2V5LnRzIiwiLi4vLi4vc3JjL3RzL2tleS1tYW5hZ2VyLnRzIiwiLi4vLi4vc3JjL3RzL2Vycm9yLnRzIiwiLi4vLi4vc3JjL3RzL3JlcXVlc3QudHMiLCIuLi8uLi9zcmMvdHMvY29uZmlnL3BhcnNlUHJvY2Vzc0VudlZhci50cyIsIi4uLy4uL3NyYy90cy9jb25maWcvaW5kZXgudHMiLCIuLi8uLi9zcmMvdHMvdmF1bHQtY2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJTZWNyZXRLZXkiLCJrZXkiLCJhbGciLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJlbmNyeXB0IiwiaW5wdXQiLCJpdiIsInJhbmRvbUJ5dGVzIiwiY2lwaGVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJlbmNyeXB0ZWQiLCJCdWZmZXIiLCJjb25jYXQiLCJ1cGRhdGUiLCJmaW5hbCIsInRhZyIsImdldEF1dGhUYWciLCJkZWNyeXB0Iiwic3ViYXJyYXkiLCJjaXBoZXJ0ZXh0IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2Iiwic2V0QXV0aFRhZyIsIktleU1hbmFnZXIiLCJfZW5jS2V5IiwiX2F1dGhLZXkiLCJ1c2VybmFtZSIsImRlcml2YXRpb25PcHRpb25zIiwiaW5pdGlhbGl6ZWQiLCJfaW5pdGlhbGl6ZWQiLCJwYXNzd29yZCIsIm9wdHMiLCJpbml0IiwiYXN5bmMiLCJtYXN0ZXIiLCJhdXRoIiwiZW5jIiwibWFzdGVyU2FsdCIsIl9zYWx0Iiwic2FsdF9oYXNoaW5nX2FsZ29yaXRobSIsInNhbHRfcGF0dGVybiIsIm1hc3RlcktleSIsImRlcml2ZUtleSIsInNhbHQiLCJhdXRoU2FsdCIsImVuY1NhbHQiLCJhdXRoS2V5IiwiZW5jS2V5IiwiUHJvbWlzZSIsImFsbCIsImVuY19hbGdvcml0aG0iLCJFcnJvciIsImNhdXNlIiwiZXhwb3J0IiwidG9TdHJpbmciLCJoYXNoQWxnb3JpdGhtIiwic2FsdFBhdHRlcm4iLCJyZXBsYWNlbWVudHMiLCJzYWx0U3RyaW5nIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlIiwiY3JlYXRlSGFzaCIsImRpZ2VzdCIsInBhc3N3b3JkT3JLZXkiLCJzY3J5cHRPcHRpb25zIiwiYWxnX29wdGlvbnMiLCJtYXhtZW0iLCJOIiwiciIsImtleVByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2NyeXB0IiwiZGVyaXZlZF9rZXlfbGVuZ3RoIiwiZXJyIiwiY3JlYXRlU2VjcmV0S2V5IiwiVmF1bHRFcnJvciIsImRhdGEiLCJtZXNzYWdlIiwib3B0aW9ucyIsInN1cGVyIiwibmFtZSIsInN0YXRpYyIsImVycm9yIiwiRXZlbnQiLCJBeGlvc0Vycm9yIiwicmVzcG9uc2UiLCJ1bmRlZmluZWQiLCJzdGF0dXMiLCJ2YXVsdENvbm5FcnJvciIsInJlcXVlc3QiLCJtZXRob2QiLCJjb25maWciLCJ0b0xvY2FsZVVwcGVyQ2FzZSIsInVybCIsImhlYWRlcnMiLCJ2YXVsdEVycm9yIiwic3RhY2siLCJnZXQiLCJiZWFyZXJUb2tlbiIsIkF1dGhvcml6YXRpb24iLCJyZXMiLCJheGlvcyIsImNhdGNoIiwiZnJvbSIsInJlc3BvbnNlU3RhdHVzIiwiZGVzY3JpcHRpb24iLCJwb3N0IiwicmVxdWVzdEJvZHkiLCJwdXQiLCJkZWxldGUiLCJsb2FkRW52RmlsZSIsImludmFsaWRNc2ciLCJ2YXJuYW1lIiwidmFsdWVzIiwicmV0IiwiYm9vbGVhbkZhbHNlQWxsb3dlZFZhbHVlcyIsImJvb2xlYW5UcnVlQWxsb3dlZFZhbHVlcyIsImJvb2xlYW5BbGxvd2VkVmFsdWVzIiwicGFyc2VQcm9jY2Vzc0VudlZhciIsInZhck5hbWUiLCJ2YWx1ZSIsImEiLCJwcm9jZXNzIiwiZW52IiwiaXNCb29sZWFuIiwiYWxsb3dlZFZhbHVlcyIsImRlZmF1bHRWYWx1ZSIsImluY2x1ZGVzIiwiUmFuZ2VFcnJvciIsImpvaW4iLCJhcGlWZXJzaW9uIiwiVmF1bHRDbGllbnQiLCJFdmVudEVtaXR0ZXIiLCJ0aW1lc3RhbXAiLCJ0b2tlbiIsInNlcnZlclVybCIsIndlbGxLbm93bkN2c0NvbmZpZ3VyYXRpb24iLCJrZXlNYW5hZ2VyIiwiZXMiLCJjYXB0dXJlUmVqZWN0aW9ucyIsInRoZW4iLCJyZWFzb24iLCJlbWl0IiwiZXZlbnROYW1lIiwiYXJncyIsIm9uIiwibGlzdGVuZXIiLCJvbmNlIiwiZ2V0V2VsbEtub3duQ3ZzQ29uZmlndXJhdGlvbiIsImluaXRFdmVudFNvdXJjZUNsaWVudCIsImN2c0NvbmYiLCJFdmVudFNvdXJjZSIsInZhdWx0X2NvbmZpZ3VyYXRpb24iLCJldmVudHNfZW5kcG9pbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIm1zZyIsIkpTT04iLCJwYXJzZSIsImxvZ291dCIsIm9uZXJyb3IiLCJlbWl0RXJyb3IiLCJrZXlfZGVyaXZhdGlvbiIsImNsb3NlIiwiaW5pdEtleU1hbmFnZXIiLCJyZXFCb2R5IiwiYXV0aGtleSIsInYyIiwidG9rZW5fZW5kcG9pbnQiLCJ0aW1lc3RhbXBfZW5kcG9pbnQiLCJ2YXVsdF9lbmRwb2ludCIsInN0b3JhZ2UiLCJmb3JjZSIsImxvY2FsVGltZXN0YW1wIiwicmVtb3RlVGltZXN0YW1wIiwiZ2V0UmVtb3RlU3RvcmFnZVRpbWVzdGFtcCIsInJlZ2lzdHJhdGlvbl9jb25maWd1cmF0aW9uIiwicHVibGljX2p3a19lbmRwb2ludCIsImp3ayIsInR5cGUiXSwibWFwcGluZ3MiOiJnUkFHYUEsRUFDTUMsSUFDUkMsSUFFVEMsWUFBYUYsRUFBZ0JDLEdBQzNCRSxLQUFLSCxJQUFNQSxFQUNYRyxLQUFLRixJQUFNQSxDQUNaLENBRURHLFFBQVNDLEdBRVAsTUFBTUMsRUFBS0MsY0FBWSxJQUdqQkMsRUFBU0MsRUFBQUEsZUFBZU4sS0FBS0YsSUFBS0UsS0FBS0gsSUFBS00sR0FHNUNJLEVBQVlDLE9BQU9DLE9BQU8sQ0FBQ0osRUFBT0ssT0FBT1IsR0FBUUcsRUFBT00sVUFHeERDLEVBQU1QLEVBQU9RLGFBR25CLE9BQU9MLE9B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
