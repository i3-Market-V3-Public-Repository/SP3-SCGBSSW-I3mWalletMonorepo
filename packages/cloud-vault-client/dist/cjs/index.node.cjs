"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("axios"),i=require("events"),a=require("eventsource"),s=require("dotenv");function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o=n(e),r=n(a);class u{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const i=t.randomBytes(16),a=t.createCipheriv(this.alg,this.key,i),s=Buffer.concat([a.update(e),a.final()]),n=a.getAuthTag();return Buffer.concat([i,n,s])}decrypt(e){const i=e.subarray(0,16),a=e.subarray(16,32),s=e.subarray(32),n=t.createDecipheriv(this.alg,this.key,i);return n.setAuthTag(a),Buffer.concat([n.update(s),n.final()])}}class c{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:a}=this.derivationOptions,s=h(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),n=await l(t,{...e,salt:s}),o=h(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),r=h(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[c,d]=await Promise.all([l(n,{...i,salt:o}),l(n,{...a,salt:r})]);this._authKey=c,this._encKey=new u(d,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function h(e,i,a){let s="";for(const t in a)s=i.replace(t,a[t]);return t.createHash(e).update(s).digest()}async function l(e,i){const a={...i.alg_options,maxmem:256*i.alg_options.N*i.alg_options.r},s="string"==typeof e?e:e.export(),n=new Promise(((e,n)=>{t.scrypt(s,i.salt,i.derived_key_length,a,((i,a)=>{null!==i&&n(i),e(t.createSecretKey(a))}))}));return await n}class d extends Error{data;message;constructor(t,e,i){super(t,i),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof d)return t;if(t instanceof Event)return new d("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof e.AxiosError){if("Unauthorized"===t.response?.data.name)return new d("unauthorized",void 0);if(404===t.response?.status&&"no storage"===t.response.data.name)return new d("no-uploadded-storage",void 0);const e={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new d("http-connection-error",e)}if(t instanceof Error){const e=new d("error",t,{cause:t.cause});return e.stack=t.stack,e}return new d("unknown",t)}}var p={get:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const a=await o.default.get(t,{headers:i}).catch((t=>{throw d.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new d("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},post:async function(t,e,i){const a={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken);const s=await o.default.post(t,e,{headers:a}).catch((t=>{throw d.from(t)}));if(void 0!==i?.responseStatus&&s.status!==i.responseStatus)throw new d("validation",{description:`Received HTTP status ${s.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return s.data},put:async function(t,e,i){const a={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken);const s=await o.default.put(t,e,{headers:a}).catch((t=>{throw d.from(t)}));if(void 0!==i?.responseStatus&&s.status!==i.responseStatus)throw new d("validation",{description:`Received HTTP status ${s.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return s.data},delete:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const a=await o.default.delete(t,{headers:i}).catch((t=>{throw d.from(t)}));if(void 0!==e?.responseStatus&&a.status!==e.responseStatus)throw new d("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data}};s.config();const m=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},w=["0","false","FALSE"],g=["1","true","FALSE"],v=w.concat(g);function f(t,e){const i=void 0===(a=process.env[t])?"":a;var a;const s=(e=e??{})?.isBoolean??!1;if(s&&(e={...e,allowedValues:v}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(m(t,e.allowedValues.join(", ")))}if(s&&g.includes(i))return!0;if(s&&w.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(m(t,e.allowedValues.join(", ")));return i}f("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const y="v"+f("npm_package_version",{defaultValue:"0.0.1"})[0];class k extends i.EventEmitter{timestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;initialized;es;constructor(e,i,a,s){super({captureRejections:!0}),this.name=s??t.randomBytes(16).toString("hex"),this.serverUrl=e,this.username=i,this.password=a,this.initialized=this.init()}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration;this.keyManager=new c(this.username,this.password,t.vault_configuration[y].key_derivation),await this.keyManager.initialized,delete this.password}catch(t){throw d.from(t)}}async getWellKnownCvsConfiguration(){this.wellKnownCvsConfiguration=await p.get(this.serverUrl+"/.well-known/cvs-configuration",{responseStatus:200})}async initEventSourceClient(){if(void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;this.es=new r.default(this.serverUrl+t.vault_configuration[y].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.emitError(t)}}emitError(t){const e=d.from(t);switch(e.message){case"unauthorized":this.logout(),this.emit("logged-out");break;case"sse-connection-error":this.emit("connection-error",e);break;default:this.emit("error",e)}}logout(){this.es?.close(),this.token=void 0,this.emit("logged-out")}async getAuthKey(){return await this.initialized.catch((t=>{throw new d("not-initialized",t)})),this.keyManager.authKey}async login(){await this.initialized.catch((t=>{throw new d("not-initialized",t)}));const t={username:this.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,i=await p.post(this.serverUrl+e.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=i.token,await this.initEventSourceClient().catch((t=>{throw d.from(t)}))}async getRemoteStorageTimestamp(){if(await this.initialized.catch((t=>{throw new d("not-initialized",t)})),void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration,e=await p.get(this.serverUrl+t.vault_configuration[y].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}async getStorage(){if(await this.initialized.catch((t=>{throw new d("not-initialized",t)})),void 0===this.token)throw new d("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=this.keyManager.encKey,i=await p.get(this.serverUrl+t.vault_configuration[y].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(i.timestamp<(this.timestamp??0))throw new d("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const a=e.decrypt(Buffer.from(i.ciphertext,"base64url"));return this.timestamp=i.timestamp,{storage:a,timestamp:i.timestamp}}catch(t){throw d.from(t)}}async updateStorage(t,e=!1){if(await this.initialized.catch((t=>{throw new d("not-initialized",t)})),void 0===this.token)throw new d("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new d("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i=this.wellKnownCvsConfiguration,a=this.keyManager.encKey;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const s={ciphertext:a.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},n=await p.post(this.serverUrl+i.vault_configuration[y].vault_endpoint,s,{bearerToken:this.token,responseStatus:201});this.timestamp=n.timestamp}async deleteStorage(){if(await this.initialized.catch((t=>{throw new d("not-initialized",t)})),void 0===this.token)throw new d("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;await p.delete(this.serverUrl+t.vault_configuration[y].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}async getServerPublicKey(){await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration;return(await p.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}}exports.KeyManager=c,exports.SecretKey=u,exports.VaultClient=k,exports.deriveKey=l;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
