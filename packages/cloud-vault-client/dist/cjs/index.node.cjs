"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("axios"),e=require("eventsource"),i=require("crypto"),r=require("events"),n=require("dotenv");function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var a=s(t),o=s(e);n.config();const l=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},u=["0","false","FALSE"],h=["1","true","FALSE"],d=u.concat(h);function c(t,e){const i=void 0===(r=process.env[t])?"":r;var r;const n=(e=e??{})?.isBoolean??!1;if(n&&(e={...e,allowedValues:d}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(l(t,e.allowedValues.join(", ")))}if(n&&h.includes(i))return!0;if(n&&u.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(l(t,e.allowedValues.join(", ")));return i}c("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const m="v"+c("npm_package_version",{defaultValue:"0.0.1"})[0];class g{_encKey;_authKey;username;derivationOptions;initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:r}=this.derivationOptions,n=v(e.saltHashingAlgorithm,e.saltPattern,{username:this.username}),s=await w(t,{...e,salt:n}),a=v(i.saltHashingAlgorithm,i.saltPattern,{username:this.username}),o=v(r.saltHashingAlgorithm,r.saltPattern,{username:this.username}),[l,u]=await Promise.all([w(s,{...i,salt:a}),w(s,{...r,salt:o})]);this._authKey=l,this._encKey=u}async getAuthKey(){return await this.initialized,this._authKey.export().toString("base64url")}async getEncKey(){return await this.initialized,this._encKey}}function v(t,e,r){let n="";for(const t in r)n=e.replaceAll(t,r[t]);return i.createHash(t).update(n).digest()}async function w(t,e){const r={...e.algOptions,maxmem:256*e.algOptions.N*e.algOptions.r},n="string"==typeof t?t:t.export(),s=new Promise(((t,s)=>{i.scrypt(n,e.salt,e.derivedKeyLength,r,((e,r)=>{null!==e&&s(e),t(i.createSecretKey(r))}))}));return await s}class p extends r.EventEmitter{timestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;initialized;es;constructor(t,e,r,n){super(),this.name=n??i.randomBytes(16).toString("hex"),this.serverUrl=t,this.username=e,this.password=r,this.initialized=this.init()}async init(){try{await this.getWellKnownCvsConfiguration()}catch(t){return this.emitError(t),!1}const t=this.wellKnownCvsConfiguration;this.keyManager=new g(this.username,this.password,t["vault-configuration"][m]["key-derivation"]);try{await this.keyManager.initialized}catch(t){return this.emitError(t),!1}return delete this.password,!0}emitError(e){e instanceof t.AxiosError&&void 0!==e.response?"Unauthorized"===e.response.data.name?(this.logout(),this.emit("login-required")):this.emit("error",e.response):this.emit("error",e)}async getWellKnownCvsConfiguration(){const t=await a.default.get(this.serverUrl+"/.well-known/cvs-configuration");this.wellKnownCvsConfiguration=t.data}async initEventSourceClient(){if(void 0===this.token)throw new Error("Cannot subscribe to events without login first");const t=this.wellKnownCvsConfiguration;this.es=new o.default(this.serverUrl+t["vault-configuration"][m].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{this.emit("storage-updated")})),this.es.onerror=t=>{this.emit("error",t)}}close(){this.logout(),this.emit("close")}async getAuthKey(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),null}return await this.keyManager.getAuthKey()}async login(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),!1}const t={username:this.username,authkey:await this.keyManager.getAuthKey()};try{const e=this.wellKnownCvsConfiguration,i=await a.default.post(this.serverUrl+e["vault-configuration"].v2.token_endpoint,t);if(200!==i.status)return this.emitError(i),!1;const r=i.data;return this.token=r.token,await this.initEventSourceClient(),this.emit("logged-in"),!0}catch(t){return this.emitError(t),!1}}logout(){this.token=void 0,this.es?.close()}async getRemoteStorageTimestamp(){try{if(void 0===this.token)return this.emit("login-required"),null;const t=this.wellKnownCvsConfiguration,e=await a.default.get(this.serverUrl+t["vault-configuration"][m].timestamp_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 200!==e.status?(this.emitError(e),null):e.data.timestamp}catch(t){return this.emitError(t),null}}async updateStorage(t,e=!1){try{if(void 0===this.token)return this.emit("login-required"),!1;const i=this.wellKnownCvsConfiguration;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const r=await a.default.post(this.serverUrl+i["vault-configuration"][m].vault_endpoint,t,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 201!==r.status?(this.emitError(r),!1):(this.timestamp=r.data.timestamp,!0)}catch(t){this.emitError(t)}return!1}async deleteStorage(){try{if(void 0===this.token)return this.logout(),this.emit("login-required"),!1;const t=this.wellKnownCvsConfiguration,e=await a.default.delete(this.serverUrl+t["vault-configuration"][m].vault_endpoint,{headers:{Authorization:"Bearer "+this.token}});return 204!==e.status?(this.emitError(e),!1):(this.emit("storage-deleted"),!0)}catch(t){this.emitError(t)}return!1}async getServerPublicKey(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration,e=await a.default.get(this.serverUrl+t["registration-configuration"]["public-jwk_endpoint"]);return 200!==e.status?(this.emitError(e),null):e.data.jwk}catch(t){return this.emitError(t),null}}}exports.KeyManager=g,exports.VaultClient=p,exports.deriveKey=w;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
