import{randomBytes as t,createCipheriv as e,createDecipheriv as s,scrypt as i,createHash as a,createSecretKey as n}from"crypto";import{isMainThread as o,parentPort as r,workerData as c,Worker as u}from"worker_threads";import h,{AxiosError as l}from"axios";import{EventEmitter as d}from"events";import p from"eventsource";import{config as m}from"dotenv";class w{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(s){const i=t(16),a=e(this.alg,this.key,i),n=Buffer.concat([a.update(s),a.final()]),o=a.getAuthTag();return Buffer.concat([i,o,n])}decrypt(t){const e=t.subarray(0,16),i=t.subarray(16,32),a=t.subarray(32),n=s(this.alg,this.key,e);return n.setAuthTag(i),Buffer.concat([n.update(a),n.final()])}}if(!o){const{passwordOrKey:t,opts:e}=c;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},a="string"==typeof t?t:t.export(),n=new Promise(((t,n)=>{i(a,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&n(e),t(s)}))}));return await n})(t,e).then((t=>{r?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class g{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=f(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),n=await v(t,{...e,salt:a}),o=f(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),r=f(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[c,u]=await Promise.all([v(n,{...s,salt:o}),v(n,{...i,salt:r})]);this._authKey=c,this._encKey=new w(u,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function f(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return a(t).update(i).digest()}async function v(t,e){return await new Promise(((s,i)=>{const a=new u("./dist/esm/index.node.js",{workerData:{passwordOrKey:t,opts:e}});a.on("message",(t=>{s(n(t))})),a.on("error",(t=>{i(t)})),a.on("messageerror",(t=>{i(t)}))}))}class y extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof y)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new y("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof l){const e=t.response?.data;switch(e.name){case"no-storage":return new y("no-uploaded-storage",void 0);case"invalid-credentials":return new y("invalid-credentials",void 0);case"quota-exceeded":return new y("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new y("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new y("http-connection-error",s)}if(t instanceof Error){const e=new y("error",t,{cause:t.cause});return e.stack=t.stack,e}return new y("unknown",t)}}function _(t,e){return t.message===e}var T={get:async function(t,e){const s={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(s.Authorization="Bearer "+e.bearerToken);const i=await h.get(t,{headers:s}).catch((t=>{throw y.from(t)}));if(void 0!==e?.responseStatus&&i.status!==e.responseStatus)throw new y("validation",{description:`Received HTTP status ${i.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return i.data},post:async function(t,e,s){const i={"Content-Type":"application/json"};void 0!==s?.bearerToken&&(i.Authorization="Bearer "+s.bearerToken);const a=await h.post(t,e,{headers:i}).catch((t=>{throw y.from(t)}));if(void 0!==s?.responseStatus&&a.status!==s.responseStatus)throw new y("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${s.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},put:async function(t,e,s){const i={"Content-Type":"application/json"};void 0!==s?.bearerToken&&(i.Authorization="Bearer "+s.bearerToken);const a=await h.put(t,e,{headers:i}).catch((t=>{throw y.from(t)}));if(void 0!==s?.responseStatus&&a.status!==s.responseStatus)throw new y("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${s.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},delete:async function(t,e){const s={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(s.Authorization="Bearer "+e.bearerToken);const i=await h.delete(t,{headers:s}).catch((t=>{throw y.from(t)}));if(void 0!==e?.responseStatus&&i.status!==e.responseStatus)throw new y("validation",{description:`Received HTTP status ${i.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return i.data}};m();const I=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},k=["0","false","FALSE"],E=["1","true","FALSE"],C=k.concat(E);function z(t,e){const s=void 0===(i=process.env[t])?"":i;var i;const a=(e=e??{})?.isBoolean??!1;if(a&&(e={...e,allowedValues:C}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(I(t,e.allowedValues.join(", ")))}if(a&&E.includes(s))return!0;if(a&&k.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(I(t,e.allowedValues.join(", ")));return s}z("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const K="v"+z("npm_package_version",{defaultValue:"0.0.1"})[0],N={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function S(t,e){switch(y.from(e).message){case"invalid-credentials":case"unauthorized":return N.INITIALIZED;case"sse-connection-error":return t>=N.LOGGED_IN?N.LOGGED_IN:N.INITIALIZED;default:return t}}class D extends d{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;_state;_initialized;keyManager;es;constructor(e,s){super({captureRejections:!0}),this.name=s??t(16).toString("hex"),this.serverUrl=e,this._state=N.NOT_INITIALIZED,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})),this._initialized.catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){this._state!==t&&(this._state=t,this._state<N.LOGGED_IN&&(this.token=void 0),this.emit("state-changed",this._state))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfiguration=await D.getWellKnownCvsConfiguration(this.serverUrl).catch((t=>{throw new y("not-initialized",t)})),this.state=N.INITIALIZED}async initEventSourceClient(){if(this.state<N.LOGGED_IN)throw new Error("cannot be called if not logged in");if(this.state>=N.CONNECTED)return;const t=this.wellKnownCvsConfiguration;this.es=new p(this.serverUrl+t.vault_configuration[K].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.state=N.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.state=S(this.state,t)}}async initKeyManager(t,e){this.state===N.NOT_INITIALIZED&&await this.initialized;const s=this.wellKnownCvsConfiguration;this.keyManager=new g(t,e,s.vault_configuration[K].key_derivation),await this.keyManager.initialized}logout(){this.es?.close(),this.state=N.LOGGED_IN,this.token=void 0,this.state=N.INITIALIZED}async login(t,e){this.state===N.INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const s={username:t,authkey:this.keyManager.authKey},i=this.wellKnownCvsConfiguration,a=await T.post(this.serverUrl+i.vault_configuration.v2.token_endpoint,s,{responseStatus:200});this.token=a.token,this.state=N.LOGGED_IN,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<N.LOGGED_IN)throw new y("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{const e=await T.get(this.serverUrl+t.vault_configuration[K].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw this.state=S(this.state,t),t}}async getStorage(){if(this.state<N.LOGGED_IN)throw new y("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.wellKnownCvsConfiguration,s=await T.get(this.serverUrl+e.vault_configuration[K].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new y("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=S(this.state,e),y.from(e)}}async updateStorage(t,e=!1){if(this.state<N.LOGGED_IN)throw new y("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new y("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s=Date.now();this.emit("sync-start",s);const i=this.wellKnownCvsConfiguration;try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const a={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},n=await T.post(this.serverUrl+i.vault_configuration[K].vault_endpoint,a,{bearerToken:this.token,responseStatus:201});return this.timestamp=n.timestamp,this.emit("sync-stop",s,Date.now()),this.timestamp}catch(t){throw this.emit("sync-stop",s,Date.now()),this.state=S(this.state,t),y.from(t)}}async deleteStorage(){if(this.state<N.LOGGED_IN)throw new y("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await T.delete(this.serverUrl+t.vault_configuration[K].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}catch(t){throw t instanceof y&&"unauthorized"===t.message&&(this.token=void 0,this.state=N.INITIALIZED),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration;return(await T.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static async getWellKnownCvsConfiguration(t){return await T.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}static async computeAuthKey(t,e,s){const i=await D.getWellKnownCvsConfiguration(t),a=new g(e,s,i.vault_configuration[K].key_derivation);return await a.initialized,a.authKey}}export{g as KeyManager,w as SecretKey,N as VAULT_STATE,D as VaultClient,y as VaultError,_ as checkErrorType,v as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
