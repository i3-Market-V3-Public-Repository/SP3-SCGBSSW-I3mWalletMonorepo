import{randomBytes as t,createCipheriv as e,createDecipheriv as i,createHash as s,scrypt as a,createSecretKey as r}from"crypto";import n,{AxiosError as o}from"axios";import{EventEmitter as l}from"events";import u from"eventsource";import{config as h}from"dotenv";class m{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(i){const s=t(16),a=e(this.alg,this.key,s),r=Buffer.concat([a.update(i),a.final()]),n=a.getAuthTag();return Buffer.concat([s,n,r])}decrypt(t){const e=t.subarray(0,16),s=t.subarray(16,32),a=t.subarray(32),r=i(this.alg,this.key,e);return r.setAuthTag(s),Buffer.concat([r.update(a),r.final()])}}class d{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:s}=this.derivationOptions,a=c(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),r=await g(t,{...e,salt:a}),n=c(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),o=c(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),[l,u]=await Promise.all([g(r,{...i,salt:n}),g(r,{...s,salt:o})]);this._authKey=l,this._encKey=new m(u,s.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function c(t,e,i){let a="";for(const t in i)a=e.replaceAll(t,i[t]);return s(t).update(a).digest()}async function g(t,e){const i={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},s="string"==typeof t?t:t.export(),n=new Promise(((t,n)=>{a(s,e.salt,e.derived_key_length,i,((e,i)=>{null!==e&&n(e),t(r(i))}))}));return await n}h();const p=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},v=["0","false","FALSE"],f=["1","true","FALSE"],w=v.concat(f);function y(t,e){const i=void 0===(s=process.env[t])?"":s;var s;const a=(e=e??{})?.isBoolean??!1;if(a&&(e={...e,allowedValues:w}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(p(t,e.allowedValues.join(", ")))}if(a&&f.includes(i))return!0;if(a&&v.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(p(t,e.allowedValues.join(", ")));return i}y("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const E="v"+y("npm_package_version",{defaultValue:"0.0.1"})[0];class _ extends l{localTimestamp;remoteTimestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;defaultEvents;initialized;es;constructor(e,i,s,a){super({captureRejections:!0}),this.name=a??t(16).toString("hex"),this.serverUrl=e,this.username=i,this.password=s,this.defaultEvents={connected:"connected",close:"close","login-required":"login-required","storage-updated":"storage-updated","storage-deleted":"storage-deleted",conflict:"conlict",error:"error"},this.initialized=this.init()}async init(){try{await this.getWellKnownCvsConfiguration()}catch(t){return this.emitError(t),!1}const t=this.wellKnownCvsConfiguration;this.keyManager=new d(this.username,this.password,t.vault_configuration[E].key_derivation);try{await this.keyManager.initialized}catch(t){return this.emitError(t),!1}return delete this.password,!0}emitError(t){t instanceof o&&void 0!==t.response?"Unauthorized"===t.response.data.name?(this.logout(),this.emit(this.defaultEvents["login-required"])):this.emit(this.defaultEvents.error,t.response):this.emit(this.defaultEvents.error,t)}async getWellKnownCvsConfiguration(){const t=await n.get(this.serverUrl+"/.well-known/cvs-configuration");this.wellKnownCvsConfiguration=t.data}async initEventSourceClient(){if(void 0===this.token)throw new Error("Cannot subscribe to events without login first");const t=this.wellKnownCvsConfiguration;this.es=new u(this.serverUrl+t.vault_configuration[E].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.emit(this.defaultEvents.connected,e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.remoteTimestamp&&(this.remoteTimestamp=e.timestamp,this.emit(this.defaultEvents["storage-updated"],this.remoteTimestamp))})),this.es.addEventListener("storage-deleted",(t=>{this.emit(this.defaultEvents["storage-deleted"])})),this.es.onerror=t=>{this.emitError(t)}}close(){this.logout(),this.emit(this.defaultEvents.close)}async getAuthKey(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),null}return this.keyManager.authKey}async login(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),!1}const t={username:this.username,authkey:this.keyManager.authKey};try{const e=this.wellKnownCvsConfiguration,i=await n.post(this.serverUrl+e.vault_configuration.v2.token_endpoint,t);if(200!==i.status)return this.emitError(i),!1;const s=i.data;return this.token=s.token,await this.initEventSourceClient(),!0}catch(t){return this.emitError(t),!1}}logout(){this.token=void 0,this.es?.close()}async getRemoteStorageTimestamp(){try{if(void 0===this.token)return this.emit(this.defaultEvents["login-required"]),null;const t=this.wellKnownCvsConfiguration,e=await n.get(this.serverUrl+t.vault_configuration[E].timestamp_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 200!==e.status?(this.emitError(e),null):((this.remoteTimestamp??0)<e.data.timestamp&&(this.remoteTimestamp=e.data.timestamp),e.data.timestamp)}catch(t){return this.emitError(t),null}}async getStorage(){try{if(void 0===this.token)return this.emit(this.defaultEvents["login-required"]),null;const t=this.wellKnownCvsConfiguration,e=this.keyManager.encKey,i=await n.get(this.serverUrl+t.vault_configuration[E].vault_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});if(200!==i.status)return this.emitError(i),null;if(i.data.timestamp<(this.remoteTimestamp??0))return this.emitError(new Error("Received timestamp is older than the latest one published")),null;const s=e.decrypt(Buffer.from(i.data.ciphertext,"base64url"));return this.remoteTimestamp=i.data.timestamp,this.localTimestamp=i.data.timestamp,{storage:s,timestamp:i.data.timestamp}}catch(t){return this.emitError(t),null}}async updateStorage(t,e=!1){try{if(void 0===this.token)return this.emit(this.defaultEvents["login-required"]),!1;void 0!==this.remoteTimestamp&&(t.timestamp??0)<this.remoteTimestamp&&this.emit(this.defaultEvents.conflict);const i=this.wellKnownCvsConfiguration,s=this.keyManager.encKey;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const a={ciphertext:s.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},r=await n.post(this.serverUrl+i.vault_configuration[E].vault_endpoint,a,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 201!==r.status?(this.emitError(r),!1):(this.remoteTimestamp=r.data.timestamp,this.localTimestamp=r.data.timestamp,!0)}catch(t){this.emitError(t)}return!1}async deleteStorage(){try{if(void 0===this.token)return this.logout(),this.emit(this.defaultEvents["login-required"]),!1;const t=this.wellKnownCvsConfiguration,e=await n.delete(this.serverUrl+t.vault_configuration[E].vault_endpoint,{headers:{Authorization:"Bearer "+this.token}});return 204!==e.status?(this.emitError(e),!1):(this.emit(this.defaultEvents["storage-deleted"]),delete this.localTimestamp,delete this.remoteTimestamp,!0)}catch(t){this.emitError(t)}return!1}async getServerPublicKey(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration,e=await n.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint);return 200!==e.status?(this.emitError(e),null):e.data.jwk}catch(t){return this.emitError(t),null}}}export{d as KeyManager,m as SecretKey,_ as VaultClient,g as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
