import{randomBytes as t,createCipheriv as e,createDecipheriv as s,scrypt as i,createHash as a,createSecretKey as o}from"crypto";import{isMainThread as n,workerData as r,parentPort as h,Worker as u}from"worker_threads";import l,{AxiosError as d}from"axios";import c,{isNetworkOrIdempotentRequestError as p}from"axios-retry";import{EventEmitter as m}from"events";import w from"eventsource";import{config as f}from"dotenv";class g{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(s){const i=t(16),a=e(this.alg,this.key,i),o=Buffer.concat([a.update(s),a.final()]),n=a.getAuthTag();return Buffer.concat([i,n,o])}decrypt(t){const e=t.subarray(0,16),i=t.subarray(16,32),a=t.subarray(32),o=s(this.alg,this.key,e);return o.setAuthTag(i),Buffer.concat([o.update(a),o.final()])}}if(!n&&"object"==typeof r&&"scrypt-thread"===r._name){const{passwordOrKey:t,opts:e}=r;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},a="string"==typeof t?t:t.export(),o=new Promise(((t,o)=>{i(a,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&o(e),t(s)}))}));return await o})(t,e).then((t=>{h?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class v{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=y(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),o=await _(t,{...e,salt:a}),n=y(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),r=y(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[h,u]=await Promise.all([_(o,{...s,salt:n}),_(o,{...i,salt:r})]);this._authKey=h,this._encKey=new g(u,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function y(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return a(t).update(i).digest()}async function _(t,e){return await new Promise(((s,i)=>{const a=new u("./dist/esm/index.node.js",{workerData:{_name:"scrypt-thread",passwordOrKey:t,opts:e}});a.on("message",(t=>{s(o(t))})),a.on("error",(t=>{i(t)})),a.on("messageerror",(t=>{i(t)}))}))}class T extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof T)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new T("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof d){const e=t.response?.data;switch(e.name){case"no-storage":return new T("no-uploaded-storage",void 0);case"invalid-credentials":return new T("invalid-credentials",void 0);case"invalid-timestamp":return new T("invalid-timestamp",void 0);case"quota-exceeded":return new T("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new T("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new T("http-connection-error",s)}if(t instanceof Error){const e=new T("error",t,{cause:t.cause});return e.stack=t.stack,e}return new T("unknown",t)}}function E(t,e){return t.message===e}class I{axios;defaultCallOptions;defaultUrl;_stop;uploading;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.uploading={}}getAxiosInstance(t){const e=l.create();return void 0!==t?.retries&&c(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>!this._stop&&p(t)}),e}async waitForUploadsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new T("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.uploading[e])for(const t of this.uploading[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.uploading)await this.waitForUploadsToFinsh(t).catch();this._stop=!1}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new T("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e,a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new T("http-request-canceled",{request:{method:"GET",url:s,headers:a}});const o=await this.axios.get(s,{headers:a}).catch((t=>{throw T.from(t)}));if(void 0!==i?.responseStatus&&o.status!==i.responseStatus)throw new T("validation",{description:`Received HTTP status ${o.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return o.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new T("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e,a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new T("http-request-canceled",{request:{method:"DELETE",url:s,headers:a}});const o=await this.axios.delete(s,{headers:a}).catch((t=>{throw T.from(t)}));if(void 0!==i?.responseStatus&&o.status!==i.responseStatus)throw new T("validation",{description:`Received HTTP status ${o.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return o.data}async upload(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new T("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequentialPost&&await this.waitForUploadsToFinsh(e).catch(),this.uploading[e]=[];const o=this.axios[t](e,s,{headers:a}),n=this.uploading[e].push(o)-1,r=await o.catch((t=>{throw T.from(t)})),h=i?.beforeUploadFinish;if(void 0!==h&&await h(r.data),n===this.uploading[e].length-1)this.uploading[e].pop();else{let t=n;do{delete this.uploading[e][n],t--}while(void 0===this.uploading[e][t])}if(0===this.uploading[e].length&&delete this.uploading[e],void 0!==i?.responseStatus&&r.status!==i.responseStatus)throw new T("validation",{description:`Received HTTP status ${r.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return r.data}async post(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new T("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.upload("post",i,a,o)}async put(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new T("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.upload("put",i,a,o)}}f();const C=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},k=["0","false","FALSE"],O=["1","true","FALSE"],N=k.concat(O);function D(t,e){const s=void 0===(i=process.env[t])?"":i;var i;const a=(e=e??{})?.isBoolean??!1;if(a&&(e={...e,allowedValues:N}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(C(t,e.allowedValues.join(", ")))}if(a&&O.includes(s))return!0;if(a&&k.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(C(t,e.allowedValues.join(", ")));return s}D("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const K="v"+D("npm_package_version",{defaultValue:"0.0.1"})[0],U={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function z(t,e){switch(T.from(e).message){case"invalid-credentials":case"unauthorized":return U.INITIALIZED;case"sse-connection-error":return t>=U.LOGGED_IN?U.LOGGED_IN:U.INITIALIZED;default:return t}}class b extends m{timestamp;token;name;opts;serverRootUrl;serverPrefix;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;_state;_initialized;vaultRequest;keyManager;es;constructor(e,s){super({captureRejections:!0}),this.name=s?.name??t(16).toString("hex"),this.opts=s;const i=new URL(e);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this._state=U.NOT_INITIALIZED,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})).catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){if(t<U.NOT_INITIALIZED||t>U.CONNECTED)throw new Error("invalid state");if(t-this._state>1||this.state-t>1)throw new Error("steps MUST be passed one by one");if(this._state!==t){switch(t){case U.NOT_INITIALIZED:delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this._initialized=new Promise(((t,e)=>{e(new T("not-initialized",void 0))}));break;case U.INITIALIZED:this._state===U.LOGGED_IN&&(delete this.keyManager,delete this.vaultRequest,delete this.token,delete this.timestamp,this.es?.close(),delete this.es)}this._state=t,this.emit("state-changed",this._state)}}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfigurationPromise=b.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new T("not-initialized",t)})),this.state=U.INITIALIZED}async initEventSourceClient(){if(this.state!==U.LOGGED_IN)throw new Error("cannot be called if not logged in");const t=this.wellKnownCvsConfiguration.vault_configuration[K].events_endpoint;this.es=new w(t,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0===e.timestamp?this.emit("empty-storage"):e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.state=U.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForUploadsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForUploadsToFinsh().finally((()=>{this.logout(),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state=z(this.state,t)}}async initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new v(t,e,s.vault_configuration[K].key_derivation),await this.keyManager.initialized}logout(){this.state<U.LOGGED_IN||(this.state===U.CONNECTED&&(this.state=U.LOGGED_IN),this.state=U.INITIALIZED)}close(){this.logout(),this.wellKnownCvsConfigurationPromise?.stop(),this.wellKnownCvsConfigurationPromise?.promise.catch((()=>{})),this.state=U.NOT_INITIALIZED}async login(t,e,s){this.state===U.NOT_INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const i={username:t,authkey:this.keyManager.authKey},a=new I({retryOptions:this.opts?.defaultRetryOptions}),o=this.wellKnownCvsConfiguration,n=await a.post(o.vault_configuration.v2.token_endpoint,i,{responseStatus:200});this.token=n.token,this.vaultRequest=new I({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequentialPost:!0},defaultUrl:o.vault_configuration.v2.vault_endpoint}),this.timestamp=s,this.state=U.LOGGED_IN,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<U.LOGGED_IN)throw new T("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForUploadsToFinsh();const e=new I({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[K].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw this.state=z(this.state,t),t}}async getStorage(){if(this.state<U.LOGGED_IN)throw new T("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForUploadsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new T("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=z(this.state,e),T.from(e)}}async updateStorage(t,e=!1,s){if(this.state<U.LOGGED_IN)throw new T("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new T("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=this.vaultRequest,o=await a.post(s,{bearerToken:this.token,responseStatus:201,beforeUploadFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),o.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),this.state=z(this.state,t),T.from(t)}}async deleteStorage(){if(this.state<U.LOGGED_IN)throw new T("unauthorized",void 0);try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),this.logout()}catch(t){throw t instanceof T&&"unauthorized"===t.message&&this.logout(),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration,e=new I({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new I({retryOptions:e}),i=s.get(t+"/.well-known/cvs-configuration",{responseStatus:200});return{stop:s.stop,promise:i}}static async computeAuthKey(t,e,s,i){const a=b.getWellKnownCvsConfiguration(t,i),o=await a.promise,n=new v(e,s,o.vault_configuration[K].key_derivation);return await n.initialized,n.authKey}}export{v as KeyManager,I as Request,g as SecretKey,U as VAULT_STATE,b as VaultClient,T as VaultError,E as checkErrorType,_ as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL3NlY3JldC1rZXkudHMiLCIuLi8uLi9zcmMvdHMvc2NyeXB0LXRocmVhZC50cyIsIi4uLy4uL3NyYy90cy9rZXktbWFuYWdlci50cyIsIi4uLy4uL3NyYy90cy9lcnJvci50cyIsIi4uLy4uL3NyYy90cy9yZXF1ZXN0LnRzIiwiLi4vLi4vc3JjL3RzL2NvbmZpZy9wYXJzZVByb2Nlc3NFbnZWYXIudHMiLCIuLi8uLi9zcmMvdHMvY29uZmlnL2luZGV4LnRzIiwiLi4vLi4vc3JjL3RzL3ZhdWx0LXN0YXRlLnRzIiwiLi4vLi4vc3JjL3RzL3ZhdWx0LWNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsiU2VjcmV0S2V5Iiwia2V5IiwiYWxnIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiZW5jcnlwdCIsImlucHV0IiwiaXYiLCJyYW5kb21CeXRlcyIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiZW5jcnlwdGVkIiwiQnVmZmVyIiwiY29uY2F0IiwidXBkYXRlIiwiZmluYWwiLCJ0YWciLCJnZXRBdXRoVGFnIiwiZGVjcnlwdCIsInN1YmFycmF5IiwiY2lwaGVydGV4dCIsImRlY2lwaGVyIiwiY3JlYXRlRGVjaXBoZXJpdiIsInNldEF1dGhUYWciLCJpc01haW5UaHJlYWQiLCJ3b3JrZXJEYXRhIiwiX25hbWUiLCJwYXNzd29yZE9yS2V5Iiwib3B0cyIsImFzeW5jIiwic2NyeXB0T3B0aW9ucyIsImFsZ19vcHRpb25zIiwibWF4bWVtIiwiTiIsInIiLCJwYXNzd29yZCIsImV4cG9ydCIsImtleVByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNjcnlwdCIsInNhbHQiLCJkZXJpdmVkX2tleV9sZW5ndGgiLCJlcnIiLCJzY3J5cHRUaHJlYWQiLCJ0aGVuIiwiZGVyaXZlZEtleSIsInBhcmVudFBvcnQiLCJwb3N0TWVzc2FnZSIsImNhdGNoIiwiRXJyb3IiLCJLZXlNYW5hZ2VyIiwiX2VuY0tleSIsIl9hdXRoS2V5IiwidXNlcm5hbWUiLCJkZXJpdmF0aW9uT3B0aW9ucyIsImluaXRpYWxpemVkIiwiX2luaXRpYWxpemVkIiwiaW5pdCIsIm1hc3RlciIsImF1dGgiLCJlbmMiLCJtYXN0ZXJTYWx0IiwiX3NhbHQiLCJzYWx0X2hhc2hpbmdfYWxnb3JpdGhtIiwic2FsdF9wYXR0ZXJuIiwibWFzdGVyS2V5IiwiZGVyaXZlS2V5IiwiYXV0aFNhbHQiLCJlbmNTYWx0IiwiYXV0aEtleSIsImVuY0tleSIsImFsbCIsImVuY19hbGdvcml0aG0iLCJjYXVzZSIsInRvU3RyaW5nIiwiaGFzaEFsZ29yaXRobSIsInNhbHRQYXR0ZXJuIiwicmVwbGFjZW1lbnRzIiwic2FsdFN0cmluZyIsInNlYXJjaFZhbHVlIiwicmVwbGFjZSIsImNyZWF0ZUhhc2giLCJkaWdlc3QiLCJ3b3JrZXIiLCJXb3JrZXIiLCJvbiIsImNyZWF0ZVNlY3JldEtleSIsIlZhdWx0RXJyb3IiLCJkYXRhIiwibWVzc2FnZSIsIm9wdGlvbnMiLCJzdXBlciIsIm5hbWUiLCJzdGF0aWMiLCJlcnJvciIsIk9iamVjdCIsIkF4aW9zRXJyb3IiLCJyZXNwb25zZSIsInVuZGVmaW5lZCIsImRlc2NyaXB0aW9uIiwidmF1bHRDb25uRXJyb3IiLCJyZXF1ZXN0IiwibWV0aG9kIiwiY29uZmlnIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJ1cmwiLCJoZWFkZXJzIiwic3RhdHVzIiwidmF1bHRFcnJvciIsInN0YWNrIiwiY2hlY2tFcnJvclR5cGUiLCJ0eXBlIiwiUmVxdWVzdCIsImF4aW9zIiwiZGVmYXVsdENhbGxPcHRpb25zIiwiZGVmYXVsdFVybCIsIl9zdG9wIiwidXBsb2FkaW5nIiwiZ2V0QXhpb3NJbnN0YW5jZSIsInJldHJ5T3B0aW9ucyIsImF4aW9zSW5zdGFuY2UiLCJjcmVhdGUiLCJyZXRyaWVzIiwiYXhpb3NSZXRyeSIsInJldHJ5RGVsYXkiLCJyZXRyeUNvbmRpdGlvbiIsImlzTmV0d29ya09ySWRlbXBvdGVudFJlcXVlc3RFcnJvciIsInVybDIiLCJwcm9taXNlIiwid2FpdEZvclVwbG9hZHNUb0ZpbnNoIiwidXJsT3JPcHRpb25zIiwiYmVhcmVyVG9rZW4iLCJBdXRob3JpemF0aW9uIiwicmVzIiwiZ2V0IiwiZnJvbSIsInJlc3BvbnNlU3RhdHVzIiwiZGVsZXRlIiwicmVxdWVzdEJvZHkiLCJ0b1VwcGVyQ2FzZSIsInNlcXVlbnRpYWxQb3N0IiwicG9zdFByb21pc2UiLCJpbmRleCIsInB1c2giLCJiZWZvcmVVcGxvYWRGaW5pc2giLCJsZW5ndGgiLCJwb3AiLCJpIiwidXJsT3JSZXF1ZXN0Qm9keSIsInJlcXVlc3RCb2R5T3JPcHRpb25zIiwidXBsb2FkIiwibG9hZEVudkZpbGUiLCJpbnZhbGlkTXNnIiwidmFybmFtZSIsInZhbHVlcyIsInJldCIsImJvb2xlYW5GYWxzZUFsbG93ZWRWYWx1ZXMiLCJib29sZWFuVHJ1ZUFsbG93ZWRWYWx1ZXMiLCJib29sZWFuQWxsb3dlZFZhbHVlcyIsInBhcnNlUHJvY2Nlc3NFbnZWYXIiLCJ2YXJOYW1lIiwidmFsdWUiLCJhIiwicHJvY2VzcyIsImVudiIsImlzQm9vbGVhbiIsImFsbG93ZWRWYWx1ZXMiLCJkZWZhdWx0VmFsdWUiLCJpbmNsdWRlcyIsIlJhbmdlRXJyb3IiLCJqb2luIiwiYXBpVmVyc2lvbiIsIlZBVUxUX1NUQVRFIiwiTk9UX0lOSVRJQUxJWkVEIiwiSU5JVElBTElaRUQiLCJMT0dHRURfSU4iLCJDT05ORUNURUQiLCJzdGF0ZUZyb21FcnJvciIsImN1cnJlbnRTdGF0ZSIsIlZhdWx0Q2xpZW50IiwiRXZlbnRFbWl0dGVyIiwidGltZXN0YW1wIiwidG9rZW4iLCJzZXJ2ZXJSb290VXJsIiwic2VydmVyUHJlZml4Iiwid2VsbEtub3duQ3ZzQ29uZmlndXJhdGlvblByb21pc2UiLCJ3ZWxsS25vd25DdnNDb25maWd1cmF0aW9uIiwiX3N0YXRlIiwidmF1bHRSZXF1ZXN0Iiwia2V5TWFuYWdlciIsImVzIiwic2VydmVyVXJsIiwiY2FwdHVyZVJlamVjdGlvbnMiLCJVUkwiLCJvcmlnaW4iLCJwYXRobmFtZSIsImVuZHNXaXRoIiwic2xpY2UiLCJyZWFzb24iLCJzdGF0ZSIsIm5ld1N0YXRlIiwiY2xvc2UiLCJlbWl0IiwiZXZlbnROYW1lIiwiYXJncyIsImxpc3RlbmVyIiwib25jZSIsImdldFdlbGxLbm93bkN2c0NvbmZpZ3VyYXRpb24iLCJlc1VybCIsInZhdWx0X2NvbmZpZ3VyYXRpb24iLCJldmVudHNfZW5kcG9pbnQiLCJFdmVudFNvdXJjZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwibXNnIiwiSlNPTiIsInBhcnNlIiwiZmluYWxseSIsImxvZ291dCIsIm9uZXJyb3IiLCJjdnNDb25mIiwia2V5X2Rlcml2YXRpb24iLCJzdG9wIiwiaW5pdEtleU1hbmFnZXIiLCJyZXFCb2R5IiwiYXV0aGtleSIsImRlZmF1bHRSZXRyeU9wdGlvbnMiLCJwb3N0IiwidjIiLCJ0b2tlbl9lbmRwb2ludCIsInZhdWx0X2VuZHBvaW50IiwiaW5pdEV2ZW50U291cmNlQ2xpZW50IiwidGltZXN0YW1wX2VuZHBvaW50Iiwic3RhcnRUcyIsIkRhdGUiLCJub3ciLCJzdG9yYWdlIiwiZm9yY2UiLCJyZW1vdGVUaW1lc3RhbXAiLCJnZXRSZW1vdGVTdG9yYWdlVGltZXN0YW1wIiwibG9jYWxUaW1lc3RhbXAiLCJyZWdpc3RyYXRpb25fY29uZmlndXJhdGlvbiIsInB1YmxpY19qd2tfZW5kcG9pbnQiLCJqd2siXSwibWFwcGluZ3MiOiIwYUFHYUEsRUFDTUMsSUFDUkMsSUFFVEMsWUFBYUYsRUFBZ0JDLEdBQzNCRSxLQUFLSCxJQUFNQSxFQUNYRyxLQUFLRixJQUFNQSxDQUNaLENBRURHLFFBQVNDLEdBRVAsTUFBTUMsRUFBS0MsRUFBWSxJQUdqQkMsRUFBU0MsRUFBZU4sS0FBS0YsSUFBS0UsS0FBS0gsSUFBS00sR0FHNUNJLEVBQVlDLE9BQU9DLE9BQU8sQ0FBQ0osRUFBT0ssT0FBT1IsR0FBUUcsRUFBT00sVUFHeERDLEVBQU1QLEVBQU9RLGFBR25C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
