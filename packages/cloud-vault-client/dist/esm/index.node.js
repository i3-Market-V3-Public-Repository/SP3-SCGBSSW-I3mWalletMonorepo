import t,{AxiosError as e}from"axios";import i from"eventsource";import{createHash as n,scrypt as r,createSecretKey as s,randomBytes as a}from"crypto";import{EventEmitter as o}from"events";import{config as l}from"dotenv";l();const u=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},h=["0","false","FALSE"],c=["1","true","FALSE"],d=h.concat(c);function m(t,e){const i=void 0===(n=process.env[t])?"":n;var n;const r=(e=e??{})?.isBoolean??!1;if(r&&(e={...e,allowedValues:d}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(u(t,e.allowedValues.join(", ")))}if(r&&c.includes(i))return!0;if(r&&h.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(u(t,e.allowedValues.join(", ")));return i}m("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const g="v"+m("npm_package_version",{defaultValue:"0.0.1"})[0];class w{_encKey;_authKey;username;derivationOptions;initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:n}=this.derivationOptions,r=p(e.saltHashingAlgorithm,e.saltPattern,{username:this.username}),s=await v(t,{...e,salt:r}),a=p(i.saltHashingAlgorithm,i.saltPattern,{username:this.username}),o=p(n.saltHashingAlgorithm,n.saltPattern,{username:this.username}),[l,u]=await Promise.all([v(s,{...i,salt:a}),v(s,{...n,salt:o})]);this._authKey=l,this._encKey=u}async getAuthKey(){return await this.initialized,this._authKey.export().toString("base64url")}async getEncKey(){return await this.initialized,this._encKey}}function p(t,e,i){let r="";for(const t in i)r=e.replaceAll(t,i[t]);return n(t).update(r).digest()}async function v(t,e){const i={...e.algOptions,maxmem:256*e.algOptions.N*e.algOptions.r},n="string"==typeof t?t:t.export(),a=new Promise(((t,a)=>{r(n,e.salt,e.derivedKeyLength,i,((e,i)=>{null!==e&&a(e),t(s(i))}))}));return await a}class f extends o{timestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;initialized;es;constructor(t,e,i,n){super(),this.name=n??a(16).toString("hex"),this.serverUrl=t,this.username=e,this.password=i,this.initialized=this.init()}async init(){try{await this.getWellKnownCvsConfiguration()}catch(t){return this.emitError(t),!1}const t=this.wellKnownCvsConfiguration;this.keyManager=new w(this.username,this.password,t["vault-configuration"][g]["key-derivation"]);try{await this.keyManager.initialized}catch(t){return this.emitError(t),!1}return delete this.password,!0}emitError(t){t instanceof e&&void 0!==t.response?"Unauthorized"===t.response.data.name?(this.logout(),this.emit("login-required")):this.emit("error",t.response):this.emit("error",t)}async getWellKnownCvsConfiguration(){const e=await t.get(this.serverUrl+"/.well-known/cvs-configuration");this.wellKnownCvsConfiguration=e.data}async initEventSourceClient(){if(void 0===this.token)throw new Error("Cannot subscribe to events without login first");const t=this.wellKnownCvsConfiguration;this.es=new i(this.serverUrl+t["vault-configuration"][g].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{this.emit("storage-updated")})),this.es.onerror=t=>{this.emit("error",t)}}close(){this.logout(),this.emit("close")}async getAuthKey(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),null}return await this.keyManager.getAuthKey()}async login(){if(!await this.initialized)try{await this.init()}catch(t){return this.emitError(t),!1}const e={username:this.username,authkey:await this.keyManager.getAuthKey()};try{const i=this.wellKnownCvsConfiguration,n=await t.post(this.serverUrl+i["vault-configuration"].v2.token_endpoint,e);if(200!==n.status)return this.emitError(n),!1;const r=n.data;return this.token=r.token,await this.initEventSourceClient(),this.emit("logged-in"),!0}catch(t){return this.emitError(t),!1}}logout(){this.token=void 0,this.es?.close()}async getRemoteStorageTimestamp(){try{if(void 0===this.token)return this.emit("login-required"),null;const e=this.wellKnownCvsConfiguration,i=await t.get(this.serverUrl+e["vault-configuration"][g].timestamp_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 200!==i.status?(this.emitError(i),null):i.data.timestamp}catch(t){return this.emitError(t),null}}async updateStorage(e,i=!1){try{if(void 0===this.token)return this.emit("login-required"),!1;const n=this.wellKnownCvsConfiguration;if(i){const t=await this.getRemoteStorageTimestamp();e.timestamp=null!==t?t:void 0}const r=await t.post(this.serverUrl+n["vault-configuration"][g].vault_endpoint,e,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return 201!==r.status?(this.emitError(r),!1):(this.timestamp=r.data.timestamp,!0)}catch(t){this.emitError(t)}return!1}async deleteStorage(){try{if(void 0===this.token)return this.logout(),this.emit("login-required"),!1;const e=this.wellKnownCvsConfiguration,i=await t.delete(this.serverUrl+e["vault-configuration"][g].vault_endpoint,{headers:{Authorization:"Bearer "+this.token}});return 204!==i.status?(this.emitError(i),!1):(this.emit("storage-deleted"),!0)}catch(t){this.emitError(t)}return!1}async getServerPublicKey(){try{await this.getWellKnownCvsConfiguration();const e=this.wellKnownCvsConfiguration,i=await t.get(this.serverUrl+e["registration-configuration"]["public-jwk_endpoint"]);return 200!==i.status?(this.emitError(i),null):i.data.jwk}catch(t){return this.emitError(t),null}}}export{w as KeyManager,f as VaultClient,v as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
