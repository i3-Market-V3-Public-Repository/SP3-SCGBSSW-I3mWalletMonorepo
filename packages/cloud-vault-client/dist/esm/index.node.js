import{randomBytes as t,createCipheriv as e,createDecipheriv as i,createHash as n,scrypt as a,createSecretKey as s}from"crypto";import o,{AxiosError as r}from"axios";import{EventEmitter as u}from"events";import c from"eventsource";import{config as h}from"dotenv";class d{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(i){const n=t(16),a=e(this.alg,this.key,n),s=Buffer.concat([a.update(i),a.final()]),o=a.getAuthTag();return Buffer.concat([n,o,s])}decrypt(t){const e=t.subarray(0,16),n=t.subarray(16,32),a=t.subarray(32),s=i(this.alg,this.key,e);return s.setAuthTag(n),Buffer.concat([s.update(a),s.final()])}}class l{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:n}=this.derivationOptions,a=p(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),s=await m(t,{...e,salt:a}),o=p(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),r=p(n.salt_hashing_algorithm,n.salt_pattern,{username:this.username}),[u,c]=await Promise.all([m(s,{...i,salt:o}),m(s,{...n,salt:r})]);this._authKey=u,this._encKey=new d(c,n.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function p(t,e,i){let a="";for(const t in i)a=e.replace(t,i[t]);return n(t).update(a).digest()}async function m(t,e){const i={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},n="string"==typeof t?t:t.export(),o=new Promise(((t,o)=>{a(n,e.salt,e.derived_key_length,i,((e,i)=>{null!==e&&o(e),t(s(i))}))}));return await o}class w extends Error{data;message;constructor(t,e,i){super(t,i),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof w)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new w("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof r){const e=t.response?.data;switch(e.name){case"no-storage":return new w("no-uploaded-storage",void 0);case"invalid-credentials":return new w("invalid-credentials",void 0);case"quota-exceeded":return new w("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new w("unauthorized",void 0)}const i={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new w("http-connection-error",i)}if(t instanceof Error){const e=new w("error",t,{cause:t.cause});return e.stack=t.stack,e}return new w("unknown",t)}}function v(t,e){return t.message===e}var g={get:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const n=await o.get(t,{headers:i}).catch((t=>{throw w.from(t)}));if(void 0!==e?.responseStatus&&n.status!==e.responseStatus)throw new w("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data},post:async function(t,e,i){const n={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(n.Authorization="Bearer "+i.bearerToken);const a=await o.post(t,e,{headers:n}).catch((t=>{throw w.from(t)}));if(void 0!==i?.responseStatus&&a.status!==i.responseStatus)throw new w("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},put:async function(t,e,i){const n={"Content-Type":"application/json"};void 0!==i?.bearerToken&&(n.Authorization="Bearer "+i.bearerToken);const a=await o.put(t,e,{headers:n}).catch((t=>{throw w.from(t)}));if(void 0!==i?.responseStatus&&a.status!==i.responseStatus)throw new w("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data},delete:async function(t,e){const i={"Content-Type":"application/json"};void 0!==e?.bearerToken&&(i.Authorization="Bearer "+e.bearerToken);const n=await o.delete(t,{headers:i}).catch((t=>{throw w.from(t)}));if(void 0!==e?.responseStatus&&n.status!==e.responseStatus)throw new w("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${e.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}};h();const f=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},y=["0","false","FALSE"],k=["1","true","FALSE"],_=y.concat(k);function z(t,e){const i=void 0===(n=process.env[t])?"":n;var n;const a=(e=e??{})?.isBoolean??!1;if(a&&(e={...e,allowedValues:_}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(f(t,e.allowedValues.join(", ")))}if(a&&k.includes(i))return!0;if(a&&y.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(f(t,e.allowedValues.join(", ")));return i}z("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const T="v"+z("npm_package_version",{defaultValue:"0.0.1"})[0],S=1,C=0;class K extends u{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;status;_initialized;keyManager;es;constructor(e,i){super({captureRejections:!0}),this.name=i??t(16).toString("hex"),this.serverUrl=e,this.status=0,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})),this._initialized.catch((t=>{e(t)}))}))}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfiguration=await K.getWellKnownCvsConfiguration(this.serverUrl).catch((t=>{throw new w("not-initialized",t)})),void 0!==this.token&&await this.initEventSourceClient().catch((t=>{throw w.from(t)}))}async initEventSourceClient(){if(void 0===this.token)throw new w("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;this.es=new c(this.serverUrl+t.vault_configuration[T].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.status=1,this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{1===this.status&&(this.status=0,this.emit("disconnected"))}}async initKeyManager(t,e){await this.initialized;const i=this.wellKnownCvsConfiguration;this.keyManager=new l(t,e,i.vault_configuration[T].key_derivation),await this.keyManager.initialized}logout(){this.es?.close(),this.token=void 0,this.emit("disconnected"),this.emit("unauthorized")}async login(t,e,i){if(await this.initialized,await this.initKeyManager(t,e),void 0===i){const e={username:t,authkey:this.keyManager.authKey},i=this.wellKnownCvsConfiguration,n=await g.post(this.serverUrl+i.vault_configuration.v2.token_endpoint,e,{responseStatus:200});this.token=n.token}else this.token=i;await this.initEventSourceClient().catch((t=>{throw w.from(t)}))}async getRemoteStorageTimestamp(){if(await this.initialized,void 0===this.token)throw new w("unauthorized",void 0);const t=this.wellKnownCvsConfiguration,e=await g.get(this.serverUrl+t.vault_configuration[T].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}async getStorage(){if(await this.initialized,void 0===this.token||void 0===this.keyManager)throw new w("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=await g.get(this.serverUrl+t.vault_configuration[T].vault_endpoint,{bearerToken:this.token,responseStatus:200});if(e.timestamp<(this.timestamp??0))throw new w("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,{storage:i,timestamp:e.timestamp}}catch(t){throw w.from(t)}}async updateStorage(t,e=!1){if(await this.initialized,void 0===this.token||void 0===this.keyManager)throw new w("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new w("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i=this.wellKnownCvsConfiguration;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const n={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=await g.post(this.serverUrl+i.vault_configuration[T].vault_endpoint,n,{bearerToken:this.token,responseStatus:201});return this.timestamp=a.timestamp,this.timestamp}async deleteStorage(){if(await this.initialized,void 0===this.token)throw new w("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;await g.delete(this.serverUrl+t.vault_configuration[T].vault_endpoint,{bearerToken:this.token,responseStatus:204}),delete this.timestamp,this.logout()}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration;return(await g.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static async getWellKnownCvsConfiguration(t){return await g.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}static async computeAuthKey(t,e,i){const n=await K.getWellKnownCvsConfiguration(t),a=new l(e,i,n.vault_configuration[T].key_derivation);return await a.initialized,a.authKey}}export{l as KeyManager,d as SecretKey,S as VAULT_CONNECTED,C as VAULT_DISCONNECTED,K as VaultClient,w as VaultError,v as checkErrorType,m as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
