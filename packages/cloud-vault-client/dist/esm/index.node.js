import{randomBytes as t,createCipheriv as e,createDecipheriv as i,createHash as a,scrypt as n,createSecretKey as s}from"crypto";import o,{AxiosError as r}from"axios";import{EventEmitter as h}from"events";import c from"eventsource";import{config as u}from"dotenv";class d{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(i){const a=t(16),n=e(this.alg,this.key,a),s=Buffer.concat([n.update(i),n.final()]),o=n.getAuthTag();return Buffer.concat([a,o,s])}decrypt(t){const e=t.subarray(0,16),a=t.subarray(16,32),n=t.subarray(32),s=i(this.alg,this.key,e);return s.setAuthTag(a),Buffer.concat([s.update(n),s.final()])}}class l{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,i){this.username=t,this.derivationOptions=i,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:i,enc:a}=this.derivationOptions,n=m(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),s=await p(t,{...e,salt:n}),o=m(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),r=m(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[h,c]=await Promise.all([p(s,{...i,salt:o}),p(s,{...a,salt:r})]);this._authKey=h,this._encKey=new d(c,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function m(t,e,i){let n="";for(const t in i)n=e.replace(t,i[t]);return a(t).update(n).digest()}async function p(t,e){const i={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},a="string"==typeof t?t:t.export(),o=new Promise(((t,o)=>{n(a,e.salt,e.derived_key_length,i,((e,i)=>{null!==e&&o(e),t(s(i))}))}));return await o}u();const w=(t,e)=>{let i=`Invalid value for ${t}. `;return void 0!==e&&(i+=`Allowed values are ${e} `),i},g=["0","false","FALSE"],v=["1","true","FALSE"],f=g.concat(v);function y(t,e){const i=void 0===(a=process.env[t])?"":a;var a;const n=(e=e??{})?.isBoolean??!1;if(n&&(e={...e,allowedValues:f}),""===i){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(w(t,e.allowedValues.join(", ")))}if(n&&v.includes(i))return!0;if(n&&g.includes(i))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(i))throw new RangeError(w(t,e.allowedValues.join(", ")));return i}y("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const _="v"+y("npm_package_version",{defaultValue:"0.0.1"})[0];class k extends Error{data;message;constructor(t,e,i){super(t,i),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof k)return t;if(t instanceof Event)return new k("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof r){if("Unauthorized"===t.response?.data.name)return new k("unauthorized",void 0);if(404===t.response?.status&&"no storage"===t.response.data.name)return new k("no-uploadded-storage",void 0);const e={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new k("http-connection-error",e)}if(t instanceof Error){const e=new k("error",t,{cause:t.cause});return e.stack=t.stack,e}return new k("unknown",t)}}class z extends h{timestamp;token;name;serverUrl;username;password;keyManager;wellKnownCvsConfiguration;initialized;es;constructor(e,i,a,n){super({captureRejections:!0}),this.name=n??t(16).toString("hex"),this.serverUrl=e,this.username=i,this.password=a,this.initialized=this.init()}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration;this.keyManager=new l(this.username,this.password,t.vault_configuration[_].key_derivation),await this.keyManager.initialized,delete this.password}catch(t){throw k.from(t)}}async getWellKnownCvsConfiguration(){const t=await o.get(this.serverUrl+"/.well-known/cvs-configuration");this.wellKnownCvsConfiguration=t.data}async initEventSourceClient(){if(void 0===this.token)throw new k("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;this.es=new c(this.serverUrl+t.vault_configuration[_].events_endpoint,{headers:{Authorization:"Bearer "+this.token}}),this.es.onmessage=t=>{console.log(t)},this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);this.timestamp=e.timestamp,this.emit("connected",e.timestamp)})),this.es.addEventListener("storage-updated",(t=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})),this.es.addEventListener("storage-deleted",(t=>{delete this.timestamp,this.logout(),this.emit("storage-deleted")})),this.es.onerror=t=>{this.emitError(t)}}emitError(t){const e=k.from(t);switch(e.message){case"unauthorized":this.logout(),this.emit("logged-out");break;case"sse-connection-error":this.emit("connection-error",e);break;default:this.emit("error",e)}}logout(){this.es?.close(),this.token=void 0,this.emit("logged-out")}async getAuthKey(){return await this.initialized.catch((t=>{throw new k("not-initialized",t)})),this.keyManager.authKey}async login(){await this.initialized.catch((t=>{throw new k("not-initialized",t)}));const t={username:this.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,i=await o.post(this.serverUrl+e.vault_configuration.v2.token_endpoint,t).catch((t=>{throw k.from(t)}));if(200!==i.status)throw new k("validation",{description:`Received HTTP status ${i.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});const a=i.data;this.token=a.token,await this.initEventSourceClient().catch((t=>{throw k.from(t)}))}async getRemoteStorageTimestamp(){if(await this.initialized.catch((t=>{throw new k("not-initialized",t)})),void 0===this.token)throw new k("unauthorized",void 0);const t=this.wellKnownCvsConfiguration,e=await o.get(this.serverUrl+t.vault_configuration[_].timestamp_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}}).catch((t=>{throw k.from(t)}));if(200!==e.status)throw new k("validation",{description:`Received HTTP status ${e.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});return(this.timestamp??0)<e.data.timestamp&&(this.timestamp=e.data.timestamp),e.data.timestamp}async getStorage(){if(await this.initialized.catch((t=>{throw new k("not-initialized",t)})),void 0===this.token)throw new k("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=this.keyManager.encKey,i=await o.get(this.serverUrl+t.vault_configuration[_].vault_endpoint,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});if(200!==i.status)throw new k("validation",{description:`Received HTTP status ${i.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});if(i.data.timestamp<(this.timestamp??0))throw new k("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const a=e.decrypt(Buffer.from(i.data.ciphertext,"base64url"));return this.timestamp=i.data.timestamp,{storage:a,timestamp:i.data.timestamp}}catch(t){throw k.from(t)}}async updateStorage(t,e=!1){if(await this.initialized.catch((t=>{throw new k("not-initialized",t)})),void 0===this.token)throw new k("unauthorized",void 0);if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new k("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});try{const i=this.wellKnownCvsConfiguration,a=this.keyManager.encKey;if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}const n={ciphertext:a.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},s=await o.post(this.serverUrl+i.vault_configuration[_].vault_endpoint,n,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});if(201!==s.status)throw new k("validation",{description:`Received HTTP status ${s.status} does not match the expected one (201)`},{cause:"HTTP status does not match the expected one"});this.timestamp=s.data.timestamp}catch(t){throw k.from(t)}}async deleteStorage(){if(await this.initialized.catch((t=>{throw new k("not-initialized",t)})),void 0===this.token)throw new k("unauthorized",void 0);try{const t=this.wellKnownCvsConfiguration,e=await o.delete(this.serverUrl+t.vault_configuration[_].vault_endpoint,{headers:{Authorization:"Bearer "+this.token}});if(204!==e.status)throw new k("validation",{description:`Received HTTP status ${e.status} does not match the expected one (204)`},{cause:"HTTP status does not match the expected one"});delete this.timestamp,this.logout()}catch(t){throw k.from(t)}}async getServerPublicKey(){try{await this.getWellKnownCvsConfiguration();const t=this.wellKnownCvsConfiguration,e=await o.get(this.serverUrl+t.registration_configuration.public_jwk_endpoint);if(200!==e.status)throw new k("validation",{description:`Received HTTP status ${e.status} does not match the expected one (200)`},{cause:"HTTP status does not match the expected one"});return e.data.jwk}catch(t){throw k.from(t)}}}export{l as KeyManager,d as SecretKey,z as VaultClient,p as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
