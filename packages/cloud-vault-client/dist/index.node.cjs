"use strict";var t=require("crypto"),e=require("worker_threads"),s=require("axios"),i=require("axios-retry"),a=require("events"),n=require("eventsource"),o=require("dotenv");function r(t){return t&&t.__esModule?t:{default:t}}var u=r(s),h=r(i),l=r(n);class c{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const s=t.randomBytes(16),i=t.createCipheriv(this.alg,this.key,s),a=Buffer.concat([i.update(e),i.final()]),n=i.getAuthTag();return Buffer.concat([s,n,a])}decrypt(e){const s=e.subarray(0,16),i=e.subarray(16,32),a=e.subarray(32),n=t.createDecipheriv(this.alg,this.key,s);return n.setAuthTag(i),Buffer.concat([n.update(a),n.final()])}}if(!e.isMainThread&&"object"==typeof e.workerData&&"scrypt-thread"===e.workerData._name){const{passwordOrKey:R,opts:O}=e.workerData;async function C(e,s){const i={...s.alg_options,maxmem:256*s.alg_options.N*s.alg_options.r},a="string"==typeof e?e:e.export(),n=new Promise(((e,n)=>{t.scrypt(a,s.salt,s.derived_key_length,i,((t,s)=>{null!==t&&n(t),e(s)}))}));return await n}C(R,O).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class d{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=p(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),n=await w(t,{...e,salt:a}),o=p(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),r=p(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[u,h]=await Promise.all([w(n,{...s,salt:o}),w(n,{...i,salt:r})]);this._authKey=u,this._encKey=new c(h,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function p(e,s,i){let a="";for(const t in i)a=s.replace(t,i[t]);return t.createHash(e).update(a).digest()}async function w(s,i){return await new Promise(((a,n)=>{const o={_name:"scrypt-thread",passwordOrKey:s,opts:i},r=new e.Worker(__filename,{workerData:o});r.on("message",(e=>{a(t.createSecretKey(e))})),r.on("error",(t=>{n(t)})),r.on("messageerror",(t=>{n(t)}))}))}class m extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof m)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new m("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof s.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new m("no-uploaded-storage",void 0);case"invalid-credentials":return new m("invalid-credentials",void 0);case"invalid-timestamp":return new m("invalid-timestamp",void 0);case"quota-exceeded":return new m("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new m("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new m("http-connection-error",s)}if(t instanceof Error){const e=new m("error",t,{cause:t.cause});return e.stack=t.stack,e}return new m("unknown",t)}}class g{axios;defaultCallOptions;defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.ongoingRequests={}}getAxiosInstance(t){const e=u.default.create();return void 0!==t?.retries&&h.default(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=i.isNetworkOrIdempotentRequestError(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new m("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const n="post"===t||"put"===t?this.axios[t](e,s,{headers:a}):this.axios[t](e,{headers:a}),o=this.ongoingRequests[e].push(n)-1,r=await n.catch((t=>{throw m.from(t)})),u=i?.beforeRequestFinish;if(void 0!==u&&await u(r.data),o===this.ongoingRequests[e].length-1)this.ongoingRequests[e].pop();else{let t=o;do{delete this.ongoingRequests[e][o],t--}while(void 0===this.ongoingRequests[e][t])}if(0===this.ongoingRequests[e].length&&delete this.ongoingRequests[e],void 0!==i?.responseStatus&&r.status!==i.responseStatus)throw new m("validation",{description:`Received HTTP status ${r.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return r.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,a,n;if("string"==typeof t?(i=t,a=e,n=s):(i=this.defaultUrl,a=t,n=e),void 0===i)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,a,n)}async put(t,e,s){let i,a,n;if("string"==typeof t?(i=t,a=e,n=s):(i=this.defaultUrl,a=t,n=e),void 0===i)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,a,n)}}o.config();const f=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},v=["0","false","FALSE"],y=["1","true","FALSE"],_=v.concat(y);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const a=e?.isBoolean??!1;if(a&&(e={...e,allowedValues:_}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(f(t,e.allowedValues.join(", ")))}if(a&&y.includes(s))return!0;if(a&&v.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(f(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const E="v"+"2.5.10".split(".")[0],I={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function T(t,e){switch(m.from(e).message){case"invalid-credentials":case"unauthorized":return I.INITIALIZED;case"sse-connection-error":return t>=I.LOGGED_IN?I.LOGGED_IN:I.INITIALIZED;default:return t}}class q extends a.EventEmitter{timestamp;token;name;opts;serverRootUrl;serverPrefix;serverUrl;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;_state;_initialized;vaultRequest;keyManager;es;constructor(e,s){super({captureRejections:!0}),this.name=s?.name??t.randomBytes(16).toString("hex"),this.opts=s;const i=new URL(e);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this.serverUrl=this.serverRootUrl+this.serverPrefix,this._state=I.NOT_INITIALIZED,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init(),this._initialized.then((()=>{t()})).catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){if(t<I.NOT_INITIALIZED||t>I.CONNECTED)throw new Error("invalid state");if(t-this._state>1||this.state-t>1)throw new Error("steps MUST be passed one by one");if(this._state!==t){switch(t){case I.NOT_INITIALIZED:delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this._initialized=new Promise(((t,e)=>{e(new m("not-initialized",void 0))}));break;case I.INITIALIZED:this._state===I.LOGGED_IN&&(delete this.keyManager,delete this.vaultRequest,delete this.token,delete this.timestamp,this.es?.close(),delete this.es)}this._state=t,this.emit("state-changed",this._state)}}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfigurationPromise=q.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new m("not-initialized",t)})),this.state=I.INITIALIZED}async initEventSourceClient(){if(this.state!==I.LOGGED_IN)throw new Error("cannot be called if not logged in");const t=this.wellKnownCvsConfiguration.vault_configuration[E].events_endpoint;this.es=new l.default(t,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0===e.timestamp?this.emit("empty-storage"):e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.state=I.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{this.logout(),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state=T(this.state,t)}}async initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new d(t,e,s.vault_configuration[E].key_derivation),await this.keyManager.initialized}logout(){this.state<I.LOGGED_IN||(this.state===I.CONNECTED&&(this.state=I.LOGGED_IN),this.state=I.INITIALIZED)}close(){this.logout(),this.vaultRequest?.stop().catch((()=>{})),this.wellKnownCvsConfigurationPromise?.stop(),this.state=I.NOT_INITIALIZED}async login(t,e,s){this.state===I.NOT_INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const i={username:t,authkey:this.keyManager.authKey},a=new g({retryOptions:this.opts?.defaultRetryOptions}),n=this.wellKnownCvsConfiguration,o=await a.post(n.vault_configuration.v2.token_endpoint,i,{responseStatus:200});this.token=o.token,this.vaultRequest=new g({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequential:!0},defaultUrl:n.vault_configuration.v2.vault_endpoint}),this.timestamp=s,this.state=I.LOGGED_IN,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForOngoingRequestsToFinsh();const e=new g({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[E].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw this.state=T(this.state,t),t}}async getStorage(){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForOngoingRequestsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new m("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=T(this.state,e),m.from(e)}}async updateStorage(t,e=!1,s){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new m("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=this.vaultRequest,n=await a.post(s,{bearerToken:this.token,responseStatus:201,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),n.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),this.state=T(this.state,t),m.from(t)}}async deleteStorage(){if(this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),this.logout()}catch(t){throw t instanceof m&&"unauthorized"===t.message&&this.logout(),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration,e=new g({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new g({retryOptions:e});return{stop:async()=>await s.stop(),promise:s.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}}static async computeAuthKey(t,e,s,i){const a=q.getWellKnownCvsConfiguration(t,i),n=await a.promise,o=new d(e,s,n.vault_configuration[E].key_derivation);return await o.initialized,o.authKey}}exports.KeyManager=d,exports.Request=g,exports.SecretKey=c,exports.VAULT_STATE=I,exports.VaultClient=q,exports.VaultError=m,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=w;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
