"use strict";var t=require("crypto"),e=require("worker_threads"),s=require("axios"),i=require("axios-retry"),a=require("events"),o=require("eventsource"),r=require("dotenv");function n(t){return t&&t.__esModule?t:{default:t}}var u=n(s),h=n(i),l=n(o);class c{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const s=t.randomBytes(16),i=t.createCipheriv(this.alg,this.key,s),a=Buffer.concat([i.update(e),i.final()]),o=i.getAuthTag();return Buffer.concat([s,o,a])}decrypt(e){const s=e.subarray(0,16),i=e.subarray(16,32),a=e.subarray(32),o=t.createDecipheriv(this.alg,this.key,s);return o.setAuthTag(i),Buffer.concat([o.update(a),o.final()])}}if(!e.isMainThread&&"object"==typeof e.workerData&&"scrypt-thread"===e.workerData._name){const{passwordOrKey:R,opts:k}=e.workerData;async function C(e,s){const i={...s.alg_options,maxmem:256*s.alg_options.N*s.alg_options.r},a="string"==typeof e?e:e.export(),o=new Promise(((e,o)=>{t.scrypt(a,s.salt,s.derived_key_length,i,((t,s)=>{null!==t&&o(t),e(s)}))}));return await o}C(R,k).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class d{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=w(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),o=await p(t,{...e,salt:a}),r=w(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),n=w(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[u,h]=await Promise.all([p(o,{...s,salt:r}),p(o,{...i,salt:n})]);this._authKey=u,this._encKey=new c(h,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function w(e,s,i){let a="";for(const t in i)a=s.replace(t,i[t]);return t.createHash(e).update(a).digest()}async function p(s,i){return await new Promise(((a,o)=>{const r={_name:"scrypt-thread",passwordOrKey:s,opts:i},n=new e.Worker(__filename,{workerData:r});n.on("message",(e=>{a(t.createSecretKey(e))})),n.on("error",(t=>{o(t)})),n.on("messageerror",(t=>{o(t)}))}))}class m extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof m)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new m("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof s.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new m("no-uploaded-storage",void 0);case"invalid-credentials":return new m("invalid-credentials",void 0);case"invalid-timestamp":return new m("invalid-timestamp",void 0);case"quota-exceeded":return new m("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new m("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new m("http-connection-error",s)}if(t instanceof Error){const e=new m("error",t,{cause:t.cause});return e.stack=t.stack,e}return new m("unknown",t)}}class g{axios;defaultCallOptions;defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.ongoingRequests={}}getAxiosInstance(t){const e=u.default.create();return void 0!==t?.retries&&h.default(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=i.isNetworkOrIdempotentRequestError(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new m("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const o="post"===t||"put"===t?this.axios[t](e,s,{headers:a}):this.axios[t](e,{headers:a}),r=this.ongoingRequests[e].push(o)-1,n=await o.catch((t=>{throw m.from(t)})),u=i?.beforeRequestFinish;if(void 0!==u&&await u(n.data),r===this.ongoingRequests[e].length-1)this.ongoingRequests[e].pop();else{let t=r;do{delete this.ongoingRequests[e][r],t--}while(void 0===this.ongoingRequests[e][t])}if(0===this.ongoingRequests[e].length&&delete this.ongoingRequests[e],void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new m("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,a,o)}async put(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new m("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,a,o)}}r.config();const f=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},y=["0","false","FALSE"],v=["1","true","FALSE"],T=y.concat(v);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const a=e?.isBoolean??!1;if(a&&(e={...e,allowedValues:T}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(f(t,e.allowedValues.join(", ")))}if(a&&v.includes(s))return!0;if(a&&y.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(f(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const _="v"+"2.5.10".split(".")[0],I={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function E(t,e){switch(m.from(e).message){case"invalid-credentials":case"unauthorized":return I.INITIALIZED;case"sse-connection-error":return t>=I.LOGGED_IN?I.LOGGED_IN:I.INITIALIZED;default:return t}}class q extends a.EventEmitter{timestamp;token;name;opts;serverRootUrl;serverPrefix;serverUrl;initialized;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;state;vaultRequest;keyManager;es;constructor(e,s){super({captureRejections:!0}),this.name=s?.name??t.randomBytes(16).toString("hex"),this.opts=s;const i=new URL(e);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this.serverUrl=this.serverRootUrl+this.serverPrefix,this.state=new Promise(((t,e)=>{t(I.NOT_INITIALIZED)})),this.initialized=new Promise(((t,e)=>{this.state.then((s=>{this.switchToState(I.INITIALIZED).then((()=>{t()})).catch((t=>{e(t),this.state=new Promise(((t,e)=>{t(I.NOT_INITIALIZED)}))}))})).catch((t=>{e(t)}))}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async switchToState(t,e){let s=await this.state;if(s===t)return s;if(t<I.NOT_INITIALIZED||t>I.CONNECTED)throw new Error("invalid state");for(;t-s>1;)s=await this.switchToState(s+1,e);for(;s-t>1;)s=await this.switchToState(s-1,e);return this.state=new Promise(((i,a)=>{this._switchToState(s,t,e).then((t=>{i(t),this.emit("state-changed",t)})).catch((t=>{console.log(t),i(s)}))})),await this.state}async _switchToState(t,e,s){switch(e){case I.NOT_INITIALIZED:this.wellKnownCvsConfigurationPromise?.stop(),await(this.wellKnownCvsConfigurationPromise?.promise.catch()),delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this.state=new Promise(((t,e)=>{t(I.NOT_INITIALIZED)}));break;case I.INITIALIZED:t===I.NOT_INITIALIZED?(this.wellKnownCvsConfigurationPromise=q.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new m("not-initialized",t)}))):(await(this.vaultRequest?.stop()),delete this.vaultRequest,delete this.token,delete this.timestamp,delete this.keyManager,this.es?.close(),delete this.es);break;case I.LOGGED_IN:if(t===I.INITIALIZED){if(void 0===s||void 0===s.username||void 0===s.password)throw new m("invalid-credentials",new Error("you need credentials to log in"));await this._initKeyManager(s.username,s.password);const t={username:s.username,authkey:this.keyManager.authKey},e=new g({retryOptions:this.opts?.defaultRetryOptions}),i=this.wellKnownCvsConfiguration,a=await e.post(i.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=a.token,this.vaultRequest=new g({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequential:!0},defaultUrl:i.vault_configuration.v2.vault_endpoint}),this.timestamp=s.timestamp}else this.es?.close(),delete this.es;break;case I.CONNECTED:await this._initEventSourceClient()}return e}async _initEventSourceClient(){return await new Promise(((t,e)=>{try{const e=this.wellKnownCvsConfiguration.vault_configuration[_].events_endpoint;this.es=new l.default(e,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(e=>{const s=JSON.parse(e.data);void 0===s.timestamp?this.emit("empty-storage"):s.timestamp!==this.timestamp&&(this.timestamp=s.timestamp,this.emit("storage-updated",this.timestamp)),t()})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{this.logout().catch((t=>{throw t})),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state.then((e=>{this.switchToState(E(e,t)).catch((t=>{console.error(t)}))})).catch((t=>{console.error(t)}))}}catch(t){e(t)}}))}async _initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new d(t,e,s.vault_configuration[_].key_derivation),await this.keyManager.initialized}async login(t,e,s){await this.initialized,await this.switchToState(I.CONNECTED,{username:t,password:e,timestamp:s})}async logout(){await this.switchToState(I.INITIALIZED)}async close(){await this.switchToState(I.NOT_INITIALIZED)}async getRemoteStorageTimestamp(){if(await this.state!==I.LOGGED_IN)throw new m("unauthorized",new Error("you must be logged in"));const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForOngoingRequestsToFinsh();const e=new g({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[_].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw await this.switchToState(E(await this.state,t)),t}}async getStorage(){if(await this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForOngoingRequestsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new m("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),await this.switchToState(E(await this.state,e)),m.from(e)}}async updateStorage(t,e=!1,s){if(await this.state<I.LOGGED_IN)throw new m("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new m("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=this.vaultRequest,o=await a.post(s,{bearerToken:this.token,responseStatus:201,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),o.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),await this.switchToState(E(await this.state,t)),m.from(t)}}async deleteStorage(){if(await this.state<I.LOGGED_IN)throw new m("unauthorized",new Error("you must be logged in"));try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),await this.logout()}catch(t){throw t instanceof m&&"unauthorized"===t.message&&await this.logout(),t}}async getServerPublicKey(){await this.initialized.catch((t=>{throw new m("unknown",t)}));if(await this.state===I.NOT_INITIALIZED)throw new m("not-initialized",void 0);const t=this.wellKnownCvsConfiguration,e=new g({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new g({retryOptions:e});return{stop:async()=>await s.stop(),promise:s.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}}static async computeAuthKey(t,e,s,i){const a=q.getWellKnownCvsConfiguration(t,i),o=await a.promise,r=new d(e,s,o.vault_configuration[_].key_derivation);return await r.initialized,r.authKey}}exports.KeyManager=d,exports.Request=g,exports.SecretKey=c,exports.VAULT_STATE=I,exports.VaultClient=q,exports.VaultError=m,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=p;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
