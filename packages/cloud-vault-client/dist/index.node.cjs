"use strict";var t=require("crypto"),e=require("worker_threads"),s=require("events"),i=require("eventsource"),a=require("dotenv"),r=require("axios"),o=require("axios-retry"),n=require("@i3m/non-repudiation-library");function u(t){return t&&t.__esModule?t:{default:t}}var h=u(i),l=u(r),c=u(o);class d{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const s=t.randomBytes(16),i=t.createCipheriv(this.alg,this.key,s),a=Buffer.concat([i.update(e),i.final()]),r=i.getAuthTag();return Buffer.concat([s,r,a])}decrypt(e){const s=e.subarray(0,16),i=e.subarray(16,32),a=e.subarray(32),r=t.createDecipheriv(this.alg,this.key,s);return r.setAuthTag(i),Buffer.concat([r.update(a),r.final()])}}if(!e.isMainThread&&"object"==typeof e.workerData&&"scrypt-thread"===e.workerData._name){const{passwordOrKey:k,opts:O}=e.workerData;async function D(e,s){const i={...s.alg_options,maxmem:256*s.alg_options.N*s.alg_options.r},a="string"==typeof e?e:e.export(),r=new Promise(((e,r)=>{t.scrypt(a,s.salt,s.derived_key_length,i,((t,s)=>{null!==t&&r(t),e(s)}))}));return await r}D(k,O).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class w{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=p(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),r=await m(t,{...e,salt:a}),o=p(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),n=p(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[u,h]=await Promise.all([m(r,{...s,salt:o}),m(r,{...i,salt:n})]);this._authKey=u,this._encKey=new d(h,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function p(e,s,i){let a="";for(const t in i)a=s.replace(t,i[t]);return t.createHash(e).update(a).digest()}async function m(s,i){return await new Promise(((a,r)=>{const o={_name:"scrypt-thread",passwordOrKey:s,opts:i},n=new e.Worker(__filename,{workerData:o});n.on("message",(e=>{a(t.createSecretKey(e))})),n.on("error",(t=>{r(t)})),n.on("messageerror",(t=>{r(t)}))}))}a.config();const g=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},f=["0","false","FALSE"],y=["1","true","FALSE"],v=f.concat(y);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const a=e?.isBoolean??!1;if(a&&(e={...e,allowedValues:v}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(g(t,e.allowedValues.join(", ")))}if(a&&y.includes(s))return!0;if(a&&f.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(g(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const _="v"+"2.5.12".split(".")[0];class I extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof I)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new I("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof r.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new I("no-uploaded-storage",void 0);case"invalid-credentials":return new I("invalid-credentials",void 0);case"invalid-timestamp":return new I("invalid-timestamp",void 0);case"quota-exceeded":return new I("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new I("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new I("http-connection-error",s)}if(t instanceof Error){const e=new I("error",t,{cause:t.cause});return e.stack=t.stack,e}return new I("unknown",t)}}class T{axios;_defaultCallOptions;_defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this._defaultCallOptions=t?.defaultCallOptions??{},this._defaultUrl=t?.defaultUrl,this.ongoingRequests={}}get defaultUrl(){return this.defaultUrl}set defaultUrl(t){this._defaultUrl=t}get defaultCallOptions(){return this._defaultCallOptions}set defaultCallOptions(t){this._defaultCallOptions={...this._defaultCallOptions,...t}}getAxiosInstance(t){const e=l.default.create();return void 0!==t?.retries&&c.default(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=o.isNetworkOrIdempotentRequestError(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this._defaultUrl;if(void 0===e)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new I("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const r="post"===t||"put"===t?this.axios[t](e,s,{headers:a}):this.axios[t](e,{headers:a}),o=this.ongoingRequests[e].push(r)-1,n=await r.catch((t=>{throw delete this.ongoingRequests[e][o],I.from(t)})),u=i?.beforeRequestFinish;if(void 0!==u&&await u(n.data),delete this.ongoingRequests[e][o],void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new I("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}async delete(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,a,r;if("string"==typeof t?(i=t,a=e,r=s):(i=this._defaultUrl,a=t,r=e),void 0===i)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,a,r)}async put(t,e,s){let i,a,r;if("string"==typeof t?(i=t,a=e,r=s):(i=this._defaultUrl,a=t,r=e),void 0===i)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,a,r)}}const E={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function q(t,e){switch(I.from(e).message){case"invalid-credentials":case"unauthorized":return E.INITIALIZED;case"sse-connection-error":return t>=E.LOGGED_IN?E.LOGGED_IN:E.INITIALIZED;default:return t}}class N extends s.EventEmitter{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;state;request;keyManager;es;switchingState;constructor(e){super({captureRejections:!0}),this.name=e?.name??t.randomBytes(16).toString("hex"),this.request=new T({retryOptions:{retries:28800,retryDelay:3e3,...e?.defaultRetryOptions},defaultCallOptions:{sequential:!0}}),this.state=new Promise(((t,e)=>{t(E.NOT_INITIALIZED)})),this.switchingState=new Promise(((t,e)=>{t()}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async switchToState(t,e){let s,i;if(t<E.LOGGED_IN&&await this.request.stop(),await this.switchingState,this.switchingState=new Promise(((a,r)=>{this._switchToStatePromise(t,e).then((t=>{i=t})).catch((t=>{s=I.from(t)})).finally((()=>{a()}))})),await this.switchingState,void 0!==s)throw s;return i}async _switchToStatePromise(t,e){let s=await this.state;if(s===t)return s;if(t<E.NOT_INITIALIZED||t>E.CONNECTED)throw new I("error",new Error("invalid state"));const i=t>s?1:-1;for(;s!==t;){let t;if(this.state=new Promise(((a,r)=>{this._switchToState(s,s+i,e).then((t=>{a(t),this.emit("state-changed",t)})).catch((e=>{t=e,a(s)}))})),s=await this.state,void 0!==t)throw I.from(t)}return s}async _switchToState(t,e,s){switch(e){case E.NOT_INITIALIZED:delete this.serverUrl,delete this.wellKnownCvsConfiguration,this.state=new Promise(((t,e)=>{t(E.NOT_INITIALIZED)}));break;case E.INITIALIZED:t===E.NOT_INITIALIZED?this.wellKnownCvsConfiguration=await this.request.get(this.serverUrl+"/.well-known/cvs-configuration",{responseStatus:200}).catch((t=>{throw new I("not-initialized",t)})):(await(this.request?.stop()),delete this.token,delete this.timestamp,delete this.keyManager,this.es?.close(),delete this.es);break;case E.LOGGED_IN:if(t===E.INITIALIZED){if(void 0===s||void 0===s.username||void 0===s.password)throw new I("invalid-credentials",new Error("you need credentials to log in"));await this._initKeyManager(s.username,s.password);const t={username:s.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,i=await this.request.post(e.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=i.token,this.request.defaultUrl=e.vault_configuration.v2.vault_endpoint,this.timestamp=s.timestamp}else this.es?.close(),delete this.es;break;case E.CONNECTED:await this._initEventSourceClient()}return e}async _initEventSourceClient(){return await new Promise(((t,e)=>{try{const e=this.wellKnownCvsConfiguration.vault_configuration[_].events_endpoint;this.es=new h.default(e,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(e=>{const s=JSON.parse(e.data);void 0===s.timestamp?this.emit("empty-storage"):s.timestamp!==this.timestamp&&(this.timestamp=s.timestamp,this.emit("storage-updated",this.timestamp)),t()})),this.es.addEventListener("storage-updated",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{this.logout().catch((t=>{throw t})),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state.then((e=>{this.switchToState(q(e,t)).catch((t=>{console.error(t)}))})).catch((t=>{console.error(t)}))}}catch(t){e(t)}}))}async _initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new w(t,e,s.vault_configuration[_].key_derivation),await this.keyManager.initialized}async init(t){const e=new URL(t),s=e.origin,i=e.pathname.endsWith("/")?e.pathname.slice(0,-1):e.pathname;if(this.serverUrl=s+i,await this.state>E.INITIALIZED)throw new I("error",new Error("to init the client, it should NOT be INITIALIZED"));return await this.switchToState(E.INITIALIZED),this.serverUrl}async login(t,e,s){if(await this.state!==E.INITIALIZED)throw new I("error",new Error("in order to login you should be in state INITIALIZED"));await this.switchToState(E.CONNECTED,{username:t,password:e,timestamp:s})}async logout(){if(await this.state<E.LOGGED_IN)throw new I("error",new Error("in order to log out you should be in state LOGGED IN or CONNECTED"));await this.switchToState(E.INITIALIZED)}async close(){await this.switchToState(E.NOT_INITIALIZED)}async getRemoteStorageTimestamp(){if(await this.state<E.LOGGED_IN)throw new I("unauthorized","you must be logged in");const t=this.wellKnownCvsConfiguration;try{const e=await this.request.get(t.vault_configuration[_].timestamp_endpoint,{responseStatus:200,bearerToken:this.token});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw await this.switchToState(q(await this.state,t)),t}}async getStorage(){if(await this.state<E.LOGGED_IN)throw new I("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=await this.request.get({responseStatus:200,bearerToken:this.token});if(e.timestamp<(this.timestamp??0))throw new I("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const s=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,this.emit("sync-stop",t,Date.now()),{storage:s,timestamp:e.timestamp}}catch(e){this.emit("sync-stop",t,Date.now());const s=q(await this.state,e);throw await this.switchToState(s),I.from(e)}}async updateStorage(t,e=!1){if(await this.state<E.LOGGED_IN)throw new I("unauthorized",void 0);const s=Date.now();this.emit("sync-start",s);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new I("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=await this.request.post(i,{responseStatus:201,bearerToken:this.token,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",s,Date.now()),a.timestamp}catch(t){throw this.emit("sync-stop",s,Date.now()),await this.switchToState(q(await this.state,t)),I.from(t)}}async deleteStorage(){if(await this.state<E.LOGGED_IN)throw new I("unauthorized",new Error("you must be logged in"));try{await this.request.stop(),await this.request.delete({bearerToken:this.token,responseStatus:204}),await this.logout()}catch(t){throw t instanceof I&&"unauthorized"===t.message&&await this.logout(),t}}async getRegistrationUrl(t,e,s){const i=this.wellKnownCvsConfiguration,a=(await this.request.get(i.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk,r={did:s,username:t,authkey:await this.computeAuthKey(t,e)},o=await n.jweEncrypt(Buffer.from(JSON.stringify(r)),a,"A256GCM");return i.registration_configuration.registration_endpoint.replace("{data}",o)}async computeAuthKey(t,e){if(await this.state<E.INITIALIZED)throw new I("not-initialized",void 0);const s=this.wellKnownCvsConfiguration,i=new w(t,e,s.vault_configuration[_].key_derivation);return await i.initialized,i.authKey}}exports.KeyManager=w,exports.Request=T,exports.SecretKey=d,exports.VAULT_STATE=E,exports.VaultClient=N,exports.VaultError=I,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=m;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
