"use strict";var t=require("crypto"),e=require("worker_threads"),s=require("events"),a=require("eventsource"),i=require("dotenv"),r=require("axios"),o=require("axios-retry"),n=require("@i3m/non-repudiation-library");function u(t){return t&&t.__esModule?t:{default:t}}var h=u(a),l=u(r),c=u(o);class d{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(e){const s=t.randomBytes(16),a=t.createCipheriv(this.alg,this.key,s),i=Buffer.concat([a.update(e),a.final()]),r=a.getAuthTag();return Buffer.concat([s,r,i])}decrypt(e){const s=e.subarray(0,16),a=e.subarray(16,32),i=e.subarray(32),r=t.createDecipheriv(this.alg,this.key,s);return r.setAuthTag(a),Buffer.concat([r.update(i),r.final()])}}if(!e.isMainThread&&"object"==typeof e.workerData&&"scrypt-thread"===e.workerData._name){const{passwordOrKey:O,opts:D}=e.workerData;async function S(e,s){const a={...s.alg_options,maxmem:256*s.alg_options.N*s.alg_options.r},i="string"==typeof e?e:e.export(),r=new Promise(((e,r)=>{t.scrypt(i,s.salt,s.derived_key_length,a,((t,s)=>{null!==t&&r(t),e(s)}))}));return await r}S(O,D).then((t=>{e.parentPort?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class w{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:a}=this.derivationOptions,i=p(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),r=await m(t,{...e,salt:i}),o=p(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),n=p(a.salt_hashing_algorithm,a.salt_pattern,{username:this.username}),[u,h]=await Promise.all([m(r,{...s,salt:o}),m(r,{...a,salt:n})]);this._authKey=u,this._encKey=new d(h,a.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function p(e,s,a){let i="";for(const t in a)i=s.replace(t,a[t]);return t.createHash(e).update(i).digest()}async function m(s,a){return await new Promise(((i,r)=>{const o={_name:"scrypt-thread",passwordOrKey:s,opts:a},n=new e.Worker(__filename,{workerData:o});n.on("message",(e=>{i(t.createSecretKey(e))})),n.on("error",(t=>{r(t)})),n.on("messageerror",(t=>{r(t)}))}))}i.config();const g=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},f=["0","false","FALSE"],y=["1","true","FALSE"],v=f.concat(y);!function(t,e){const s=void 0===(a=process.env[t])?"":a;var a;e=e??{};const i=e?.isBoolean??!1;if(i&&(e={...e,allowedValues:v}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(g(t,e.allowedValues.join(", ")))}if(i&&y.includes(s))return!0;if(i&&f.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(g(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const _="v"+"2.5.12".split(".")[0];class I extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof I)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new I("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof r.AxiosError){const e=t.response?.data;switch(e.name){case"no-storage":return new I("no-uploaded-storage",void 0);case"invalid-credentials":return new I("invalid-credentials",void 0);case"invalid-timestamp":return new I("invalid-timestamp",void 0);case"quota-exceeded":return new I("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new I("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new I("http-connection-error",s)}if(t instanceof Error){const e=new I("error",t,{cause:t.cause});return e.stack=t.stack,e}return new I("unknown",t)}}class E{axios;_defaultCallOptions;_defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this._defaultCallOptions=t?.defaultCallOptions??{},this._defaultUrl=t?.defaultUrl,this.ongoingRequests={}}get defaultUrl(){return this.defaultUrl}set defaultUrl(t){this._defaultUrl=t}get defaultCallOptions(){return this._defaultCallOptions}set defaultCallOptions(t){this._defaultCallOptions={...this._defaultCallOptions,...t}}getAxiosInstance(t){const e=l.default.create();return void 0!==t?.retries&&c.default(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=o.isNetworkOrIdempotentRequestError(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this._defaultUrl;if(void 0===e)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,a){const i={"Content-Type":"application/json"};if(void 0!==a?.bearerToken&&(i.Authorization="Bearer "+a.bearerToken),this._stop)throw new I("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:i,data:s}});!0===a?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const r="post"===t||"put"===t?this.axios[t](e,s,{headers:i}):this.axios[t](e,{headers:i}),o=this.ongoingRequests[e].push(r)-1,n=await r.catch((t=>{throw delete this.ongoingRequests[e][o],I.from(t)})),u=a?.beforeRequestFinish;if(void 0!==u&&await u(n.data),delete this.ongoingRequests[e][o],void 0!==a?.responseStatus&&n.status!==a.responseStatus)throw new I("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${a.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}async delete(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const a="string"!=typeof t?t:e;return await this.request("delete",s,void 0,a)}async get(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const a="string"!=typeof t?t:e;return await this.request("get",s,void 0,a)}async post(t,e,s){let a,i,r;if("string"==typeof t?(a=t,i=e,r=s):(a=this._defaultUrl,i=t,r=e),void 0===a)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",a,i,r)}async put(t,e,s){let a,i,r;if("string"==typeof t?(a=t,i=e,r=s):(a=this._defaultUrl,i=t,r=e),void 0===a)throw new I("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",a,i,r)}}const T={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function k(t,e){switch(I.from(e).message){case"invalid-credentials":case"unauthorized":return T.INITIALIZED;case"sse-connection-error":return t>=T.LOGGED_IN?T.LOGGED_IN:T.INITIALIZED;default:return t}}const q={minLength:10,uppercase:!0,lowercase:!0,numbers:!0,symbols:!0,allowedSymbols:"!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"};function N(t,e){const s={...q,...e};if(!(s.uppercase||s.lowercase||s.numbers||s.symbols))throw new I("error",new Error("passwords must have at least one of uppercase, lowercase, digits or symbols"));const a=s.allowedSymbols.replaceAll(/([\^\]\\-])/g,"\\$1");if(s.uppercase&&!/[A-Z]/.test(t))throw new I("weak-password","at least one uppercase letter must be present in the password");if(s.lowercase&&!/[a-z]/.test(t))throw new I("weak-password","at least one lowercase letter must be present in the password");if(s.numbers&&!/[0-9]/.test(t))throw new I("weak-password","at least one digit (0-9) must be present in the password");if(s.symbols){if(!new RegExp(`[${a}]`).test(t))throw new I("weak-password",`at least one symbol (${s.allowedSymbols}) must be present in the password`)}const i=`^[${s.uppercase?"A-Z":""}${s.lowercase?"a-z":""}${s.numbers?"0-9":""}${s.symbols?a:""}]{${s.minLength},}$`;if(!new RegExp(i).test(t))throw new I("weak-password",`minimum length is ${s.minLength}, and the only characters supported are: ${s.uppercase?"A-Z":""}${s.lowercase?"a-z":""}${s.numbers?"0-9":""}${s.symbols?s.allowedSymbols:""}`)}class b extends s.EventEmitter{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;state;request;keyManager;es;switchingState;constructor(e){super({captureRejections:!0}),this.name=e?.name??t.randomBytes(16).toString("hex"),this.request=new E({retryOptions:{retries:28800,retryDelay:3e3,...e?.defaultRetryOptions},defaultCallOptions:{sequential:!0}}),this.state=new Promise(((t,e)=>{t(T.NOT_INITIALIZED)})),this.switchingState=new Promise(((t,e)=>{t()}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async switchToState(t,e){let s,a;if(t<T.LOGGED_IN&&await this.request.stop(),await this.switchingState,this.switchingState=new Promise(((i,r)=>{this._switchToStatePromise(t,e).then((t=>{a=t})).catch((t=>{s=I.from(t)})).finally((()=>{i()}))})),await this.switchingState,void 0!==s)throw s;return a}async _switchToStatePromise(t,e){let s=await this.state;if(s===t)return s;if(t<T.NOT_INITIALIZED||t>T.CONNECTED)throw new I("error",new Error("invalid state"));const a=t>s?1:-1;for(;s!==t;){let t;if(this.state=new Promise(((i,r)=>{this._switchToState(s,s+a,e).then((t=>{i(t),this.emit("state-changed",t)})).catch((e=>{t=e,i(s)}))})),s=await this.state,void 0!==t)throw I.from(t)}return s}async _switchToState(t,e,s){switch(e){case T.NOT_INITIALIZED:delete this.serverUrl,delete this.wellKnownCvsConfiguration,this.state=new Promise(((t,e)=>{t(T.NOT_INITIALIZED)}));break;case T.INITIALIZED:t===T.NOT_INITIALIZED?this.wellKnownCvsConfiguration=await this.request.get(this.serverUrl+"/.well-known/cvs-configuration",{responseStatus:200}).catch((t=>{throw new I("not-initialized",t)})):(await(this.request?.stop()),delete this.token,delete this.timestamp,delete this.keyManager,this.es?.close(),delete this.es);break;case T.LOGGED_IN:if(t===T.INITIALIZED){if(void 0===s||void 0===s.username||void 0===s.password)throw new I("invalid-credentials",new Error("you need credentials to log in"));await this._initKeyManager(s.username,s.password);const t={username:s.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,a=await this.request.post(e.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=a.token,this.request.defaultUrl=e.vault_configuration.v2.vault_endpoint,this.timestamp=s.timestamp}else this.es?.close(),delete this.es;break;case T.CONNECTED:await this._initEventSourceClient()}return e}async _initEventSourceClient(){return await new Promise(((t,e)=>{try{const e=this.wellKnownCvsConfiguration.vault_configuration[_].events_endpoint;this.es=new h.default(e,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(e=>{const s=JSON.parse(e.data);void 0===s.timestamp?this.emit("empty-storage"):s.timestamp!==this.timestamp&&(this.timestamp=s.timestamp,this.emit("storage-updated",this.timestamp)),t()})),this.es.addEventListener("storage-updated",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{this.logout().catch((t=>{throw t})),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state.then((e=>{this.switchToState(k(e,t)).catch((t=>{console.error(t)}))})).catch((t=>{console.error(t)}))}}catch(t){e(t)}}))}async _initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new w(t,e,s.vault_configuration[_].key_derivation),await this.keyManager.initialized}async init(t){const e=new URL(t),s=e.origin,a=e.pathname.endsWith("/")?e.pathname.slice(0,-1):e.pathname;if(this.serverUrl=s+a,await this.state>T.INITIALIZED)throw new I("error",new Error("to init the client, it should NOT be INITIALIZED"));return await this.switchToState(T.INITIALIZED),this.serverUrl}async login(t,e,s){if(await this.state!==T.INITIALIZED)throw new I("error",new Error("in order to login you should be in state INITIALIZED"));await this.switchToState(T.CONNECTED,{username:t,password:e,timestamp:s})}async logout(){if(await this.state<T.LOGGED_IN)throw new I("error",new Error("in order to log out you should be in state LOGGED IN or CONNECTED"));await this.switchToState(T.INITIALIZED)}async close(){await this.switchToState(T.NOT_INITIALIZED)}async getRemoteStorageTimestamp(){if(await this.state<T.LOGGED_IN)throw new I("unauthorized","you must be logged in");const t=this.wellKnownCvsConfiguration;try{const e=await this.request.get(t.vault_configuration[_].timestamp_endpoint,{responseStatus:200,bearerToken:this.token});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw await this.switchToState(k(await this.state,t)),t}}async getStorage(){if(await this.state<T.LOGGED_IN)throw new I("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=await this.request.get({responseStatus:200,bearerToken:this.token});if(e.timestamp<(this.timestamp??0))throw new I("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const s=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,this.emit("sync-stop",t,Date.now()),{storage:s,timestamp:e.timestamp}}catch(e){this.emit("sync-stop",t,Date.now());const s=k(await this.state,e);throw await this.switchToState(s),I.from(e)}}async updateStorage(t,e=!1){if(await this.state<T.LOGGED_IN)throw new I("unauthorized",void 0);const s=Date.now();this.emit("sync-start",s);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new I("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const a={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},i=await this.request.post(a,{responseStatus:201,bearerToken:this.token,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",s,Date.now()),i.timestamp}catch(t){throw this.emit("sync-stop",s,Date.now()),await this.switchToState(k(await this.state,t)),I.from(t)}}async deleteStorage(){if(await this.state<T.LOGGED_IN)throw new I("unauthorized",new Error("you must be logged in"));try{await this.request.stop(),await this.request.delete({bearerToken:this.token,responseStatus:204}),await this.logout()}catch(t){throw t instanceof I&&"unauthorized"===t.message&&await this.logout(),t}}async getRegistrationUrl(t,e,s,a){const i=this.wellKnownCvsConfiguration;await N(e,a);const r=(await this.request.get(i.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk,o={did:s,username:t,authkey:await this.computeAuthKey(t,e)},u=await n.jweEncrypt(Buffer.from(JSON.stringify(o)),r,"A256GCM");return i.registration_configuration.registration_endpoint.replace("{data}",u)}async computeAuthKey(t,e){if(await this.state<T.INITIALIZED)throw new I("not-initialized",void 0);const s=this.wellKnownCvsConfiguration,a=new w(t,e,s.vault_configuration[_].key_derivation);return await a.initialized,a.authKey}}exports.KeyManager=w,exports.Request=E,exports.SecretKey=d,exports.VAULT_STATE=T,exports.VaultClient=b,exports.VaultError=I,exports.checkErrorType=function(t,e){return t.message===e},exports.deriveKey=m,exports.passwordCheck=N;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
