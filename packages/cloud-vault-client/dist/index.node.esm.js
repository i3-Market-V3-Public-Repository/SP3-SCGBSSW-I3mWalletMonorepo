import{fileURLToPath as t}from"url";import{randomBytes as e,createCipheriv as s,createDecipheriv as i,scrypt as a,createHash as o,createSecretKey as r}from"crypto";import{isMainThread as n,workerData as u,parentPort as h,Worker as l}from"worker_threads";import{EventEmitter as c}from"events";import d from"eventsource";import{config as w}from"dotenv";import p,{AxiosError as m}from"axios";import f,{isNetworkOrIdempotentRequestError as g}from"axios-retry";import{jweEncrypt as y}from"@i3m/non-repudiation-library";class v{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(t){const i=e(16),a=s(this.alg,this.key,i),o=Buffer.concat([a.update(t),a.final()]),r=a.getAuthTag();return Buffer.concat([i,r,o])}decrypt(t){const e=t.subarray(0,16),s=t.subarray(16,32),a=t.subarray(32),o=i(this.alg,this.key,e);return o.setAuthTag(s),Buffer.concat([o.update(a),o.final()])}}if(!n&&"object"==typeof u&&"scrypt-thread"===u._name){const{passwordOrKey:t,opts:e}=u;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},i="string"==typeof t?t:t.export(),o=new Promise(((t,o)=>{a(i,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&o(e),t(s)}))}));return await o})(t,e).then((t=>{h?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class I{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=_(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),o=await T(t,{...e,salt:a}),r=_(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),n=_(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[u,h]=await Promise.all([T(o,{...s,salt:r}),T(o,{...i,salt:n})]);this._authKey=u,this._encKey=new v(h,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function _(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return o(t).update(i).digest()}async function T(e,s){return await new Promise(((i,a)=>{const o={_name:"scrypt-thread",passwordOrKey:e,opts:s},n=new l(t(import.meta.url),{workerData:o});n.on("message",(t=>{i(r(t))})),n.on("error",(t=>{a(t)})),n.on("messageerror",(t=>{a(t)}))}))}w();const E=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},N=["0","false","FALSE"],O=["1","true","FALSE"],k=N.concat(O);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const a=e?.isBoolean??!1;if(a&&(e={...e,allowedValues:k}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(E(t,e.allowedValues.join(", ")))}if(a&&O.includes(s))return!0;if(a&&N.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(E(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const q="v"+"2.5.12".split(".")[0];class D extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof D)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new D("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof m){const e=t.response?.data;switch(e.name){case"no-storage":return new D("no-uploaded-storage",void 0);case"invalid-credentials":return new D("invalid-credentials",void 0);case"invalid-timestamp":return new D("invalid-timestamp",void 0);case"quota-exceeded":return new D("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new D("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new D("http-connection-error",s)}if(t instanceof Error){const e=new D("error",t,{cause:t.cause});return e.stack=t.stack,e}return new D("unknown",t)}}function C(t,e){return t.message===e}class L{axios;_defaultCallOptions;_defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this._defaultCallOptions=t?.defaultCallOptions??{},this._defaultUrl=t?.defaultUrl,this.ongoingRequests={}}get defaultUrl(){return this.defaultUrl}set defaultUrl(t){this._defaultUrl=t}get defaultCallOptions(){return this._defaultCallOptions}set defaultCallOptions(t){this._defaultCallOptions={...this._defaultCallOptions,...t}}getAxiosInstance(t){const e=p.create();return void 0!==t?.retries&&f(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=g(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this._defaultUrl;if(void 0===e)throw new D("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new D("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const o="post"===t||"put"===t?this.axios[t](e,s,{headers:a}):this.axios[t](e,{headers:a}),r=this.ongoingRequests[e].push(o)-1,n=await o.catch((t=>{throw delete this.ongoingRequests[e][r],D.from(t)})),u=i?.beforeRequestFinish;if(void 0!==u&&await u(n.data),delete this.ongoingRequests[e][r],void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new D("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}async delete(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new D("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new D("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this._defaultUrl,a=t,o=e),void 0===i)throw new D("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,a,o)}async put(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this._defaultUrl,a=t,o=e),void 0===i)throw new D("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,a,o)}}const R={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function S(t,e){switch(D.from(e).message){case"invalid-credentials":case"unauthorized":return R.INITIALIZED;case"sse-connection-error":return t>=R.LOGGED_IN?R.LOGGED_IN:R.INITIALIZED;default:return t}}class U extends c{timestamp;token;name;serverRootUrl;serverPrefix;serverUrl;wellKnownCvsConfiguration;state;request;keyManager;es;constructor(t,s){super({captureRejections:!0}),this.name=s?.name??e(16).toString("hex");const i=new URL(t);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this.serverUrl=this.serverRootUrl+this.serverPrefix,this.request=new L({retryOptions:{retries:28800,retryDelay:3e3,...s?.defaultRetryOptions},defaultCallOptions:{sequential:!0}}),this.state=new Promise(((t,e)=>{t(R.NOT_INITIALIZED)}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async switchToState(t,e){let s=await this.state;if(s===t)return s;if(t<R.NOT_INITIALIZED||t>R.CONNECTED)throw new D("error",new Error("invalid state"));const i=t>s?1:-1;for(;s!==t;){let t;if(this.state=new Promise(((a,o)=>{this._switchToState(s,s+i,e).then((t=>{a(t),this.emit("state-changed",t)})).catch((e=>{t=e,a(s)}))})),s=await this.state,void 0!==t)throw D.from(t)}return s}async _switchToState(t,e,s){switch(e){case R.NOT_INITIALIZED:delete this.wellKnownCvsConfiguration,this.state=new Promise(((t,e)=>{t(R.NOT_INITIALIZED)}));break;case R.INITIALIZED:t===R.NOT_INITIALIZED?this.wellKnownCvsConfiguration=await this.request.get(this.serverRootUrl+this.serverPrefix+"/.well-known/cvs-configuration",{responseStatus:200}).catch((t=>{throw new D("not-initialized",t)})):(await(this.request?.stop()),delete this.token,delete this.timestamp,delete this.keyManager,this.es?.close(),delete this.es);break;case R.LOGGED_IN:if(t===R.INITIALIZED){if(void 0===s||void 0===s.username||void 0===s.password)throw new D("invalid-credentials",new Error("you need credentials to log in"));await this._initKeyManager(s.username,s.password);const t={username:s.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,i=await this.request.post(e.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=i.token,this.request.defaultUrl=e.vault_configuration.v2.vault_endpoint,this.timestamp=s.timestamp}else this.es?.close(),delete this.es;break;case R.CONNECTED:await this._initEventSourceClient()}return e}async _initEventSourceClient(){return await new Promise(((t,e)=>{try{const e=this.wellKnownCvsConfiguration.vault_configuration[q].events_endpoint;this.es=new d(e,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(e=>{const s=JSON.parse(e.data);void 0===s.timestamp?this.emit("empty-storage"):s.timestamp!==this.timestamp&&(this.timestamp=s.timestamp,this.emit("storage-updated",this.timestamp)),t()})),this.es.addEventListener("storage-updated",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{this.logout().catch((t=>{throw t})),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state.then((e=>{this.switchToState(S(e,t)).catch((t=>{console.error(t)}))})).catch((t=>{console.error(t)}))}}catch(t){e(t)}}))}async _initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new I(t,e,s.vault_configuration[q].key_derivation),await this.keyManager.initialized}async init(){if(await this.state>R.INITIALIZED)throw new D("unknown","to init the client, it should NOT be INITIALIZED");await this.switchToState(R.INITIALIZED)}async login(t,e,s){if(await this.state!==R.INITIALIZED)throw new D("unknown","in order to login you should be in state INITIALIZED");await this.switchToState(R.CONNECTED,{username:t,password:e,timestamp:s})}async logout(){if(await this.state<R.LOGGED_IN)throw new D("unknown","in order to log out you should be in state LOGGED IN or CONNECTED");await this.switchToState(R.INITIALIZED)}async close(){await this.switchToState(R.NOT_INITIALIZED)}async getRemoteStorageTimestamp(){if(await this.state<R.LOGGED_IN)throw new D("unauthorized","you must be logged in");const t=this.wellKnownCvsConfiguration;try{const e=await this.request.get(t.vault_configuration[q].timestamp_endpoint,{responseStatus:200,bearerToken:this.token});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw await this.switchToState(S(await this.state,t)),t}}async getStorage(){if(await this.state<R.LOGGED_IN)throw new D("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=await this.request.get({responseStatus:200,bearerToken:this.token});if(e.timestamp<(this.timestamp??0))throw new D("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const s=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,this.emit("sync-stop",t,Date.now()),{storage:s,timestamp:e.timestamp}}catch(e){this.emit("sync-stop",t,Date.now());const s=S(await this.state,e);throw await this.switchToState(s),D.from(e)}}async updateStorage(t,e=!1){if(await this.state<R.LOGGED_IN)throw new D("unauthorized",void 0);const s=Date.now();this.emit("sync-start",s);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new D("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=await this.request.post(i,{responseStatus:201,bearerToken:this.token,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",s,Date.now()),a.timestamp}catch(t){throw this.emit("sync-stop",s,Date.now()),await this.switchToState(S(await this.state,t)),D.from(t)}}async deleteStorage(){if(await this.state<R.LOGGED_IN)throw new D("unauthorized",new Error("you must be logged in"));try{await this.request.stop(),await this.request.delete({bearerToken:this.token,responseStatus:204}),await this.logout()}catch(t){throw t instanceof D&&"unauthorized"===t.message&&await this.logout(),t}}async getRegistrationUrl(t,e,s){const i=this.wellKnownCvsConfiguration,a=(await this.request.get(i.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk,o={did:s,username:t,authkey:await this.computeAuthKey(t,e)},r=await y(Buffer.from(JSON.stringify(o)),a,"A256GCM");return i.registration_configuration.registration_endpoint.replace("{data}",r)}async computeAuthKey(t,e){if(await this.state<R.INITIALIZED)throw new D("not-initialized",void 0);const s=this.wellKnownCvsConfiguration,i=new I(t,e,s.vault_configuration[q].key_derivation);return await i.initialized,i.authKey}}export{I as KeyManager,L as Request,v as SecretKey,R as VAULT_STATE,U as VaultClient,D as VaultError,C as checkErrorType,T as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
