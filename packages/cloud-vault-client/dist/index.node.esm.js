import{fileURLToPath as t}from"url";import{randomBytes as e,createCipheriv as s,createDecipheriv as i,scrypt as o,createHash as a,createSecretKey as n}from"crypto";import{isMainThread as r,workerData as l,parentPort as h,Worker as u}from"worker_threads";import c,{AxiosError as d}from"axios";import p,{isNetworkOrIdempotentRequestError as m}from"axios-retry";import{EventEmitter as w}from"events";import f from"eventsource";import g from"fs";import v from"path";import y from"os";class _{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(t){const i=e(16),o=s(this.alg,this.key,i),a=Buffer.concat([o.update(t),o.final()]),n=o.getAuthTag();return Buffer.concat([i,n,a])}decrypt(t){const e=t.subarray(0,16),s=t.subarray(16,32),o=t.subarray(32),a=i(this.alg,this.key,e);return a.setAuthTag(s),Buffer.concat([a.update(o),a.final()])}}if(!r&&"object"==typeof l&&"scrypt-thread"===l._name){const{passwordOrKey:t,opts:e}=l;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},i="string"==typeof t?t:t.export(),a=new Promise(((t,a)=>{o(i,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&a(e),t(s)}))}));return await a})(t,e).then((t=>{h?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class T{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,o=E(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),a=await I(t,{...e,salt:o}),n=E(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),r=E(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[l,h]=await Promise.all([I(a,{...s,salt:n}),I(a,{...i,salt:r})]);this._authKey=l,this._encKey=new _(h,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function E(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return a(t).update(i).digest()}async function I(e,s){return await new Promise(((i,o)=>{const a={_name:"scrypt-thread",passwordOrKey:e,opts:s},r=new u(t(import.meta.url),{workerData:a});r.on("message",(t=>{i(n(t))})),r.on("error",(t=>{o(t)})),r.on("messageerror",(t=>{o(t)}))}))}class k extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof k)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new k("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof d){const e=t.response?.data;switch(e.name){case"no-storage":return new k("no-uploaded-storage",void 0);case"invalid-credentials":return new k("invalid-credentials",void 0);case"invalid-timestamp":return new k("invalid-timestamp",void 0);case"quota-exceeded":return new k("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new k("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new k("http-connection-error",s)}if(t instanceof Error){const e=new k("error",t,{cause:t.cause});return e.stack=t.stack,e}return new k("unknown",t)}}function C(t,e){return t.message===e}class b{axios;defaultCallOptions;defaultUrl;_stop;uploading;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.uploading={}}getAxiosInstance(t){const e=c.create();return void 0!==t?.retries&&p(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>!this._stop&&m(t)}),e}async waitForUploadsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new k("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.uploading[e])for(const t of this.uploading[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.uploading)await this.waitForUploadsToFinsh(t).catch();this._stop=!1}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new k("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e,o={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(o.Authorization="Bearer "+i.bearerToken),this._stop)throw new k("http-request-canceled",{request:{method:"GET",url:s,headers:o}});const a=await this.axios.get(s,{headers:o}).catch((t=>{throw k.from(t)}));if(void 0!==i?.responseStatus&&a.status!==i.responseStatus)throw new k("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new k("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e,o={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(o.Authorization="Bearer "+i.bearerToken),this._stop)throw new k("http-request-canceled",{request:{method:"DELETE",url:s,headers:o}});const a=await this.axios.delete(s,{headers:o}).catch((t=>{throw k.from(t)}));if(void 0!==i?.responseStatus&&a.status!==i.responseStatus)throw new k("validation",{description:`Received HTTP status ${a.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return a.data}async upload(t,e,s,i){const o={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(o.Authorization="Bearer "+i.bearerToken),this._stop)throw new k("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:o,data:s}});!0===i?.sequentialPost&&await this.waitForUploadsToFinsh(e).catch(),this.uploading[e]=[];const a=this.axios[t](e,s,{headers:o}),n=this.uploading[e].push(a)-1,r=await a.catch((t=>{throw k.from(t)})),l=i?.beforeUploadFinish;if(void 0!==l&&await l(r.data),n===this.uploading[e].length-1)this.uploading[e].pop();else{let t=n;do{delete this.uploading[e][n],t--}while(void 0===this.uploading[e][t])}if(0===this.uploading[e].length&&delete this.uploading[e],void 0!==i?.responseStatus&&r.status!==i.responseStatus)throw new k("validation",{description:`Received HTTP status ${r.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return r.data}async post(t,e,s){let i,o,a;if("string"==typeof t?(i=t,o=e,a=s):(i=this.defaultUrl,o=t,a=e),void 0===i)throw new k("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.upload("post",i,o,a)}async put(t,e,s){let i,o,a;if("string"==typeof t?(i=t,o=e,a=s):(i=this.defaultUrl,o=t,a=e),void 0===i)throw new k("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.upload("put",i,o,a)}}var O={exports:{}};const D=g,N=v,U=y,K={name:"dotenv",version:"16.0.3",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{require:"./lib/main.js",types:"./lib/main.d.ts",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@types/node":"^17.0.9",decache:"^4.6.1",dtslint:"^3.7.0",sinon:"^12.0.1",standard:"^16.0.4","standard-markdown":"^7.1.0","standard-version":"^9.3.2",tap:"^15.1.6",tar:"^6.1.11",typescript:"^4.5.4"},engines:{node:">=12"}}.version,j=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function x(t){console.log(`[dotenv@${K}][DEBUG] ${t}`)}const S={config:function(t){let e=N.resolve(process.cwd(),".env"),s="utf8";const i=Boolean(t&&t.debug),o=Boolean(t&&t.override);var a;t&&(null!=t.path&&(e="~"===(a=t.path)[0]?N.join(U.homedir(),a.slice(1)):a),null!=t.encoding&&(s=t.encoding));try{const t=S.parse(D.readFileSync(e,{encoding:s}));return Object.keys(t).forEach((function(e){Object.prototype.hasOwnProperty.call(process.env,e)?(!0===o&&(process.env[e]=t[e]),i&&x(!0===o?`"${e}" is already defined in \`process.env\` and WAS overwritten`:`"${e}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[e]=t[e]})),{parsed:t}}catch(t){return i&&x(`Failed to load ${e} ${t.message}`),{error:t}}},parse:function(t){const e={};let s,i=t.toString();for(i=i.replace(/\r\n?/gm,"\n");null!=(s=j.exec(i));){const t=s[1];let i=s[2]||"";i=i.trim();const o=i[0];i=i.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===o&&(i=i.replace(/\\n/g,"\n"),i=i.replace(/\\r/g,"\r")),e[t]=i}return e}};var z=O.exports.config=S.config;O.exports.parse=S.parse,O.exports=S,z();const R=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},L=["0","false","FALSE"],P=["1","true","FALSE"],q=L.concat(P);function A(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const o=e?.isBoolean??!1;if(o&&(e={...e,allowedValues:q}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(R(t,e.allowedValues.join(", ")))}if(o&&P.includes(s))return!0;if(o&&L.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(R(t,e.allowedValues.join(", ")));return s}A("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const G="v"+A("npm_package_version",{defaultValue:"0.0.1"})[0],F={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function $(t,e){switch(k.from(e).message){case"invalid-credentials":case"unauthorized":return F.INITIALIZED;case"sse-connection-error":return t>=F.LOGGED_IN?F.LOGGED_IN:F.INITIALIZED;default:return t}}class M extends w{timestamp;token;name;opts;serverRootUrl;serverPrefix;serverUrl;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;_state;_initialized;vaultRequest;keyManager;es;constructor(t,s){super({captureRejections:!0}),this.name=s?.name??e(16).toString("hex"),this.opts=s;const i=new URL(t);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this.serverUrl=this.serverRootUrl+this.serverPrefix,this._state=F.NOT_INITIALIZED,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})).catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){if(t<F.NOT_INITIALIZED||t>F.CONNECTED)throw new Error("invalid state");if(t-this._state>1||this.state-t>1)throw new Error("steps MUST be passed one by one");if(this._state!==t){switch(t){case F.NOT_INITIALIZED:delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this._initialized=new Promise(((t,e)=>{e(new k("not-initialized",void 0))}));break;case F.INITIALIZED:this._state===F.LOGGED_IN&&(delete this.keyManager,delete this.vaultRequest,delete this.token,delete this.timestamp,this.es?.close(),delete this.es)}this._state=t,this.emit("state-changed",this._state)}}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfigurationPromise=M.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new k("not-initialized",t)})),this.state=F.INITIALIZED}async initEventSourceClient(){if(this.state!==F.LOGGED_IN)throw new Error("cannot be called if not logged in");const t=this.wellKnownCvsConfiguration.vault_configuration[G].events_endpoint;this.es=new f(t,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0===e.timestamp?this.emit("empty-storage"):e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.state=F.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForUploadsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForUploadsToFinsh().finally((()=>{this.logout(),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state=$(this.state,t)}}async initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new T(t,e,s.vault_configuration[G].key_derivation),await this.keyManager.initialized}logout(){this.state<F.LOGGED_IN||(this.state===F.CONNECTED&&(this.state=F.LOGGED_IN),this.state=F.INITIALIZED)}close(){this.logout(),this.wellKnownCvsConfigurationPromise?.stop(),this.wellKnownCvsConfigurationPromise?.promise.catch((()=>{})),this.state=F.NOT_INITIALIZED}async login(t,e,s){this.state===F.NOT_INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const i={username:t,authkey:this.keyManager.authKey},o=new b({retryOptions:this.opts?.defaultRetryOptions}),a=this.wellKnownCvsConfiguration,n=await o.post(a.vault_configuration.v2.token_endpoint,i,{responseStatus:200});this.token=n.token,this.vaultRequest=new b({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequentialPost:!0},defaultUrl:a.vault_configuration.v2.vault_endpoint}),this.timestamp=s,this.state=F.LOGGED_IN,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<F.LOGGED_IN)throw new k("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForUploadsToFinsh();const e=new b({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[G].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw this.state=$(this.state,t),t}}async getStorage(){if(this.state<F.LOGGED_IN)throw new k("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForUploadsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new k("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=$(this.state,e),k.from(e)}}async updateStorage(t,e=!1,s){if(this.state<F.LOGGED_IN)throw new k("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new k("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},o=this.vaultRequest,a=await o.post(s,{bearerToken:this.token,responseStatus:201,beforeUploadFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),a.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),this.state=$(this.state,t),k.from(t)}}async deleteStorage(){if(this.state<F.LOGGED_IN)throw new k("unauthorized",void 0);try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),this.logout()}catch(t){throw t instanceof k&&"unauthorized"===t.message&&this.logout(),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration,e=new b({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new b({retryOptions:e}),i=s.get(t+"/.well-known/cvs-configuration",{responseStatus:200});return{stop:s.stop,promise:i}}static async computeAuthKey(t,e,s,i){const o=M.getWellKnownCvsConfiguration(t,i),a=await o.promise,n=new T(e,s,a.vault_configuration[G].key_derivation);return await n.initialized,n.authKey}}export{T as KeyManager,b as Request,_ as SecretKey,F as VAULT_STATE,M as VaultClient,k as VaultError,C as checkErrorType,I as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
