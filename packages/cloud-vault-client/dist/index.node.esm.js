import{fileURLToPath as t}from"url";import{randomBytes as e,createCipheriv as s,createDecipheriv as i,scrypt as o,createHash as a,createSecretKey as n}from"crypto";import{isMainThread as r,workerData as h,parentPort as u,Worker as l}from"worker_threads";import c,{AxiosError as d}from"axios";import p,{isNetworkOrIdempotentRequestError as m}from"axios-retry";import{EventEmitter as w}from"events";import g from"eventsource";import{config as f}from"dotenv";class v{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(t){const i=e(16),o=s(this.alg,this.key,i),a=Buffer.concat([o.update(t),o.final()]),n=o.getAuthTag();return Buffer.concat([i,n,a])}decrypt(t){const e=t.subarray(0,16),s=t.subarray(16,32),o=t.subarray(32),a=i(this.alg,this.key,e);return a.setAuthTag(s),Buffer.concat([a.update(o),a.final()])}}if(!r&&"object"==typeof h&&"scrypt-thread"===h._name){const{passwordOrKey:t,opts:e}=h;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},i="string"==typeof t?t:t.export(),a=new Promise(((t,a)=>{o(i,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&a(e),t(s)}))}));return await a})(t,e).then((t=>{u?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class y{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,o=_(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),a=await I(t,{...e,salt:o}),n=_(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),r=_(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[h,u]=await Promise.all([I(a,{...s,salt:n}),I(a,{...i,salt:r})]);this._authKey=h,this._encKey=new v(u,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function _(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return a(t).update(i).digest()}async function I(e,s){return await new Promise(((i,o)=>{const a={_name:"scrypt-thread",passwordOrKey:e,opts:s},r=new l(t(import.meta.url),{workerData:a});r.on("message",(t=>{i(n(t))})),r.on("error",(t=>{o(t)})),r.on("messageerror",(t=>{o(t)}))}))}class E extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof E)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new E("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof d){const e=t.response?.data;switch(e.name){case"no-storage":return new E("no-uploaded-storage",void 0);case"invalid-credentials":return new E("invalid-credentials",void 0);case"invalid-timestamp":return new E("invalid-timestamp",void 0);case"quota-exceeded":return new E("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new E("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new E("http-connection-error",s)}if(t instanceof Error){const e=new E("error",t,{cause:t.cause});return e.stack=t.stack,e}return new E("unknown",t)}}function T(t,e){return t.message===e}class C{axios;defaultCallOptions;defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.ongoingRequests={}}getAxiosInstance(t){const e=c.create();return void 0!==t?.retries&&p(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>!this._stop&&m(t)}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new E("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const o={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(o.Authorization="Bearer "+i.bearerToken),this._stop)throw new E("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:o,data:s}});"post"!==t&&"put"!==t||!0!==i?.sequentialPost||await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const a="post"===t||"put"===t?this.axios[t](e,s,{headers:o}):this.axios[t](e,{headers:o}),n=this.ongoingRequests[e].push(a)-1,r=await a.catch((t=>{throw E.from(t)})),h=i?.beforeUploadFinish;if(void 0!==h&&await h(r.data),n===this.ongoingRequests[e].length-1)this.ongoingRequests[e].pop();else{let t=n;do{delete this.ongoingRequests[e][n],t--}while(void 0===this.ongoingRequests[e][t])}if(0===this.ongoingRequests[e].length&&delete this.ongoingRequests[e],void 0!==i?.responseStatus&&r.status!==i.responseStatus)throw new E("validation",{description:`Received HTTP status ${r.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return r.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new E("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new E("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,o,a;if("string"==typeof t?(i=t,o=e,a=s):(i=this.defaultUrl,o=t,a=e),void 0===i)throw new E("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,o,a)}async put(t,e,s){let i,o,a;if("string"==typeof t?(i=t,o=e,a=s):(i=this.defaultUrl,o=t,a=e),void 0===i)throw new E("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,o,a)}}f();const O=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},R=["0","false","FALSE"],q=["1","true","FALSE"],k=R.concat(q);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const o=e?.isBoolean??!1;if(o&&(e={...e,allowedValues:k}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(O(t,e.allowedValues.join(", ")))}if(o&&q.includes(s))return!0;if(o&&R.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(O(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const N="v"+"2.5.9".split(".")[0],D={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function K(t,e){switch(E.from(e).message){case"invalid-credentials":case"unauthorized":return D.INITIALIZED;case"sse-connection-error":return t>=D.LOGGED_IN?D.LOGGED_IN:D.INITIALIZED;default:return t}}class z extends w{timestamp;token;name;opts;serverRootUrl;serverPrefix;serverUrl;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;_state;_initialized;vaultRequest;keyManager;es;constructor(t,s){super({captureRejections:!0}),this.name=s?.name??e(16).toString("hex"),this.opts=s;const i=new URL(t);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this.serverUrl=this.serverRootUrl+this.serverPrefix,this._state=D.NOT_INITIALIZED,this._initialized=this.init()}get initialized(){return new Promise(((t,e)=>{this._initialized.then((()=>{t()})).catch((()=>{this._initialized=this.init().then((()=>{t()})).catch((t=>{e(t)}))}))}))}get state(){return this._state}set state(t){if(t<D.NOT_INITIALIZED||t>D.CONNECTED)throw new Error("invalid state");if(t-this._state>1||this.state-t>1)throw new Error("steps MUST be passed one by one");if(this._state!==t){switch(t){case D.NOT_INITIALIZED:delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this._initialized=new Promise(((t,e)=>{e(new E("not-initialized",void 0))}));break;case D.INITIALIZED:this._state===D.LOGGED_IN&&(delete this.keyManager,delete this.vaultRequest,delete this.token,delete this.timestamp,this.es?.close(),delete this.es)}this._state=t,this.emit("state-changed",this._state)}}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async init(){this.wellKnownCvsConfigurationPromise=z.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new E("not-initialized",t)})),this.state=D.INITIALIZED}async initEventSourceClient(){if(this.state!==D.LOGGED_IN)throw new Error("cannot be called if not logged in");const t=this.wellKnownCvsConfiguration.vault_configuration[N].events_endpoint;this.es=new g(t,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0===e.timestamp?this.emit("empty-storage"):e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.state=D.CONNECTED})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{this.logout(),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state=K(this.state,t)}}async initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new y(t,e,s.vault_configuration[N].key_derivation),await this.keyManager.initialized}logout(){this.state<D.LOGGED_IN||(this.state===D.CONNECTED&&(this.state=D.LOGGED_IN),this.state=D.INITIALIZED)}close(){this.logout(),this.vaultRequest?.stop().catch((()=>{})),this.wellKnownCvsConfigurationPromise?.stop(),this.wellKnownCvsConfigurationPromise?.promise.catch((()=>{})),this.state=D.NOT_INITIALIZED}async login(t,e,s){this.state===D.NOT_INITIALIZED&&await this.initialized,await this.initKeyManager(t,e);const i={username:t,authkey:this.keyManager.authKey},o=new C({retryOptions:this.opts?.defaultRetryOptions}),a=this.wellKnownCvsConfiguration,n=await o.post(a.vault_configuration.v2.token_endpoint,i,{responseStatus:200});this.token=n.token,this.vaultRequest=new C({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequentialPost:!0},defaultUrl:a.vault_configuration.v2.vault_endpoint}),this.timestamp=s,this.state=D.LOGGED_IN,await this.initEventSourceClient()}async getRemoteStorageTimestamp(){if(this.state<D.LOGGED_IN)throw new E("unauthorized",void 0);const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForOngoingRequestsToFinsh();const e=new C({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[N].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw this.state=K(this.state,t),t}}async getStorage(){if(this.state<D.LOGGED_IN)throw new E("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForOngoingRequestsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new E("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),this.state=K(this.state,e),E.from(e)}}async updateStorage(t,e=!1,s){if(this.state<D.LOGGED_IN)throw new E("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new E("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},o=this.vaultRequest,a=await o.post(s,{bearerToken:this.token,responseStatus:201,beforeUploadFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),a.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),this.state=K(this.state,t),E.from(t)}}async deleteStorage(){if(this.state<D.LOGGED_IN)throw new E("unauthorized",void 0);try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),this.logout()}catch(t){throw t instanceof E&&"unauthorized"===t.message&&this.logout(),t}}async getServerPublicKey(){await this.initialized;const t=this.wellKnownCvsConfiguration,e=new C({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new C({retryOptions:e}),i=s.get(t+"/.well-known/cvs-configuration",{responseStatus:200});return{stop:s.stop,promise:i}}static async computeAuthKey(t,e,s,i){const o=z.getWellKnownCvsConfiguration(t,i),a=await o.promise,n=new y(e,s,a.vault_configuration[N].key_derivation);return await n.initialized,n.authKey}}export{y as KeyManager,C as Request,v as SecretKey,D as VAULT_STATE,z as VaultClient,E as VaultError,T as checkErrorType,I as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
