import{fileURLToPath as t}from"url";import{randomBytes as e,createCipheriv as s,createDecipheriv as i,scrypt as a,createHash as o,createSecretKey as r}from"crypto";import{isMainThread as n,workerData as h,parentPort as u,Worker as l}from"worker_threads";import{EventEmitter as c}from"events";import d from"eventsource";import{config as w}from"dotenv";import p,{AxiosError as m}from"axios";import f,{isNetworkOrIdempotentRequestError as g}from"axios-retry";import{jweEncrypt as y}from"@i3m/non-repudiation-library";class v{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(t){const i=e(16),a=s(this.alg,this.key,i),o=Buffer.concat([a.update(t),a.final()]),r=a.getAuthTag();return Buffer.concat([i,r,o])}decrypt(t){const e=t.subarray(0,16),s=t.subarray(16,32),a=t.subarray(32),o=i(this.alg,this.key,e);return o.setAuthTag(s),Buffer.concat([o.update(a),o.final()])}}if(!n&&"object"==typeof h&&"scrypt-thread"===h._name){const{passwordOrKey:t,opts:e}=h;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},i="string"==typeof t?t:t.export(),o=new Promise(((t,o)=>{a(i,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&o(e),t(s)}))}));return await o})(t,e).then((t=>{u?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class I{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=_(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),o=await E(t,{...e,salt:a}),r=_(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),n=_(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[h,u]=await Promise.all([E(o,{...s,salt:r}),E(o,{...i,salt:n})]);this._authKey=h,this._encKey=new v(u,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function _(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return o(t).update(i).digest()}async function E(e,s){return await new Promise(((i,a)=>{const o={_name:"scrypt-thread",passwordOrKey:e,opts:s},n=new l(t(import.meta.url),{workerData:o});n.on("message",(t=>{i(r(t))})),n.on("error",(t=>{a(t)})),n.on("messageerror",(t=>{a(t)}))}))}w();const T=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},N=["0","false","FALSE"],O=["1","true","FALSE"],k=N.concat(O);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const a=e?.isBoolean??!1;if(a&&(e={...e,allowedValues:k}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(T(t,e.allowedValues.join(", ")))}if(a&&O.includes(s))return!0;if(a&&N.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(T(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const D="v"+"2.5.12".split(".")[0];class S extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof S)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new S("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof m){const e=t.response?.data;switch(e.name){case"no-storage":return new S("no-uploaded-storage",void 0);case"invalid-credentials":return new S("invalid-credentials",void 0);case"invalid-timestamp":return new S("invalid-timestamp",void 0);case"quota-exceeded":return new S("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new S("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new S("http-connection-error",s)}if(t instanceof Error){const e=new S("error",t,{cause:t.cause});return e.stack=t.stack,e}return new S("unknown",t)}}function q(t,e){return t.message===e}class b{axios;_defaultCallOptions;_defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this._defaultCallOptions=t?.defaultCallOptions??{},this._defaultUrl=t?.defaultUrl,this.ongoingRequests={}}get defaultUrl(){return this.defaultUrl}set defaultUrl(t){this._defaultUrl=t}get defaultCallOptions(){return this._defaultCallOptions}set defaultCallOptions(t){this._defaultCallOptions={...this._defaultCallOptions,...t}}getAxiosInstance(t){const e=p.create();return void 0!==t?.retries&&f(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=g(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this._defaultUrl;if(void 0===e)throw new S("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new S("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const o="post"===t||"put"===t?this.axios[t](e,s,{headers:a}):this.axios[t](e,{headers:a}),r=this.ongoingRequests[e].push(o)-1,n=await o.catch((t=>{throw delete this.ongoingRequests[e][r],S.from(t)})),h=i?.beforeRequestFinish;if(void 0!==h&&await h(n.data),delete this.ongoingRequests[e][r],void 0!==i?.responseStatus&&n.status!==i.responseStatus)throw new S("validation",{description:`Received HTTP status ${n.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return n.data}async delete(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new S("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this._defaultUrl;if(void 0===s)throw new S("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this._defaultUrl,a=t,o=e),void 0===i)throw new S("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,a,o)}async put(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this._defaultUrl,a=t,o=e),void 0===i)throw new S("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,a,o)}}const C={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function L(t,e){switch(S.from(e).message){case"invalid-credentials":case"unauthorized":return C.INITIALIZED;case"sse-connection-error":return t>=C.LOGGED_IN?C.LOGGED_IN:C.INITIALIZED;default:return t}}const A={minLength:10,uppercase:!0,lowercase:!0,numbers:!0,symbols:!0,allowedSymbols:"!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"};function R(t,e){const s={...A,...e};if(!(s.uppercase||s.lowercase||s.numbers||s.symbols))throw new S("error",new Error("passwords must have at least one of uppercase, lowercase, digits or symbols"));const i=`minimum length is ${s.minLength}, and the only characters supported are: ${s.uppercase?"A-Z":""}${s.lowercase?"a-z":""}${s.numbers?"0-9":""}${s.symbols?s.allowedSymbols:""}`,a=s.allowedSymbols.replaceAll(/([\^\]\\-])/g,"\\$1");if(s.uppercase&&!/[A-Z]/.test(t))throw new S("weak-password",i);if(s.lowercase&&!/[a-z]/.test(t))throw new S("weak-password",i);if(s.numbers&&!/[0-9]/.test(t))throw new S("weak-password",i);if(s.symbols){if(!new RegExp(`[${a}]`).test(t))throw new S("weak-password",i)}const o=`^[${s.uppercase?"A-Z":""}${s.lowercase?"a-z":""}${s.numbers?"0-9":""}${s.symbols?a:""}]{${s.minLength},}$`;if(!new RegExp(o).test(t))throw new S("weak-password",i)}class U extends c{timestamp;token;name;serverUrl;wellKnownCvsConfiguration;state;request;keyManager;es;switchingState;constructor(t){super({captureRejections:!0}),this.name=t?.name??e(16).toString("hex"),this.request=new b({retryOptions:{retries:28800,retryDelay:3e3,...t?.defaultRetryOptions},defaultCallOptions:{sequential:!0}}),this.state=new Promise(((t,e)=>{t(C.NOT_INITIALIZED)})),this.switchingState=new Promise(((t,e)=>{t()}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async switchToState(t,e){let s,i;if(t<C.LOGGED_IN&&await this.request.stop(),await this.switchingState,this.switchingState=new Promise(((a,o)=>{this._switchToStatePromise(t,e).then((t=>{i=t})).catch((t=>{s=S.from(t)})).finally((()=>{a()}))})),await this.switchingState,void 0!==s)throw s;return i}async _switchToStatePromise(t,e){let s=await this.state;if(s===t)return s;if(t<C.NOT_INITIALIZED||t>C.CONNECTED)throw new S("error",new Error("invalid state"));const i=t>s?1:-1;for(;s!==t;){let t;if(this.state=new Promise(((a,o)=>{this._switchToState(s,s+i,e).then((t=>{a(t),this.emit("state-changed",t)})).catch((e=>{t=e,a(s)}))})),s=await this.state,void 0!==t)throw S.from(t)}return s}async _switchToState(t,e,s){switch(e){case C.NOT_INITIALIZED:delete this.serverUrl,delete this.wellKnownCvsConfiguration,this.state=new Promise(((t,e)=>{t(C.NOT_INITIALIZED)}));break;case C.INITIALIZED:t===C.NOT_INITIALIZED?this.wellKnownCvsConfiguration=await this.request.get(this.serverUrl+"/.well-known/cvs-configuration",{responseStatus:200}).catch((t=>{throw new S("not-initialized",t)})):(await(this.request?.stop()),delete this.token,delete this.timestamp,delete this.keyManager,this.es?.close(),delete this.es);break;case C.LOGGED_IN:if(t===C.INITIALIZED){if(void 0===s||void 0===s.username||void 0===s.password)throw new S("invalid-credentials",new Error("you need credentials to log in"));await this._initKeyManager(s.username,s.password);const t={username:s.username,authkey:this.keyManager.authKey},e=this.wellKnownCvsConfiguration,i=await this.request.post(e.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=i.token,this.request.defaultUrl=e.vault_configuration.v2.vault_endpoint,this.timestamp=s.timestamp,this._initEventSourceClient().catch((t=>{throw t}))}case C.CONNECTED:}return e}async _initEventSourceClient(){if(void 0!==this.es)return;const t=this.wellKnownCvsConfiguration.vault_configuration[D].events_endpoint;this.es=new d(t,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(t=>{const e=JSON.parse(t.data);void 0===e.timestamp?this.emit("empty-storage"):e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp)),this.switchToState(C.CONNECTED).catch((t=>{throw t}))})),this.es.addEventListener("storage-updated",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.request.waitForOngoingRequestsToFinsh().finally((()=>{this.logout().catch((t=>{throw t})),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state.then((e=>{this.switchToState(L(e,t)).catch((t=>{console.error(t)}))})).catch((t=>{console.error(t)}))},this.es.onmessage=t=>{console.log(t)}}async _initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new I(t,e,s.vault_configuration[D].key_derivation),await this.keyManager.initialized}async init(t){const e=new URL(t),s=e.origin,i=e.pathname.endsWith("/")?e.pathname.slice(0,-1):e.pathname;if(this.serverUrl=s+i,await this.state>C.INITIALIZED)throw new S("error",new Error("to init the client, it should NOT be INITIALIZED"));return await this.switchToState(C.INITIALIZED),this.serverUrl}async login(t,e,s){const i=await this.state;if(i!==C.INITIALIZED&&i!==C.LOGGED_IN)throw new S("error",new Error("in order to login you should be in state INITIALIZED or LOGGED IN but not receiving SSE events"));await this.switchToState(C.CONNECTED,{username:t,password:e,timestamp:s})}async logout(){if(await this.state<C.LOGGED_IN)throw new S("error",new Error("in order to log out you should be in state LOGGED IN or CONNECTED"));await this.switchToState(C.INITIALIZED)}async close(){await this.switchToState(C.NOT_INITIALIZED)}async getRemoteStorageTimestamp(){if(await this.state<C.LOGGED_IN)throw new S("unauthorized","you must be logged in");const t=this.wellKnownCvsConfiguration;try{const e=await this.request.get(t.vault_configuration[D].timestamp_endpoint,{responseStatus:200,bearerToken:this.token});return(this.timestamp??0)<e.timestamp&&(this.timestamp=e.timestamp),e.timestamp}catch(t){throw await this.switchToState(L(await this.state,t)),t}}async getStorage(){if(await this.state<C.LOGGED_IN)throw new S("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=await this.request.get({responseStatus:200,bearerToken:this.token});if(e.timestamp<(this.timestamp??0))throw new S("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const s=this.keyManager.encKey.decrypt(Buffer.from(e.ciphertext,"base64url"));return this.timestamp=e.timestamp,this.emit("sync-stop",t,Date.now()),{storage:s,timestamp:e.timestamp}}catch(e){this.emit("sync-stop",t,Date.now());const s=L(await this.state,e);throw await this.switchToState(s),S.from(e)}}async updateStorage(t,e=!1){if(await this.state<C.LOGGED_IN)throw new S("unauthorized",void 0);const s=Date.now();this.emit("sync-start",s);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new S("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const i={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=await this.request.post(i,{responseStatus:201,bearerToken:this.token,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",s,Date.now()),a.timestamp}catch(t){throw this.emit("sync-stop",s,Date.now()),await this.switchToState(L(await this.state,t)),S.from(t)}}async deleteStorage(){if(await this.state<C.LOGGED_IN)throw new S("unauthorized",new Error("you must be logged in"));try{await this.request.stop(),await this.request.delete({bearerToken:this.token,responseStatus:204}),await this.logout()}catch(t){throw t instanceof S&&"unauthorized"===t.message&&await this.logout(),t}}async getRegistrationUrl(t,e,s,i){const a=this.wellKnownCvsConfiguration;R(e,i);const o=(await this.request.get(a.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk,r={did:s,username:t,authkey:await this.computeAuthKey(t,e)},n=await y(Buffer.from(JSON.stringify(r)),o,"A256GCM");return a.registration_configuration.registration_endpoint.replace("{data}",n)}async computeAuthKey(t,e){if(await this.state<C.INITIALIZED)throw new S("not-initialized",void 0);const s=this.wellKnownCvsConfiguration,i=new I(t,e,s.vault_configuration[D].key_derivation);return await i.initialized,i.authKey}}export{I as KeyManager,b as Request,v as SecretKey,C as VAULT_STATE,U as VaultClient,S as VaultError,q as checkErrorType,A as defaultPasswordStrengthOptions,E as deriveKey,R as passwordCheck};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
