import{fileURLToPath as t}from"url";import{randomBytes as e,createCipheriv as s,createDecipheriv as i,scrypt as a,createHash as o,createSecretKey as n}from"crypto";import{isMainThread as r,workerData as h,parentPort as u,Worker as l}from"worker_threads";import c,{AxiosError as d}from"axios";import w,{isNetworkOrIdempotentRequestError as p}from"axios-retry";import{EventEmitter as m}from"events";import g from"eventsource";import{config as f}from"dotenv";class y{key;alg;constructor(t,e){this.key=t,this.alg=e}encrypt(t){const i=e(16),a=s(this.alg,this.key,i),o=Buffer.concat([a.update(t),a.final()]),n=a.getAuthTag();return Buffer.concat([i,n,o])}decrypt(t){const e=t.subarray(0,16),s=t.subarray(16,32),a=t.subarray(32),o=i(this.alg,this.key,e);return o.setAuthTag(s),Buffer.concat([o.update(a),o.final()])}}if(!r&&"object"==typeof h&&"scrypt-thread"===h._name){const{passwordOrKey:t,opts:e}=h;(async function(t,e){const s={...e.alg_options,maxmem:256*e.alg_options.N*e.alg_options.r},i="string"==typeof t?t:t.export(),o=new Promise(((t,o)=>{a(i,e.salt,e.derived_key_length,s,((e,s)=>{null!==e&&o(e),t(s)}))}));return await o})(t,e).then((t=>{u?.postMessage(t)})).catch((t=>{throw t instanceof Error?t:new Error(t)}))}class v{_encKey;_authKey;username;derivationOptions;initialized;_initialized;constructor(t,e,s){this.username=t,this.derivationOptions=s,this._initialized=!1,this.initialized=this.init(e)}async init(t){const{master:e,auth:s,enc:i}=this.derivationOptions,a=I(e.salt_hashing_algorithm,e.salt_pattern,{username:this.username}),o=await T(t,{...e,salt:a}),n=I(s.salt_hashing_algorithm,s.salt_pattern,{username:this.username}),r=I(i.salt_hashing_algorithm,i.salt_pattern,{username:this.username}),[h,u]=await Promise.all([T(o,{...s,salt:n}),T(o,{...i,salt:r})]);this._authKey=h,this._encKey=new y(u,i.enc_algorithm),this._initialized=!0}get authKey(){if(!this._initialized)throw new Error("Unable to get authKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._authKey.export().toString("base64url")}get encKey(){if(!this._initialized)throw new Error("Unable to get encKey. KeyManager not initialized",{cause:"You may have forgotten to await keymanager.initialized or just to login"});return this._encKey}}function I(t,e,s){let i="";for(const t in s)i=e.replace(t,s[t]);return o(t).update(i).digest()}async function T(e,s){return await new Promise(((i,a)=>{const o={_name:"scrypt-thread",passwordOrKey:e,opts:s},r=new l(t(import.meta.url),{workerData:o});r.on("message",(t=>{i(n(t))})),r.on("error",(t=>{a(t)})),r.on("messageerror",(t=>{a(t)}))}))}class _ extends Error{data;message;constructor(t,e,s){super(t,s),this.name="VaultError",this.data=e,this.message=t}static from(t){if(t instanceof _)return t;if(t instanceof Object&&"Event"===t.constructor.name)return new _("sse-connection-error",t,{cause:"Likely issues connecting to the events endpoint of the cloud vault server"});if(t instanceof d){const e=t.response?.data;switch(e.name){case"no-storage":return new _("no-uploaded-storage",void 0);case"invalid-credentials":return new _("invalid-credentials",void 0);case"invalid-timestamp":return new _("invalid-timestamp",void 0);case"quota-exceeded":return new _("quota-exceeded",e.description);case"unauthorized":case"not-registered":return new _("unauthorized",void 0)}const s={request:{method:t.config?.method?.toLocaleUpperCase(),url:t.config?.url,headers:t.config?.headers,data:t.config?.data},response:{status:t.response?.status,headers:t.response?.headers,data:t.response?.data}};return new _("http-connection-error",s)}if(t instanceof Error){const e=new _("error",t,{cause:t.cause});return e.stack=t.stack,e}return new _("unknown",t)}}function E(t,e){return t.message===e}class R{axios;defaultCallOptions;defaultUrl;_stop;ongoingRequests;constructor(t){this._stop=!1,this.axios=this.getAxiosInstance(t?.retryOptions),this.defaultCallOptions=t?.defaultCallOptions,this.defaultUrl=t?.defaultUrl,this.ongoingRequests={}}getAxiosInstance(t){const e=c.create();return void 0!==t?.retries&&w(e,{retries:t.retries,retryDelay:()=>t.retryDelay,retryCondition:t=>{const e=p(t);return!this._stop&&e}}),e}async waitForOngoingRequestsToFinsh(t){const e=void 0!==t?t:this.defaultUrl;if(void 0===e)throw new _("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url oof the uploads you want to wait to finish"});if(void 0!==this.ongoingRequests[e])for(const t of this.ongoingRequests[e])try{await t}catch(t){}}async stop(){this._stop=!0;for(const t in this.ongoingRequests)await this.waitForOngoingRequestsToFinsh(t).catch();this._stop=!1}async request(t,e,s,i){const a={"Content-Type":"application/json"};if(void 0!==i?.bearerToken&&(a.Authorization="Bearer "+i.bearerToken),this._stop)throw new _("http-request-canceled",{request:{method:t.toUpperCase(),url:e,headers:a,data:s}});!0===i?.sequential&&await this.waitForOngoingRequestsToFinsh(e).catch(),this.ongoingRequests[e]=[];const o="post"===t||"put"===t?this.axios[t](e,s,{headers:a}):this.axios[t](e,{headers:a}),n=this.ongoingRequests[e].push(o)-1,r=await o.catch((t=>{throw _.from(t)})),h=i?.beforeRequestFinish;if(void 0!==h&&await h(r.data),n===this.ongoingRequests[e].length-1)this.ongoingRequests[e].pop();else{let t=n;do{delete this.ongoingRequests[e][n],t--}while(void 0===this.ongoingRequests[e][t])}if(0===this.ongoingRequests[e].length&&delete this.ongoingRequests[e],void 0!==i?.responseStatus&&r.status!==i.responseStatus)throw new _("validation",{description:`Received HTTP status ${r.status} does not match the expected one (${i.responseStatus})`},{cause:"HTTP status does not match the expected one"});return r.data}async delete(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new _("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("delete",s,void 0,i)}async get(t,e){const s="string"==typeof t?t:this.defaultUrl;if(void 0===s)throw new _("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});const i="string"!=typeof t?t:e;return await this.request("get",s,void 0,i)}async post(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new _("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("post",i,a,o)}async put(t,e,s){let i,a,o;if("string"==typeof t?(i=t,a=e,o=s):(i=this.defaultUrl,a=t,o=e),void 0===i)throw new _("error",new Error("no url or defaultUrl provided"),{cause:"you should create the Request object with a defaultUrl or pass the url to the HTTP method"});return await this.request("put",i,a,o)}}f();const C=(t,e)=>{let s=`Invalid value for ${t}. `;return void 0!==e&&(s+=`Allowed values are ${e} `),s},O=["0","false","FALSE"],q=["1","true","FALSE"],k=O.concat(q);!function(t,e){const s=void 0===(i=process.env[t])?"":i;var i;e=e??{};const a=e?.isBoolean??!1;if(a&&(e={...e,allowedValues:k}),""===s){if(void 0!==e.defaultValue)return e.defaultValue;if(void 0!==e.allowedValues&&!e.allowedValues.includes(""))throw new RangeError(C(t,e.allowedValues.join(", ")))}if(a&&q.includes(s))return!0;if(a&&O.includes(s))return!1;if(void 0!==e.allowedValues&&!e.allowedValues.includes(s))throw new RangeError(C(t,e.allowedValues.join(", ")))}("NODE_ENV",{defaultValue:"production",allowedValues:["production","development"]});const N="v"+"2.5.10".split(".")[0],D={NOT_INITIALIZED:0,INITIALIZED:1,LOGGED_IN:2,CONNECTED:3};function K(t,e){switch(_.from(e).message){case"invalid-credentials":case"unauthorized":return D.INITIALIZED;case"sse-connection-error":return t>=D.LOGGED_IN?D.LOGGED_IN:D.INITIALIZED;default:return t}}class S extends m{timestamp;token;name;opts;serverRootUrl;serverPrefix;serverUrl;initialized;wellKnownCvsConfigurationPromise;wellKnownCvsConfiguration;state;vaultRequest;keyManager;es;constructor(t,s){super({captureRejections:!0}),this.name=s?.name??e(16).toString("hex"),this.opts=s;const i=new URL(t);this.serverRootUrl=i.origin,this.serverPrefix=i.pathname.endsWith("/")?i.pathname.slice(0,-1):i.pathname,this.serverUrl=this.serverRootUrl+this.serverPrefix,this.state=new Promise(((t,e)=>{t(D.NOT_INITIALIZED)})),this.initialized=new Promise(((t,e)=>{this.state.then((s=>{this.switchToState(D.INITIALIZED).then((()=>{t()})).catch((t=>{e(t),this.state=new Promise(((t,e)=>{t(D.NOT_INITIALIZED)}))}))})).catch((t=>{e(t)}))}))}emit(t,...e){return super.emit(t,...e)}on(t,e){return super.on(t,e)}once(t,e){return super.once(t,e)}async switchToState(t,e){let s=await this.state;if(s===t)return s;if(t<D.NOT_INITIALIZED||t>D.CONNECTED)throw new Error("invalid state");for(;t-s>1;)s=await this.switchToState(s+1,e);for(;s-t>1;)s=await this.switchToState(s-1,e);return this.state=new Promise(((i,a)=>{this._switchToState(s,t,e).then((t=>{i(t),this.emit("state-changed",t)})).catch((t=>{console.log(t),i(s)}))})),await this.state}async _switchToState(t,e,s){switch(e){case D.NOT_INITIALIZED:this.wellKnownCvsConfigurationPromise?.stop(),await(this.wellKnownCvsConfigurationPromise?.promise.catch()),delete this.wellKnownCvsConfigurationPromise,delete this.wellKnownCvsConfiguration,this.state=new Promise(((t,e)=>{t(D.NOT_INITIALIZED)}));break;case D.INITIALIZED:t===D.NOT_INITIALIZED?(this.wellKnownCvsConfigurationPromise=S.getWellKnownCvsConfiguration(this.serverRootUrl+this.serverPrefix,{retries:28800,retryDelay:3e3}),this.wellKnownCvsConfiguration=await this.wellKnownCvsConfigurationPromise.promise.catch((t=>{throw new _("not-initialized",t)}))):(await(this.vaultRequest?.stop()),delete this.vaultRequest,delete this.token,delete this.timestamp,delete this.keyManager,this.es?.close(),delete this.es);break;case D.LOGGED_IN:if(t===D.INITIALIZED){if(void 0===s||void 0===s.username||void 0===s.password)throw new _("invalid-credentials",new Error("you need credentials to log in"));await this._initKeyManager(s.username,s.password);const t={username:s.username,authkey:this.keyManager.authKey},e=new R({retryOptions:this.opts?.defaultRetryOptions}),i=this.wellKnownCvsConfiguration,a=await e.post(i.vault_configuration.v2.token_endpoint,t,{responseStatus:200});this.token=a.token,this.vaultRequest=new R({retryOptions:this.opts?.defaultRetryOptions,defaultCallOptions:{bearerToken:this.token,sequential:!0},defaultUrl:i.vault_configuration.v2.vault_endpoint}),this.timestamp=s.timestamp}else this.es?.close(),delete this.es;break;case D.CONNECTED:await this._initEventSourceClient()}return e}async _initEventSourceClient(){return await new Promise(((t,e)=>{try{const e=this.wellKnownCvsConfiguration.vault_configuration[N].events_endpoint;this.es=new g(e,{headers:{Authorization:"Bearer "+this.token}}),this.es.addEventListener("connected",(e=>{const s=JSON.parse(e.data);void 0===s.timestamp?this.emit("empty-storage"):s.timestamp!==this.timestamp&&(this.timestamp=s.timestamp,this.emit("storage-updated",this.timestamp)),t()})),this.es.addEventListener("storage-updated",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{const e=JSON.parse(t.data);e.timestamp!==this.timestamp&&(this.timestamp=e.timestamp,this.emit("storage-updated",this.timestamp))})).catch((t=>{}))})),this.es.addEventListener("storage-deleted",(t=>{this.vaultRequest.waitForOngoingRequestsToFinsh().finally((()=>{this.logout().catch((t=>{throw t})),this.emit("storage-deleted")})).catch((t=>{}))})),this.es.onerror=t=>{this.state.then((e=>{this.switchToState(K(e,t)).catch((t=>{console.error(t)}))})).catch((t=>{console.error(t)}))}}catch(t){e(t)}}))}async _initKeyManager(t,e){const s=this.wellKnownCvsConfiguration;this.keyManager=new v(t,e,s.vault_configuration[N].key_derivation),await this.keyManager.initialized}async login(t,e,s){await this.initialized,await this.switchToState(D.CONNECTED,{username:t,password:e,timestamp:s})}async logout(){await this.switchToState(D.INITIALIZED)}async close(){await this.switchToState(D.NOT_INITIALIZED)}async getRemoteStorageTimestamp(){if(await this.state!==D.LOGGED_IN)throw new _("unauthorized",new Error("you must be logged in"));const t=this.wellKnownCvsConfiguration;try{await this.vaultRequest.waitForOngoingRequestsToFinsh();const e=new R({retryOptions:this.opts?.defaultRetryOptions}),s=await e.get(t.vault_configuration[N].timestamp_endpoint,{bearerToken:this.token,responseStatus:200});return(this.timestamp??0)<s.timestamp&&(this.timestamp=s.timestamp),s.timestamp}catch(t){throw await this.switchToState(K(await this.state,t)),t}}async getStorage(){if(await this.state<D.LOGGED_IN)throw new _("unauthorized",void 0);const t=Date.now();this.emit("sync-start",t);try{const e=this.vaultRequest;await e.waitForOngoingRequestsToFinsh();const s=await e.get({bearerToken:this.token,responseStatus:200});if(s.timestamp<(this.timestamp??0))throw new _("validation",{description:"WEIRD!!! Received timestamp is older than the one received in previous events"});const i=this.keyManager.encKey.decrypt(Buffer.from(s.ciphertext,"base64url"));return this.timestamp=s.timestamp,this.emit("sync-stop",t,Date.now()),{storage:i,timestamp:s.timestamp}}catch(e){throw this.emit("sync-stop",t,Date.now()),await this.switchToState(K(await this.state,e)),_.from(e)}}async updateStorage(t,e=!1,s){if(await this.state<D.LOGGED_IN)throw new _("unauthorized",void 0);const i=Date.now();this.emit("sync-start",i);try{if(e){const e=await this.getRemoteStorageTimestamp();t.timestamp=null!==e?e:void 0}if(void 0!==this.timestamp&&(t.timestamp??0)<this.timestamp)throw new _("conflict",{localTimestamp:t.timestamp,remoteTimestamp:this.timestamp});const s={ciphertext:this.keyManager.encKey.encrypt(t.storage).toString("base64url"),timestamp:t.timestamp},a=this.vaultRequest,o=await a.post(s,{bearerToken:this.token,responseStatus:201,beforeRequestFinish:async t=>{this.timestamp=t.timestamp}});return this.emit("sync-stop",i,Date.now()),o.timestamp}catch(t){throw this.emit("sync-stop",i,Date.now()),await this.switchToState(K(await this.state,t)),_.from(t)}}async deleteStorage(){if(await this.state<D.LOGGED_IN)throw new _("unauthorized",new Error("you must be logged in"));try{const t=this.vaultRequest;await t.stop(),await t.delete({bearerToken:this.token,responseStatus:204}),await this.logout()}catch(t){throw t instanceof _&&"unauthorized"===t.message&&await this.logout(),t}}async getServerPublicKey(){await this.initialized.catch((t=>{throw new _("unknown",t)}));if(await this.state===D.NOT_INITIALIZED)throw new _("not-initialized",void 0);const t=this.wellKnownCvsConfiguration,e=new R({retryOptions:this.opts?.defaultRetryOptions});return(await e.get(t.registration_configuration.public_jwk_endpoint,{responseStatus:200})).jwk}static getWellKnownCvsConfiguration(t,e){const s=new R({retryOptions:e});return{stop:async()=>await s.stop(),promise:s.get(t+"/.well-known/cvs-configuration",{responseStatus:200})}}static async computeAuthKey(t,e,s,i){const a=S.getWellKnownCvsConfiguration(t,i),o=await a.promise,n=new v(e,s,o.vault_configuration[N].key_derivation);return await n.initialized,n.authKey}}export{v as KeyManager,R as Request,y as SecretKey,D as VAULT_STATE,S as VaultClient,_ as VaultError,E as checkErrorType,T as deriveKey};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
