class t{constructor(t){this.api=t}async list(t){return await this.api.executeQuery({path:"/identities",method:"GET"},void 0,t,void 0)}async select(t){return await this.api.executeQuery({path:"/identities/select",method:"GET"},void 0,t,void 0)}async create(t){return await this.api.executeQuery({path:"/identities",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,t)}async sign(t,e){return await this.api.executeQuery({path:"/identities/{did}/sign",method:"POST",headers:{"Content-Type":"application/json"}},t,void 0,e)}async info(t){return await this.api.executeQuery({path:"/identities/{did}/info",method:"GET"},t,void 0,void 0)}async deployTransaction(t,e){return await this.api.executeQuery({path:"/identities/{did}/deploy-tx",method:"POST"},t,void 0,e)}}class e{constructor(t){this.api=t}async list(){return await this.api.executeQuery({path:"/resources",method:"GET"},void 0,void 0,void 0)}async create(t){return await this.api.executeQuery({path:"/resources",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,t)}}class i{constructor(t){this.api=t}async disclose(t){return await this.api.executeQuery({path:"/disclosure/{jwt}",method:"GET"},t,void 0,void 0)}}class s{constructor(t){this.api=t}async deploy(t){return await this.api.executeQuery({path:"/transaction/deploy",method:"POST"},void 0,void 0,t)}}class a{constructor(t){this.api=t}async verify(t){return await this.api.executeQuery({path:"/did-jwt/verify",method:"POST"},void 0,void 0,t)}}class o{constructor(t){this.api=t}async get(){return await this.api.executeQuery({path:"/providerinfo",method:"GET"},void 0,void 0,void 0)}}class n{constructor(n){this.session=n,this.identities=new t(this),this.transaction=new s(this),this.resources=new e(this),this.disclosure=new i(this),this.didJwt=new a(this),this.providerinfo=new o(this)}async executeQuery(t,e,i,s){let a,o="";void 0!==i&&(o="?"+Object.keys(i).map((t=>`${encodeURIComponent(t)}=${encodeURIComponent(i[t])}`)).join("&")),void 0!==s&&(a=JSON.stringify(s));let n=t.path+o;if(void 0!==e)for(const[t,i]of Object.entries(e))n=n.replace(`{${t}}`,i);const r=await this.session.send({url:n,init:{headers:t.headers,method:t.method,body:a}});return JSON.parse(r.body)}}export{n as WalletApi};
