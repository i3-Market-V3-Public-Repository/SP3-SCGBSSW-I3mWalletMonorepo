var walletProtocolApi=function(e){"use strict";class t{constructor(e){this.api=e}async list(e){const t=await this.api.executeQuery({path:"/identities",method:"GET"},void 0,e,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async select(e){const t=await this.api.executeQuery({path:"/identities/select",method:"GET"},void 0,e,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async create(e){const t=await this.api.executeQuery({path:"/identities",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async sign(e,t){const i=await this.api.executeQuery({path:"/identities/{did}/sign",method:"POST",headers:{"Content-Type":"application/json"}},e,void 0,t);if(void 0!==i.code)throw new Error(`${i.code}: ${i.message}`);return i}async info(e){const t=await this.api.executeQuery({path:"/identities/{did}/info",method:"GET"},e,void 0,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async deployTransaction(e,t){const i=await this.api.executeQuery({path:"/identities/{did}/deploy-tx",method:"POST"},e,void 0,t);if(void 0!==i.code)throw new Error(`${i.code}: ${i.message}`);return i}}class i{constructor(e){this.api=e}async list(e){const t=await this.api.executeQuery({path:"/resources",method:"GET"},void 0,e,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async create(e){const t=await this.api.executeQuery({path:"/resources",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class o{constructor(e){this.api=e}async disclose(e){const t=await this.api.executeQuery({path:"/disclosure/{jwt}",method:"GET"},e,void 0,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class s{constructor(e){this.api=e}async deploy(e){const t=await this.api.executeQuery({path:"/transaction/deploy",method:"POST"},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class r{constructor(e){this.api=e}async verify(e){const t=await this.api.executeQuery({path:"/did-jwt/verify",method:"POST"},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class a{constructor(e){this.api=e}async get(){const e=await this.api.executeQuery({path:"/providerinfo",method:"GET"},void 0,void 0,void 0);if(void 0!==e.code)throw new Error(`${e.code}: ${e.message}`);return e}}return e.WalletApi=class{constructor(e){this.session=e,this.identities=new t(this),this.transaction=new s(this),this.resources=new i(this),this.disclosure=new o(this),this.didJwt=new r(this),this.providerinfo=new a(this)}async executeQuery(e,t,i,o){let s,r="";void 0!==i&&(r="?"+Object.keys(i).map((e=>`${encodeURIComponent(e)}=${encodeURIComponent(i[e])}`)).join("&")),void 0!==o&&(s=JSON.stringify(o));let a=e.path+r;if(void 0!==t)for(const[e,i]of Object.entries(t))a=a.replace(`{${e}}`,i);const d=await this.session.send({url:a,init:{headers:e.headers,method:e.method,body:s}});return JSON.parse(d.body)}},Object.defineProperty(e,"__esModule",{value:!0}),e}({});
