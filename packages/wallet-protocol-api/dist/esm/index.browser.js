class IdentitiesApi {
    constructor(api) {
        this.api = api;
    }
    async list(queryParams) {
        return await this.api.executeQuery({
            path: '/identities',
            method: 'GET'
        }, undefined, queryParams, undefined);
    }
    async select(queryParams) {
        return await this.api.executeQuery({
            path: '/identities/select',
            method: 'GET'
        }, undefined, queryParams, undefined);
    }
    async create(body) {
        return await this.api.executeQuery({
            path: '/identities',
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        }, undefined, undefined, body);
    }
    async sign(pathParams, body) {
        return await this.api.executeQuery({
            path: '/identities/{did}/sign',
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        }, pathParams, undefined, body);
    }
    async info(pathParams) {
        return await this.api.executeQuery({
            path: '/identities/{did}/info',
            method: 'GET'
        }, pathParams, undefined, undefined);
    }
    async deployTransaction(pathParams, body) {
        return await this.api.executeQuery({
            path: '/identities/{did}/deploy-tx',
            method: 'POST'
        }, pathParams, undefined, body);
    }
}

class ResourcesApi {
    constructor(api) {
        this.api = api;
    }
    async list(options) {
        return await this.api.executeQuery({
            path: '/resources',
            method: 'GET'
        }, undefined, options, undefined);
    }
    async create(body) {
        return await this.api.executeQuery({
            path: '/resources',
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        }, undefined, undefined, body);
    }
}

class DisclosureApi {
    constructor(api) {
        this.api = api;
    }
    async disclose(pathParams) {
        return await this.api.executeQuery({
            path: '/disclosure/{jwt}',
            method: 'GET'
        }, pathParams, undefined, undefined);
    }
}

class TransactionApi {
    constructor(api) {
        this.api = api;
    }
    async deploy(body) {
        return await this.api.executeQuery({
            path: '/transaction/deploy',
            method: 'POST'
        }, undefined, undefined, body);
    }
}

class DidJwtApi {
    constructor(api) {
        this.api = api;
    }
    async verify(body) {
        return await this.api.executeQuery({
            path: '/did-jwt/verify',
            method: 'POST'
        }, undefined, undefined, body);
    }
}

class ProviderInfoApi {
    constructor(api) {
        this.api = api;
    }
    async get() {
        return await this.api.executeQuery({
            path: '/providerinfo',
            method: 'GET'
        }, undefined, undefined, undefined);
    }
}

class WalletApi {
    constructor(session) {
        this.session = session;
        this.identities = new IdentitiesApi(this);
        this.transaction = new TransactionApi(this);
        this.resources = new ResourcesApi(this);
        this.disclosure = new DisclosureApi(this);
        this.didJwt = new DidJwtApi(this);
        this.providerinfo = new ProviderInfoApi(this);
    }
    async executeQuery(api, pathParams, queryParams, bodyObject) {
        let queryParamsString = '';
        if (queryParams !== undefined) {
            queryParamsString = '?' + Object
                .keys(queryParams)
                .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryParams[key])}`)
                .join('&');
        }
        let body;
        if (bodyObject !== undefined) {
            body = JSON.stringify(bodyObject);
        }
        let url = api.path + queryParamsString;
        if (pathParams !== undefined) {
            for (const [key, value] of Object.entries(pathParams)) {
                url = url.replace(`{${key}}`, value);
            }
        }
        const resp = await this.session.send({
            url,
            init: {
                headers: api.headers,
                method: api.method,
                body
            }
        });
        return JSON.parse(resp.body);
    }
}

export { WalletApi };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL21vZGVscy9pZGVudGl0aWVzLnRzIiwiLi4vLi4vc3JjL3RzL21vZGVscy9yZXNvdXJjZXMudHMiLCIuLi8uLi9zcmMvdHMvbW9kZWxzL2Rpc2Nsb3N1cmUudHMiLCIuLi8uLi9zcmMvdHMvbW9kZWxzL3RyYW5zYWN0aW9uLnRzIiwiLi4vLi4vc3JjL3RzL21vZGVscy9kaWQtand0LnRzIiwiLi4vLi4vc3JjL3RzL21vZGVscy9wcm92aWRlcmluZm8udHMiLCIuLi8uLi9zcmMvdHMvYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiTUFJYSxhQUFhLENBQUE7QUFDeEIsSUFBQSxXQUFBLENBQXVCLEdBQWdCLEVBQUE7UUFBaEIsSUFBRyxDQUFBLEdBQUEsR0FBSCxHQUFHLENBQWE7S0FBSztJQUU1QyxNQUFNLElBQUksQ0FBRSxXQUFzRCxFQUFBO0FBQ2hFLFFBQUEsT0FBTyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO0FBQ2pDLFlBQUEsSUFBSSxFQUFFLGFBQWE7QUFDbkIsWUFBQSxNQUFNLEVBQUUsS0FBSztBQUNkLFNBQUEsRUFBRSxTQUFTLEVBQUUsV0FBcUIsRUFBRSxTQUFTLENBQUMsQ0FBQTtLQUNoRDtJQUVELE1BQU0sTUFBTSxDQUFFLFdBQXdELEVBQUE7QUFDcEUsUUFBQSxPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7QUFDakMsWUFBQSxJQUFJLEVBQUUsb0JBQW9CO0FBQzFCLFlBQUEsTUFBTSxFQUFFLEtBQUs7QUFDZCxTQUFBLEVBQUUsU0FBUyxFQUFFLFdBQXFCLEVBQUUsU0FBUyxDQUFDLENBQUE7S0FDaEQ7SUFFRCxNQUFNLE1BQU0sQ0FBRSxJQUE0QyxFQUFBO0FBQ3hELFFBQUEsT0FBTyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO0FBQ2pDLFlBQUEs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
