var walletProtocolApi=function(e){"use strict";class t extends Error{constructor(e,t,o){super(e),this.code=t,this.body=o}}class o{constructor(e){this.api=e}async list(e){const t=await this.api.executeQuery({path:"/identities",method:"GET"},void 0,e,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async select(e){const t=await this.api.executeQuery({path:"/identities/select",method:"GET"},void 0,e,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async create(e){const t=await this.api.executeQuery({path:"/identities",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async sign(e,t){const o=await this.api.executeQuery({path:"/identities/{did}/sign",method:"POST",headers:{"Content-Type":"application/json"}},e,void 0,t);if(void 0!==o.code)throw new Error(`${o.code}: ${o.message}`);return o}async info(e){const t=await this.api.executeQuery({path:"/identities/{did}/info",method:"GET"},e,void 0,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async deployTransaction(e,t){const o=await this.api.executeQuery({path:"/identities/{did}/deploy-tx",method:"POST"},e,void 0,t);if(void 0!==o.code)throw new Error(`${o.code}: ${o.message}`);return o}}class i{constructor(e){this.api=e}async list(e){const t=await this.api.executeQuery({path:"/resources",method:"GET"},void 0,e,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}async create(e){const t=await this.api.executeQuery({path:"/resources",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class s{constructor(e){this.api=e}async disclose(e){const t=await this.api.executeQuery({path:"/disclosure/{jwt}",method:"GET"},e,void 0,void 0);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class r{constructor(e){this.api=e}async deploy(e){const t=await this.api.executeQuery({path:"/transaction/deploy",method:"POST"},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class a{constructor(e){this.api=e}async verify(e){const t=await this.api.executeQuery({path:"/did-jwt/verify",method:"POST",headers:{"Content-Type":"application/json"}},void 0,void 0,e);if(void 0!==t.code)throw new Error(`${t.code}: ${t.message}`);return t}}class n{constructor(e){this.api=e}async get(){const e=await this.api.executeQuery({path:"/providerinfo",method:"GET"},void 0,void 0,void 0);if(void 0!==e.code)throw new Error(`${e.code}: ${e.message}`);return e}}return e.WalletApi=class{constructor(e){this.session=e,this.identities=new o(this),this.transaction=new r(this),this.resources=new i(this),this.disclosure=new s(this),this.didJwt=new a(this),this.providerinfo=new n(this)}async executeQuery(e,o,i,s){let r,a="";void 0!==i&&(a="?"+Object.keys(i).map((e=>`${encodeURIComponent(e)}=${encodeURIComponent(i[e])}`)).join("&")),void 0!==s&&(r=JSON.stringify(s));let n=e.path+a;if(void 0!==o)for(const[e,t]of Object.entries(o))n=n.replace(`{${e}}`,t);const d=await this.session.send({url:n,init:{headers:e.headers,method:e.method,body:r}}),c=JSON.parse(d.body);if(d.status>=300||d.status<200)throw new t(c.reason??"Unknown reason",d.status,c);return c}},e.WalletApiError=t,e}({});
