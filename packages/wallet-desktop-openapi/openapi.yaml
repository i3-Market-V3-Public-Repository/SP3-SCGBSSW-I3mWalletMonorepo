openapi: 3.0.2
info:
  version: '1.1.8'
  title: i3M Wallet API
  contact:
    name: Juan HernÃ¡ndez Serrano
    email: j.hernandez@upc.edu
  license:
    name: MIT
  description: >
    i3M-Wallet interface. i3M-Wallet will run as a microservice that will be
    called by the i3M-SDK. It is going to be developed as a desktop or mobile
    app.


    There will be a SW implemetation of all the funcionalities and all the
    i3M-Wallet providers, namely the Cloud Wallet and the HW Wallet, will
    replace some of them.


    i3m-wallet should support the use of:

    - *accounts*: two kinds of accounts:
      - identity: a public-private key pair with some contextual information
      - secrets: cryptographic keys for symmetric crypto with some contextual information
    - *vault*: a secure storage for arbitrary objects
tags:
  - name: accounts
    description: >
      A wallet account refers to a cryptographic [JSON Web Key
      (JWK)](https://tools.ietf.org/html/rfc7517) with some addtional context,
      e.g. a name, comments, associated blockchain address.


      An account can be of two types:

      - `identity`, made of a public-private key pair (owned account) or just a
      public key (external account) and some contextual information.

        Identities are mainly used to prove ownership of digital resources (such as DIDs, verifiable claims, or cryptotokens) in i3M. Main funcionalities of an identity account are:
        - `sign`: sign an arbitrary object using the account's private key. Implementation SHOULD require explicit user consent.
        - `verify`: verify a signature using the account's public key.
        - `encrypt`: encrypt an arbitrary object using the account's public key.
        - `decrypt`: decrypt a ciphertext using the account's private key. Implementation SHOULD require explicit user consent.

      - `secret`, made of a cryptographic symmetric key that will be protected
      and operated by the wallet. 

        Secrets are mainly used in i3-market for securely managing symmetric keys that have been used to encrypt arbitrary data stored elsewhere. Main funcionalities of a `secret` account are:
        - `sign`: generate a MAC of an arbitrary object using the account's secret key. Implementation SHOULD require explicit user consent.
        - `verify`: verify a signature (MAC) using the account's secret key. Implementation SHOULD require explicit user consent.
        - `encrypt`: sign an arbitrary object using the account's secret key. Implementation SHOULD require explicit user consent.
        - `decrypt`: decrypt a ciphertext using the account's secret key. Implementation SHOULD require explicit user consent.

      A wallet SHOULD BE able to hold multiple accounts.
  - name: identities
    description: |
      Endpoints to manage identities (DIDs).
  - name: selectiveDisclosure
    description: >
      Besides identities and secrets, the wallet MAY securely store arbitrary
      resources in a secure vault, which may be selectively disclosed upon
      request.
paths:
  /identities:
    get:
      summary: List all DIDs
      operationId: identityList
      x-eov-operation-handler: identities
      tags:
        - identities
      parameters:
        - in: query
          name: alias
          schema:
            type: string
            description: An alias for the identity
      responses:
        '200':
          description: An array of identities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityListInput'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      summary: Create an account
      operationId: identityCreate
      x-eov-operation-handler: identities
      tags:
        - identities
      requestBody:
        description: Create a DID.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityCreateInput'
      responses:
        '201':
          description: the ID and type of the created account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityCreateOutput'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /identities/select:
    get:
      summary: Gets an identity selected by the user.
      operationId: identitySelect
      x-eov-operation-handler: identities
      tags:
        - identities
      parameters:
        - in: query
          name: reason
          schema:
            type: string
            description: Message to show to the user with the reason to pick an identity
      responses:
        '200':
          description: Selected identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentitySelectOutput'
  /identities/{did}/sign:
    post:
      summary: Signs a message
      operationId: identitySign
      x-eov-operation-handler: identities
      tags:
        - identities
      parameters:
        - in: path
          name: did
          schema:
            $ref: '#/components/schemas/did'
          required: true
      requestBody:
        description: Data to sign.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInput'
      responses:
        '200':
          description: Signed data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutput'
  /identities/{did}/info:
    get:
      summary: Gets extra information of an identity.
      operationId: identityInfo
      x-eov-operation-handler: identities
      tags:
        - identities
      parameters:
        - in: path
          name: did
          schema:
            $ref: '#/components/schemas/did'
          required: true
      responses:
        '200':
          description: Identity data
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /identities/{did}/deploy-tx:
    post:
      summary: Signs and deploys a transaction
      operationId: identityDeployTransaction
      x-eov-operation-handler: identities
      tags:
        - identities
      parameters:
        - in: path
          name: did
          schema:
            $ref: '#/components/schemas/did'
          required: true
      requestBody:
        description: Transaction to sign and deploy
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Selected identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
  /resources:
    get:
      summary: List all resources
      operationId: resourceList
      x-eov-operation-handler: resources
      tags:
        - resources
      responses:
        '200':
          description: >-
            A paged array of accounts. Only the props requested will be
            returned. Security policies may prevent some props from being
            returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListOutput'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      summary: Create a resource
      operationId: resourceCreate
      x-eov-operation-handler: resources
      tags:
        - resources
      requestBody:
        description: Create a resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: the ID and type of the created account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /disclosure/{jwt}:
    get:
      summary: Request selective disclosure of resources
      operationId: selectiveDisclosure
      x-eov-operation-handler: disclosure
      tags:
        - selectiveDisclosure
      parameters:
        - in: path
          name: jwt
          schema:
            type: string
            pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
          required: true
          description: "A JWT containing a selective disclosure object. The payload MUST contain:\n\n```json\n{\n  \"type\": \"selectiveDisclosureReq\", // MUST be selectiveDisclosureReq\n  \"iss\": \"did:\", // the DID of the OIDC Provider\n  \"aud\": \"\", // DID of the OIDC RP\n  \"iat\": 4354535,\t// The time of issuance\n  \"exp\": 3452345, // [OPTIONAL] Expiration time of JWT\n  callback: \"https://...\", // Callback URL for returning the response to a request\n  resources: [\n    { \"id\": \"id\", \"mandatory\": true, \"iss\": [ { did: or url:} ], \"reason\": \"\" }\n  ]\n}\n```\n"
      responses:
        '200':
          description: Disclosure ok (mandatory claims provided)
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /transaction/deploy:
    post:
      summary: Deploy a signed transaction
      operationId: transactionDeploy
      x-eov-operation-handler: transaction
      tags:
        - transaction
      requestBody:
        description: Create a resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedTransaction'
      responses:
        '200':
          description: Deployment OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /did-jwt/verify:
    post:
      summary: Verify a JWT resolving the public key from the signer DID
      operationId: didJwtVerify
      x-eov-operation-handler: didJwt
      tags:
        - did-jwt
      requestBody:
        description: >-
          Creation option. Whether an 'identity' or a 'secret', an optional name
          and comment, and addtional wallet-provider's specific options
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                jwt:
                  type: string
                  pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
                expectedPayloadClaims:
                  type: object
                  description: >
                    The expected values of the proof's payload claims. An
                    expected value of '' can be use to just check that the claim
                    is in the payload. An example could be:


                    ```json

                    {
                      iss: 'orig',
                      exchange: {
                        id: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',
                        orig: '{"kty":"EC","x":"rPMP39e-o8cU6m4WL8_qd2wxo-nBTjWXZtPGBiiGCTY","y":"0uvxGEebFDxKOHYUlHREzq4mRULuZvQ6LB2I11yE1E0","crv":"P-256"}', // Public key in JSON.stringify(JWK) of the block origin (sender)
                        dest: '{"kty":"EC","x":"qf_mNdy57ia1vAq5QLpTPxJUCRhS2003-gL0nLcbXoA","y":"H_8YwSCKJhDbZv17YEgDfAiKTaQ8x0jpLYCC2myxAeY","crv":"P-256"}', // Public key in JSON.stringify(JWK) of the block destination (receiver)
                        hash_alg: 'SHA-256',
                        cipherblock_dgst: 'IBUIstf98_afbiuh7UaifkasytNih7as-Jah61ls9UI', // hash of the cipherblock in base64url with no padding
                        block_commitment: '', // hash of the plaintext block in base64url with no padding
                        secret_commitment: '' // hash of the secret that can be used to decrypt the block in base64url with no padding
                      }
                    }

                    ```
              required:
                - jwt
      responses:
        '200':
          description: >
            A verification object. If `verification` equals `success` all
            checkings have passed; if it is `failed`, you can access the error
            message in `Ã¨rror`. In either case, the decoded JWT payload can be
            accessed in `payload`.


            Example of success:


            ```json

            {
              "verification": "success",
              "payload": {
                "iss": "did:ethr:i3m:0x02d846307c9fd53106eb20db5a774c4b71f25c59c7bc423990f942e3fdb02c5898",
                "iat": 1665138018,
                "action": "buy 1457adf6"
              }
            }

            ```


            Example of failure:


            ```json

            {
              "verification": "failed",
              "error": "invalid_jwt: JWT iss is required"
              "payload": {
                "iss": "did:ethr:i3m:0x02d846307c9fd53106eb20db5a774c4b71f25c59c7bc423990f942e3fdb02c5898",
                "iat": 1665138018,
                "action": "buy 1457adf6"
              }
            }

            ```
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    IdentitySelectOutput:
      title: IdentitySelectOutput
      type: object
      properties:
        did:
          $ref: '#/components/schemas/did'
      required:
        - did
    SignInput:
      title: SignInput
      oneOf:
        - $ref: '#/components/schemas/SignTransaction'
        - $ref: '#/components/schemas/SignRaw'
        - $ref: '#/components/schemas/SignJWT'
    SignRaw:
      title: SignRaw
      type: object
      properties:
        type:
          enum:
            - Raw
        data:
          type: object
          properties:
            payload:
              description: Base64Url encoded data to sign
              type: string
              pattern: ^[A-Za-z0-9_-]+$
          required:
            - payload
    SignTransaction:
      title: SignTransaction
      type: object
      properties:
        type:
          enum:
            - Transaction
        data:
          $ref: '#/components/schemas/Transaction'
    SignJWT:
      title: SignJWT
      type: object
      properties:
        type:
          enum:
            - JWT
        data:
          type: object
          properties:
            header:
              description: >-
                header fields to be added to the JWS header. "alg" and "kid"
                will be ignored since they are automatically added by the
                wallet.
              type: object
            payload:
              description: >-
                A JSON object to be signed by the wallet. It will become the
                payload of the generated JWS
              type: object
          required:
            - payload
    Transaction:
      title: Transaction
      type: object
      additionalProperties: true
      properties:
        from:
          type: string
        to:
          type: string
        nonce:
          type: number
    SignOutput:
      title: SignOutput
      type: object
      properties:
        signature:
          type: string
      required:
        - signature
    Receipt:
      title: Receipt
      type: object
      properties:
        receipt:
          type: string
      required:
        - receipt
    SignTypes:
      title: SignTypes
      type: string
      enum:
        - Transaction
        - Raw
        - JWT
    IdentityListInput:
      title: IdentityListInput
      description: A list of DIDs
      type: array
      items:
        type: object
        properties:
          did:
            $ref: '#/components/schemas/did'
        required:
          - did
    IdentityCreateInput:
      title: IdentityCreateInput
      description: >
        Besides the here defined options, provider specific properties should be
        added here if necessary, e.g. "path" for BIP21 wallets, or the key
        algorithm (if the wallet supports multiple algorithm).
      type: object
      properties:
        alias:
          type: string
      additionalProperties: true
    IdentityCreateOutput:
      title: IdentityCreateOutput
      description: |
        It returns the account id and type
      type: object
      properties:
        did:
          $ref: '#/components/schemas/did'
      additionalProperties: true
      required:
        - did
    ResourceListOutput:
      title: ResourceListOutput
      description: A list of resources
      type: array
      items:
        $ref: '#/components/schemas/ResourceId'
    Resource:
      title: Resource
      anyOf:
        - $ref: '#/components/schemas/VerifiableCredential'
    VerifiableCredential:
      title: VerifiableCredential
      type: object
      properties:
        type:
          enum:
            - VerifiableCredential
        identity:
          $ref: '#/components/schemas/did'
        resource:
          type: object
          properties:
            '@context':
              type: array
              items:
                type: string
              example:
                - https://www.w3.org/2018/credentials/v1
            id:
              type: string
              example: http://example.edu/credentials/1872
            type:
              type: array
              items:
                type: string
              example:
                - VerifiableCredential
            issuer:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/did'
              additionalProperties: true
              required:
                - id
            issuanceDate:
              type: string
              format: date-time
              example: '2021-06-10T19:07:28.000Z'
            credentialSubject:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/did'
              required:
                - id
              additionalProperties: true
            proof:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - JwtProof2020
              required:
                - type
              additionalProperties: true
          additionalProperties: true
          required:
            - '@context'
            - type
            - issuer
            - issuanceDate
            - credentialSubject
            - proof
      required:
        - type
        - resource
    ResourceId:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    ResourceType:
      type: string
      enum:
        - VerifiableCredential
    SignedTransaction:
      title: SignedTransaction
      description: A list of resources
      type: object
      properties:
        transaction:
          type: string
          pattern: ^0x(?:[A-Fa-f0-9])+$
    did:
      title: DID
      type: string
      example: >-
        did:ethr:rinkeby:0x031bee96cfae8bad99ea0dd3d08d1a3296084f894e9ddfe1ffe141133e81ac5863
    ApiError:
      type: object
      title: Error
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
