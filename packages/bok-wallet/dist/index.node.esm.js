import e from"crypto";import{ethers as t}from"ethers";import{v4 as i}from"uuid";import*as s from"uint8arrays";import{WalletError as r,parseHex as a,BaseWallet as o}from"@i3m/base-wallet";class n extends r{}class y{constructor(e,t){this.dialog=e,this.store=t}async import(e){const s=i(),r=t.utils.computePublicKey(a(e)),o={kid:s,type:"Secp256k1",publicKeyHex:a(r,!1),privateKeyHex:a(e,!1)},n=await this.store.get("keys");return await this.store.set("keys",{...n,[s]:o}),o}async createAccountKeyPair(){const t=e.randomBytes(32).toString("hex");return(await this.import(t)).kid}async getPublicKey(e){const i=await this.store.get("keys");if(void 0===i)throw new n("No keys initialized yet");return t.utils.arrayify(a(i[e].publicKeyHex))}async signDigest(e,i){const r=await this.store.get("keys");if(void 0===r)throw new n("No keys initialized yet");const o=a(r[e].privateKeyHex),y=new t.utils.SigningKey(o);if(!0!==await this.dialog.confirmation({title:"Sign?",message:`Are you sure you want to sign using key <code>${o}</code> the following hex data: \n<code>${t.utils.hexlify(i)}</code>`,acceptMsg:"Sign",rejectMsg:"Reject"}))throw new n("Signature rejected by user");const c=y.signDigest(i),l=t.utils.joinSignature(c);return s.fromString(l.substring(2),"base16")}async delete(e){return await this.store.delete(`keys.${e}`),!0}async wipe(){}}class c extends o{async importDid(e){if(void 0===e&&(e=await this.dialog.form({title:"Import DID",descriptors:{alias:{type:"text",message:"Set an alias for your DID"},privateKey:{type:"text",message:"Paste the private key"}},order:["alias","privateKey"]})),void 0===e)return;const i=this.getKeyWallet(),s=await i.import(a(e.privateKey)),r=t.utils.computePublicKey(a(s.publicKeyHex),!0);await this.veramo.agent.didManagerImport({did:`${this.provider}:${r}`,alias:e.alias,controllerKeyId:s.kid,keys:[{...s,type:"Secp256k1",kms:this.veramo.defaultKms}],provider:this.provider,services:[]})}}const l=async e=>{const t=new y(e.dialog,e.store);return new c({...e,keyWallet:t})};export{c as BokWallet,l as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9lcnJvcnMudHMiLCIuLi9zcmMvdHMvYm9rLWtleS13YWxsZXQudHMiLCIuLi9zcmMvdHMvYm9rLXdhbGxldC50cyIsIi4uL3NyYy90cy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsiQm9rV2FsbGV0RXJyb3IiLCJXYWxsZXRFcnJvciIsIkJva0tleVdhbGxldCIsImNvbnN0cnVjdG9yIiwiZGlhbG9nIiwic3RvcmUiLCJ0aGlzIiwiYXN5bmMiLCJwcml2YXRlS2V5SGV4Iiwia2lkIiwidXVpZCIsInB1YmxpY0tleUhleCIsImV0aGVycyIsInV0aWxzIiwiY29tcHV0ZVB1YmxpY0tleSIsInBhcnNlSGV4Iiwia2V5IiwidHlwZSIsImtleXMiLCJnZXQiLCJzZXQiLCJjcnlwdG8iLCJyYW5kb21CeXRlcyIsInRvU3RyaW5nIiwiaW1wb3J0IiwidW5kZWZpbmVkIiwiYXJyYXlpZnkiLCJtZXNzYWdlRGlnZXN0Iiwic2lnbmluZ0tleSIsIlNpZ25pbmdLZXkiLCJjb25maXJtYXRpb24iLCJ0aXRsZSIsIm1lc3NhZ2UiLCJoZXhsaWZ5IiwiYWNjZXB0TXNnIiwicmVqZWN0TXNnIiwic2lnbmF0dXJlIiwic2lnbkRpZ2VzdCIsInNpZ25hdHVyZUhleCIsImpvaW5TaWduYXR1cmUiLCJ1OGEiLCJmcm9tU3RyaW5nIiwic3Vic3RyaW5nIiwiZGVsZXRlIiwiQm9rV2FsbGV0IiwiQmFzZVdhbGxldCIsImltcG9ydEluZm8iLCJmb3JtIiwiZGVzY3JpcHRvcnMiLCJhbGlhcyIsInByaXZhdGVLZXkiLCJvcmRlciIsImtleVdhbGxldCIsImdldEtleVdhbGxldCIsImNvbXByZXNzZWRQdWJsaWNLZXkiLCJ2ZXJhbW8iLCJhZ2VudCIsImRpZE1hbmFnZXJJbXBvcnQiLCJkaWQiLCJwcm92aWRlciIsImNvbnRyb2xsZXJLZXlJZCIsImttcyIsImRlZmF1bHRLbXMiLCJzZXJ2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
