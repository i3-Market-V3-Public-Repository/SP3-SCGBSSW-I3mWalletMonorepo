openapi: 3.0.3
info:
  title: i3M-Wallet Cloud-Vault Server API
  version: v2
  description: A secure encrypted backup on the cloud for the i3-MARKET wallet
  license:
    name: EUPL-1.2
    url: >-
      https://joinup.ec.europa.eu/sites/default/files/custom-page/attachment/2020-03/EUPL-1.2%20EN.txt
  contact:
    name: Juan HernÃ¡ndez Serrano
    email: j.hernandez@upc.edu
    url: https://github.com/juanelas
paths:
  /.well-known/cvs-configuration:
    get:
      summary: the well-known configuration of this Cloud Vault Server (CVS)
      tags:
        - Cloud-Vault-Server Discovery
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvsConfiguration'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/registration/public-jwk:
    get:
      summary: Get the current wallet cloud-vault's public key as a JWK
      tags:
        - Registration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - jwk
                properties:
                  jwk:
                    $ref: '#/components/schemas/JwkEcPublicKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/registration/register/{data}:
    get:
      summary: >-
        Endpoint where any non-previously registered user can register to enable
        the cloud vault for the i3M-Wallet.
      tags:
        - Registration
      parameters:
        - name: data
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/RegistrationData'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: user already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorAlreadyRegistered'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/registration/deregister:
    get:
      summary: >-
        Endpoint where users logged in with valid credentials can deregister
        their registered username and associated storage. The cloud vault for
        that identity (DID) will be cleared, and new registration would be
        needed to use it again
      tags:
        - Registration
      responses:
        '204':
          description: Vault for logged in identity has been cleared
        '404':
          description: >-
            the identity requesting to delete her/his vault has not previously
            registered to have one
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotRegistered'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/vault/token:
    post:
      summary: >
        The endpoint to get a valid bearer token to access the vault. Valid
        credentials (`username`, `authkey`) must be provided.
      tags:
        - Cloud Vault
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
      responses:
        '200':
          description: returns a bearer token that can be used to access this user's vault
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '404':
          description: invalid username and/or authkey
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidCredentials'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/vault/events:
    get:
      summary: >
        A notification channel using Server-Sent Events for vault changes.
        Everytime there is a change the timestamp of the change is broadcasted
        to all clients authenticated with the same user that updated it.

        This is here just for documenting the Server-Sent Events (SSE) endpoint.
        It cannot be tested nor connected with automated tooling since it is NOT
        SUPPORTED in OpenAPI 3.0
      tags:
        - Cloud Vault
      security:
        - bearerAuth: []
      responses:
        '200':
          description: >
            Every time the encrypted storage is updated all subscribed clients
            receive a notification such as the following:

            `data: {"timestamp":1674119447057}`

            with `timestamp` (in milliseconds elapsed since the epoch) referring
            to the exact time the latest storage was registered in the cloud
            vault.
          x-produces:
            - text/event-stream
          headers:
            Content-Type:
              schema:
                type: string
                enum:
                  - text/event-stream
        '401':
          description: missing, invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/vault/timestamp:
    get:
      summary: |
        Get the timestamp when latest storage was uploaded to the cloud vault
      tags:
        - Cloud Vault
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamp'
        '401':
          description: missing, invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: no cloud storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNoStorage'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v2/vault:
    get:
      summary: |
        Get the latest storage in vault
      tags:
        - Cloud Vault
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EncryptedStorage'
                  - required:
                      - ciphertext
                      - timestamp
        '401':
          description: missing, invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: no cloud storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNoStorage'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      summary: |
        Delete all data stored in the cloud vault
      tags:
        - Cloud Vault
      security:
        - bearerAuth: []
      responses:
        '204':
          description: data deleted
        '401':
          description: missing, invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: username not registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotRegistered'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      summary: |
        Sets/updates encrypted storage in cloud vault
      tags:
        - Cloud Vault
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptedStorage'
      responses:
        '201':
          description: >-
            returns the timestamp when the new encrypted storage has been
            registered in the cloud vault
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamp'
        '400':
          description: error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorQuotaExceeded'
                  - $ref: '#/components/schemas/ErrorNotRegistered'
                  - $ref: '#/components/schemas/ApiError'
        '401':
          description: missing, invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: id_token
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CvsConfiguration:
      type: object
      title: Cloud-Vault-Server Well-Known Configuration
      required:
        - name
        - registration_configuration
        - vault_configuration
      properties:
        name:
          type: string
        description:
          type: string
        registration_configuration:
          $ref: '#/components/schemas/RegistrationConfiguration'
        vault_configuration:
          type: object
          required:
            - v2
          properties:
            v2:
              $ref: '#/components/schemas/VaultConfiguration'
          additionalProperties:
            $ref: '#/components/schemas/VaultConfiguration'
    RegistrationConfiguration:
      type: object
      title: Registration Endpoints
      required:
        - public_jwk_endpoint
        - registration_endpoint
        - deregistration_endpoint
      properties:
        public_jwk_endpoint:
          type: string
          example: /api/v2/registration/public-jwk
        registration_endpoint:
          type: string
          example: /api/v2/registration/register/{data}
          description: >
            Endpoint for registering a new client. The endpoint requires
            authentication with valid i3-MARKET credentials.


            {data} refers to a compact JWE encrypted with this server's public
            key with the following payload:


            ```json

            {
              did: string
              username: string
              authkey: string
            }

            ```


            - `did` is the did of the user. The required authorization forces
            the user to prove that is the owner of this `did`

            - `username` is a unique username proposed by the client (it should
            be able to memorize it)

            - `authkey` is a secret securely derived from the user's password,
            so can be recovered if the user remembers the password. `authkey`
            will work as a standard password server side.
        deregistration_endpoint:
          type: string
          example: /api/v2/registration/deregister
    VaultConfiguration:
      type: object
      title: Vault Well-Known Configuration
      required:
        - id
        - version
        - vault_size
        - vault_endpoint
        - events_endpoint
        - timestamp_endpoint
        - token_endpoint
        - token_endpoint_auth_methods_supported
        - enc_algorithm
        - key_derivation
      properties:
        id:
          type: string
          description: a unique id for this server
        version:
          type: string
          description: the version of the API this configuration applies to
          example: v2
        vault_size:
          type: integer
          description: the upper limit for the length in bytes of the vault storage
        vault_endpoint:
          type: string
          description: the vault endpoint where to GET, POST or DELETE the storage
          example: /api/v2/vault
        events_endpoint:
          type: string
          description: >-
            endpoint where the server where to subscribe for storage-update
            Server-Sent Events (SSE)
          example: /api/v2/vault/events
        timestamp_endpoint:
          type: string
          description: >-
            where to get the timestamp (in milliseconds elapsed since the epoch)
            of the latest uploaded storage
          example: /api/v2/vault/timsestamp
        token_endpoint:
          type: string
          description: >-
            the path on this server where to get a valid bearer token for
            operating with the vault
          example: /api/v2/vault/token
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
            enum:
              - client_secret_post
              - client_secret_basic
              - client_secret_jwt
              - private_key_jwt
          example:
            - client_secret_post
        key_derivation:
          type: object
          required:
            - master
            - enc
            - auth
          properties:
            master:
              $ref: '#/components/schemas/KeyDerivationOptions'
            enc:
              allOf:
                - $ref: '#/components/schemas/KeyDerivationOptions'
                - type: object
                  required:
                    - enc_algorithm
                  properties:
                    enc_algorithm:
                      type: string
                      enum:
                        - aes-192-gcm
                        - aes-256-gcm
                      example: aes-256-gcm
            auth:
              $ref: '#/components/schemas/KeyDerivationOptions'
    ScryptOptions:
      type: object
      required:
        - 'N'
        - r
        - p
      properties:
        'N':
          type: integer
          description: CPU/memory cost parameter â Must be a power of 2 (e.g. 1024)
          example: 2097152
        r:
          type: integer
          description: >-
            blocksize parameter, which fine-tunes sequential memory read size
            and performance. (8 is commonly used)
        p:
          type: integer
          description: Parallelization parameter. (1 .. 232-1 * hLen/MFlen)
    KeyDerivationOptions:
      type: object
      required:
        - alg
        - derived_key_length
        - input
        - salt_pattern
        - salt_hashing_algorithm
        - alg_options
      properties:
        alg:
          type: string
          enum:
            - scrypt
          default: scrypt
        derived_key_length:
          type: integer
          description: Desired key length in bytes
        input:
          type: string
          enum:
            - password
            - master-key
          example: password
        salt_pattern:
          description: >
            Describes the salt pattern to use when deriving the key from a
            password. It is a UTF-8 string, where variables to replace wrapped
            in curly braces.


            The salt is a concatenation of key_name, server_id and username.


            The length is not important since the provided salt will be hashed
            before being used (see saltHashingAlgorithm)
          type: string
          example: master9u8tHv8_s-QsG8CxuAefhg{username}
        salt_hashing_algorithm:
          description: >
            Since salts are length contrained, and saltPattern creates salts
            with an arbitrary length, the input salt is hashed with the provided
            hash algorithm.
          type: string
          enum:
            - sha3-256
            - sha3-384
            - sha3-512
            - sha256
            - sha384
            - sha512
          example: sha3-512
        alg_options:
          oneOf:
            - $ref: '#/components/schemas/ScryptOptions'
    ApiError:
      type: object
      title: Error
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    ErrorUnauthorized:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          enum:
            - unauthorized
        description:
          type: string
    ErrorInvalidCredentials:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          enum:
            - invalid-credentials
        description:
          type: string
    ErrorAlreadyRegistered:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          enum:
            - already-registered
        description:
          type: string
    ErrorNotRegistered:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          enum:
            - not-registered
        description:
          type: string
    ErrorNoStorage:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          enum:
            - no-storage
        description:
          type: string
    ErrorQuotaExceeded:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          enum:
            - quota-exceeded
        description:
          type: string
    JwkEcPublicKey:
      type: object
      title: JWK Elliptic-Curve Public Key Object
      description: >
        A JWK Key Object representing a public key generated with Elliptic-Curve
        cryptography.
      required:
        - kty
        - alg
        - crv
        - x
        - 'y'
      properties:
        kty:
          type: string
          enum:
            - EC
          example: EC
        alg:
          type: string
          description: >
            The alg member identifies the cryptographic algorithm family used
            with the key.
          enum:
            - ES256
            - ES384
            - ES512
          example: ES256
        kid:
          type: string
          description: >
            The "kid" (key ID) parameter is used to match a specific key. This
            is used, for instance, to choose among a set of keys within a JWK
            Set during key rollover.  The structure of the "kid" value is
            unspecified.  When "kid" values are used within a JWK Set, different
            keys within the JWK Set SHOULD use distinct "kid" values.  (One
            example in which different keys might use the same "kid" value is if
            they have different "kty" (key type) values but are considered to be
            equivalent alternatives by the application using them.) The "kid"
            value is a case-sensitive string. When used with JWS or JWE, the
            "kid" value is used to match a JWS or JWE "kid" Header Parameter
            value.
        crv:
          type: string
          description: >
            The cryptographic curve used with the key. Values defined by this
            specification are P-256, P-384 and P-521. Additional "crv" values
            MAY be used, provided they are understood by implementations using
            that Elliptic Curve key. The "crv" value is case sensitive.
          enum:
            - P-256
            - P-384
            - P-521
          example: P-256
        x:
          type: string
          pattern: ^[A-Za-z0-9_-]+$
          description: >
            The "x" coordinate for the elliptic curve point. It is represented
            as the base64url encoding of the big endian representation of the
            coordinate. 
          example: 2Rwrw2sbff-EnjbRi5sSJ09FRKhBPO7SsCxRwfBCpx4
        'y':
          type: string
          pattern: ^[A-Za-z0-9_-]+$
          description: >
            The "y" coordinate for the elliptic curve point. It is represented
            as the base64url encoding of the big endian representation of the
            coordinate
          example: r-qUFiNmBZqr00pTyUZPPLsBsmEW8pH7_vtBVOPVsi0
    RegistrationData:
      type: string
      title: RegistrationData
      description: >
        A compact JWE encrypted with this server's public key with the following
        payload:


        ```json

        {
          did: string
          username: string
          authkey: string
        }

        ```


        - `did` is the did of the user. The required authorization forces the
        user to prove that is the owner of this `did`

        - `username` is a unique username proposed by the client (it should be
        able to memorize it)

        - `authkey` is a secret securely derived from the user's password, so
        can be recovered if the user remembers the password. `authkey` will work
        as a standard password server side.
      pattern: ^[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]*){4}$
    RegistrationResponse:
      type: object
      title: Registration Response
      description: |
        The registration response object.
      required:
        - status
        - username
      properties:
        status:
          type: string
          description: >-
            whether the proposed username has been registered or not (because
            another one was previously registered)
          enum:
            - created
            - already registered
        username:
          type: string
          description: >
            - `status === 'created'`: the registered username

            - `status === 'already registered'`: the username that was
            previously registered fot the same DID.
    AuthorizationRequest:
      type: object
      title: AuthorizationRequest
      description: >
        A set of registered username and authkey in order to get the server's
        token. `authkey` is a secret securely derived from the user's password,
        so can be recovered if the user remembers the password. `authkey` will
        work as a standard password server side.
      required:
        - username
        - authkey
      properties:
        username:
          type: string
          description: >
            is a unique identifier for this client (the end user should be able
            to memorize it)
          example: username
        authkey:
          type: string
          pattern: ^[a-zA-Z0-9_-]{43,86}$
          description: >
            is a secret securely derived from the user's password with base64url
            no padding, so it can be recovered if the user remembers the
            password. Key length is between 256 and 512 bits. `authkey` will
            work as a standard password server side.
          example: uvATmXpCml3YNqyQ-w3CtJfiCOkHIXo4uUAEj4oshGQ
    AuthToken:
      type: object
      title: AuthToken
      description: |
        A bearer token a client can use to access its vault
      required:
        - token
      properties:
        token:
          type: string
          description: |
            A bearer token a client can use to access its vault
    Timestamp:
      type: object
      title: Timestamp
      description: >
        A timestamp expressed in milliseconds elapsed since the epoch. The
        timestamp refers to the exact time the latest storage was registered in
        the cloud vault.
      required:
        - timestamp
      properties:
        timestamp:
          type: number
          description: >-
            A timestamp expressed in milliseconds elapsed since the epoch. The
            timestamp refers to the exact time the latest storage was registered
            in the cloud vault.
          example: 1674060143749
    EncryptedStorage:
      type: object
      title: Encrypted Storage
      description: >
        EncryptedStorage is the JSON obejct representing the storage of
        registered users in the cloud vault
      required:
        - ciphertext
      properties:
        ciphertext:
          type: string
          pattern: ^[a-zA-Z0-9_-]+$
          description: |
            The encrypted storage in base64url encoding
        timestamp:
          type: number
          description: >-
            A timestamp expressed in milliseconds elapsed since the epoch. The
            timestamp refers to the exact time the latest storage was registered
            in the cloud vault.
          example: 1674060143749
servers:
  - url: http://[::]:3000
