openapi: '3.0.3'
info:
  title: API Title
  version: '1.0'

paths:
  /_IGNORE_PATH:
    get:
      responses:
        '200':
          description: OK

components:
  schemas:
    CvsConfiguration:
      type: object
      title: Cloud-Vault-Server Well-Known Configuration
      required:
        - name
        - registration_configuration
        - vault_configuration
      properties:
        name:
          type: string
        description:
          type: string
        registration_configuration:
          $ref: '#/components/schemas/RegistrationConfiguration'
        vault_configuration:
          type: object
          required:
            - API_VERSION
          properties:
            API_VERSION:
              $ref: '#/components/schemas/VaultConfiguration'
          additionalProperties:
            $ref: '#/components/schemas/VaultConfiguration'

    RegistrationConfiguration:
      type: object
      title: Registration Endpoints
      required:
        - public_jwk_endpoint
        - registration_endpoint
      properties:
        public_jwk_endpoint: 
          type: string
          example: '/api/API_VERSION/registration/public-jwk'
        registration_endpoint: 
          type: string
          example: '/api/API_VERSION/registration/{data}'
          description: |
            Endpoint for registering a new client. The endpoint requires authentication with valid i3-MARKET credentials.
            
            {data} refers to a compact JWE encrypted with this server's public key with the following payload:

            ```json
            {
              did: string
              username: string
              authkey: string
            }
            ```
            
            - `did` is the did of the user. The required authorization forces the user to prove that is the owner of this `did`
            - `username` is a unique username proposed by the client (it should be able to memorize it)
            - `authkey` is a secret securely derived from the user's password, so can be recovered if the user remembers the password. `authkey` will work as a standard password server side.

    VaultConfiguration:
      type: object
      title: Vault Well-Known Configuration
      required:
        - id
        - version
        - vault_endpoint
        - events_endpoint
        - timestamp_endpoint
        - token_endpoint
        - token_endpoint_auth_methods_supported
        - enc_algorithm
        - key_derivation
      properties:
        id:
          type: string
          description: a unique id for this server
        version:
          type: string
          description: the version of the API this configuration applies to
          example: API_VERSION
        vault_endpoint:
          type: string
          description: the vault endpoint where to GET, POST or DELETE the storage
          example: '/api/API_VERSION/vault'
        events_endpoint:
          type: string
          description: endpoint where the server where to subscribe for storage-update Server-Sent Events (SSE)
          example: '/api/API_VERSION/vault/events'
        timestamp_endpoint:
          type: string
          description: where to get the timestamp (in milliseconds elapsed since the epoch) of the latest uploaded storage
          example: '/api/API_VERSION/vault/timsestamp'
        token_endpoint:
          type: string
          description: the path on this server where to get a valid bearer token for operating with the vault
          example: '/api/API_VERSION/vault/token'
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
            enum:
              - client_secret_post
              - client_secret_basic
              - client_secret_jwt
              - private_key_jwt
          example: ['client_secret_post']
        key_derivation:
          type: object
          required:
            - master
            - enc
            - auth
          properties:
            master:
              $ref: '#/components/schemas/KeyDerivationOptions'
            enc:
              allOf:
                - $ref: '#/components/schemas/KeyDerivationOptions'
                - type: object
                  required:
                    - enc_algorithm
                  properties:
                    enc_algorithm:
                      type: string
                      enum:
                        - aes-192-gcm
                        - aes-256-gcm
                      example: aes-256-gcm
            auth:
              $ref: '#/components/schemas/KeyDerivationOptions'

    ScryptOptions:
      type: object
      required:
        - N
        - r
        - p
      properties:
        N:
          type: integer
          description: CPU/memory cost parameter â€“ Must be a power of 2 (e.g. 1024)
          example: 2097152
        r:
          type: integer
          description: blocksize parameter, which fine-tunes sequential memory read size and performance. (8 is commonly used)
        p:
          type: integer
          description: Parallelization parameter. (1 .. 232-1 * hLen/MFlen)
    
    KeyDerivationOptions:
      type: object
      required:
        - alg
        - derived_key_length
        - input
        - salt_pattern
        - salt_hashing_algorithm
        - alg_options
      properties:
        alg:
          type: string
          enum:
            - scrypt
          default: scrypt
        derived_key_length:
          type: integer
          description: Desired key length in bytes
        input:
          type: string
          enum:
            - password
            - master-key
          example: password
        salt_pattern:
          description: |
            Describes the salt pattern to use when deriving the key from a password. It is a UTF-8 string, where variables to replace wrapped in curly braces.
            
            The salt is a concatenation of key_name, server_id and username.
            
            The length is not important since the provided salt will be hashed before being used (see saltHashingAlgorithm)
          type: string
          example: master9u8tHv8_s-QsG8CxuAefhg{username}
        salt_hashing_algorithm:
          description: |
            Since salts are length contrained, and saltPattern creates salts with an arbitrary length, the input salt is hashed with the provided hash algorithm.
          type: string
          enum:
            - sha3-256
            - sha3-384
            - sha3-512
          example: sha3-512
        alg_options:
          oneOf:
            - $ref: '#/components/schemas/ScryptOptions'
