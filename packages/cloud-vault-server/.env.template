# Set to production for production mode (default), or development for development. 
NODE_ENV=production

# Server ID. It is a unique identifier for this server. THIS IS MANDATORY and changes the way users' auth and encryption keys are derived. Therefore CHANGING IT IS A BREAKING CHANGE that would require major version update.
# You cam easily generate a new unique one with uuidgen
SERVER_ID=

# Server address and port.
# These are all optional. SERVER_ADDRESS defaults to the HOSTNAME variable, and SERVER_PORT to 3000, which are safe values when run in a container
#SERVER_ADDRESS=localhost
#SERVER_PORT=3000

# Server public URL. Since this is likely operating behind a reverse proxy, the public URI may introduce new prefixes. It is also necessary to know the exact paths for OIDC redirect-uris and any well-known configuration.
#SERVER_PLUBIC_URL=https://mybackplane.com/cvs

# CORS.
# If not set defaults to *
CORS_ACCESS_CONTROL_ALLOW_ORIGIN=
CORS_ACCESS_CONTROL_ALLOW_METHODS=GET,POST,DELETE,OPTIONS

# Database setup (mandatory fields)
DB_HOST=
DB_PORT=
DB_NAME=
DB_USER=
DB_PASSWORD=
# Set DB_RESET to true to reset the DB everytime you run the server. Defaults to false if not set.
DB_RESET=false
# DB_STORAGE_LIMIT defaults to 5242880 bytes, thar is 5Mbytes of binary storage. Since AES-GCM encryption has 16 bytes block, 16 bytes iv and 16 bytes auth tag, for 5Mbytes of binary storage, a we store a base64url-encoded string of the binary storage, we indeed need Math.ceil((Math.ceil(5*1024*1024/16)*16 + 16 + 16)/6)*8 = 6990552 characters
DB_STORAGE_LIMIT=5242880

# JWT setup. Set secret as 32 bytes hex with no 0x prefix. If not set, a new one is generated with every start. You can easily generate one running:
# openssl rand -hex 32
JWT_SECRET=
# The MAC algorithm to use. Either HS256, HS384 or HS512 (default)
JWT_ALG=HS512
# How long the token is valid in seconds. Defaults to 91 days (3 months)
JWT_EXPIRES_IN=7862400

# The configuration for the OIDC. Rquired fields can be get from the response of POSTing to [https://identity1.i3-market.eu/release2/oidc/reg](https://identity1.i3-market.eu/release2/oidc/reg). The POST MUST use the token as an authorization bearer token, and the contents can be, e.g.:
# ```json
# {
#    "application_type": "web",
#    "redirect_uris": [<SERVER_PUBLIC_URL>/oidc/cb"],
#    "client_name": "CVS <SERVER_ID>",
#    "grant_types": [ "authorization_code" ],
#    "response_types": [ "code" ],
#    "token_endpoint_auth_method": "client_secret_jwt",
#    "id_token_signed_response_alg": "EdDSA"
# }
# ```
OIDC_CLIENT_ID=
OIDC_CLIENT_SECRET=
OIDC_PROVIDER_URI=
