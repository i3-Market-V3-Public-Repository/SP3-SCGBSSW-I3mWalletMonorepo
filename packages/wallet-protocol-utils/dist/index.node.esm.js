import{Session as t}from"@i3m/wallet-protocol";import{BehaviorSubject as s}from"rxjs";import*as i from"readline/promises";import{randomBytes as e,createCipheriv as o,createDecipheriv as a,scrypt as r,createSecretKey as n}from"crypto";import{tmpdir as h}from"os";import{mkdir as l,readFile as c,writeFile as p,rm as d}from"fs/promises";import{join as w,dirname as f}from"path";const u=async t=>{{const s=await Promise.resolve().then((function(){return v}));return await s.pinConsoleDialog(t?.consoleDialog)}},y=u;class g{constructor(t){this.fetch=async(...t)=>{if(await this.initialized,null==this.session)throw new Error("no session");return await this.session.send(...t)},this.protocol=t.protocol,this.$session=new s(void 0),this.initialized=this.init()}async init(t,s){if(void 0===t){const t=(await Promise.resolve().then((function(){return S}))).SessionFileStorage;this.storage=new t(s?.fileStorage)}else this.storage=t}get hasSession(){return void 0!==this.session}async createIfNotExists(){if(await this.initialized,void 0!==this.session)return this.session;const t=await this.protocol.run();return await this.setSession(t),t}async removeSession(){await this.initialized,await this.setSession()}async setSession(t){if(await this.initialized,this.session=t,null==t)await this.storage.clear();else{const s=t.toJSON();await this.storage.setSessionData(s)}this.$session.next(t)}async loadSession(){let s;await this.initialized;try{const i=await this.storage.getSessionData();null!==i&&(s=await t.fromJSON(this.protocol.transport,i))}catch(t){}await this.setSession(s)}}class m extends g{constructor(t,s={}){super({protocol:t,storageOptions:{localStorage:{key:s.localStorageKey}}}),this.protocol=t}}var v=Object.freeze({__proto__:null,pinConsoleDialog:async t=>{const s=t?.message??"Introduce the PIN: ",e=i.createInterface({input:process.stdin,output:process.stdout}),o=await e.question(s);return console.log(o),e.close(),o}});var S=Object.freeze({__proto__:null,SessionFileStorage:class{constructor(t){this.filepath="string"==typeof t?.filepath&&""!==t.filepath?t.filepath:w(h(),"i3m-wallet-session"),this.password=t?.password,this.initialized=this.init()}async deriveKey(t,s){this.salt=s??e(64),this.key=await async function(t,s,i=!1){let e={};void 0!==s.algOptions&&(e={N:16384,r:8,p:1,...s.algOptions},e.maxmem=256*e.N*e.r);const o=new Promise(((o,a)=>{r(t,s.salt,s.derivedKeyLength,e,((t,s)=>{null!==t&&a(t),o(i?s:n(s))}))}));return await o}(t,{alg:"scrypt",derivedKeyLength:32,salt:this.salt})}async init(){await l(f(this.filepath),{recursive:!0}),void 0!==this.password&&await this.deriveKey(this.password)}async encryptJson(t){if(void 0===this.key||void 0===this.password||void 0===this.salt)throw new Error("For the session to be encrypted you must provide a password");const s=JSON.stringify(t),i=e(16),a=o("aes-256-gcm",this.key,i),r=Buffer.concat([a.update(s,"utf8"),a.final()]),n=a.getAuthTag();return Buffer.concat([this.salt,i,n,r])}async decryptToJson(t){if(void 0===this.key||void 0===this.password||void 0===this.salt)throw new Error("For the session to be encrypted you must provide a password");const s=Buffer.from(t),i=s.subarray(0,64);0!==i.compare(this.salt)&&await this.deriveKey(this.password,i);const e=s.subarray(64,80),o=s.subarray(80,96),r=s.subarray(96),n=a("aes-256-gcm",this.key,e);n.setAuthTag(o);return JSON.parse(Buffer.concat([n.update(r),n.final()]).toString("utf8"))}async getSessionData(){let t;await this.initialized;const s=await c(this.filepath);if(t=void 0===this.password?s.toString("utf8"):await this.decryptToJson(s),""===t)throw new Error("invalid storage file or invalid format");return t}async setSessionData(t){await this.initialized,void 0===this.password?await p(this.filepath,JSON.stringify(t),{encoding:"utf8"}):await p(this.filepath,await this.encryptJson(t))}async clear(){await this.initialized,await d(this.filepath,{force:!0})}}});export{m as LocalSessionManager,g as SessionManager,y as openModal,u as pinDialog};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9waW4tZGlhbG9nLnRzIiwiLi4vc3JjL3RzL3Nlc3Npb24tbWFuYWdlci50cyIsIi4uL3NyYy90cy9waW4tZGlhbG9ncy9waW4tY29uc29sZS1kaWFsb2cudHMiLCIuLi9zcmMvdHMvc2Vzc2lvbi1zdG9yYWdlcy9zZXNzaW9uLWZpbGUtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsicGluRGlhbG9nIiwiYXN5bmMiLCJvcHRzIiwicGluQ29uc29sZURpYWxvZyIsIlByb21pc2UiLCJjb25zb2xlRGlhbG9nIiwib3Blbk1vZGFsIiwiU2Vzc2lvbk1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ0aGlzIiwiZmV0Y2giLCJhcmdzIiwiaW5pdGlhbGl6ZWQiLCJzZXNzaW9uIiwiRXJyb3IiLCJzZW5kIiwicHJvdG9jb2wiLCIkc2Vzc2lvbiIsIkJlaGF2aW9yU3ViamVjdCIsInVuZGVmaW5lZCIsImluaXQiLCJzdG9yYWdlIiwic3RvcmFnZU9wdGlvbnMiLCJTZXNzaW9uRmlsZVN0b3JhZ2UiLCJyZXNvbHZlIiwidGhlbiIsInNlc3Npb25GaWxlU3RvcmFnZSIsImZpbGVTdG9yYWdlIiwiaGFzU2Vzc2lvbiIsInJ1biIsInNldFNlc3Npb24iLCJjbGVhciIsInNlc3Npb25Kc29uIiwidG9KU09OIiwic2V0U2Vzc2lvbkRhdGEiLCJuZXh0IiwiZ2V0U2Vzc2lvbkRhdGEiLCJTZXNzaW9uIiwiZnJvbUpTT04iLCJ0cmFuc3BvcnQiLCJlcnJvciIsIkxvY2FsU2Vzc2lvbk1hbmFnZXIiLCJzdXBlciIsImxvY2FsU3RvcmFnZSIsImtleSIsImxvY2FsU3RvcmFnZUtleSIsInF1ZXJ5IiwibWVzc2FnZSIsInJsIiwicmVhZGxpbmUiLCJjcmVhdGVJbnRlcmZhY2UiLCJpbnB1dCIsInByb2Nlc3MiLCJzdGRpbiIsIm91dHB1dCIsInN0ZG91dCIsInBpbiIsInF1ZXN0aW9uIiwiY29uc29sZSIsImxvZyIsImNsb3NlIiwiZmlsZXBhdGgiLCJqb2luIiwidG1wZGlyIiwicGFzc3dvcmQiLCJzYWx0IiwicmFuZG9tQnl0ZXMiLCJyZXR1cm5CdWZmZXIiLCJzY3J5cHRPcHRpb25zIiwiYWxnT3B0aW9ucyIsIk4iLCJyIiwicCIsIm1heG1lbSIsImtleVByb21pc2UiLCJyZWplY3QiLCJzY3J5cHQiLCJkZXJpdmVkS2V5TGVuZ3RoIiwiZXJyIiwiY3JlYXRlU2VjcmV0S2V5IiwiZGVyaXZlS2V5IiwiYWxnIiwibWtkaXIiLCJkaXJuYW1lIiwicmVjdXJzaXZlIiwianNvbiIsInBsYWludGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpdiIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiZW5jcnlwdGVkIiwiQnVmZmVyIiwiY29uY2F0IiwidXBkYXRlIiwiZmluYWwiLCJ0YWciLCJnZXRBdXRoVGFnIiwiY3J5cHRvZ3JhbSIsImJ1ZiIsImZyb20iLCJzdWJhcnJheSIsImNvbXBhcmUiLCJjaXBoZXJ0ZXh0IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2Iiwic2V0QXV0aFRhZyIsInBhcnNlIiwidG9TdHJpbmciLCJpdGVtIiwiZmlsZUJ1ZiIsInJlYWRGaWxlIiwiZGVjcnlwdFRvSnNvbiIsIndyaXRlRmlsZSIsImVuY29kaW5nIiwiZW5jcnlwdEpzb24iLCJybSIsImZvcmNlIl0sIm1hcHBpbmdzIjoiOFhBT2FBLEVBQVlDLE1BQU9DLElBSXZCLENBQ0wsTUFBTUMsUUFBeUJDLCtDQUMvQixhQUFhRCxFQUFpQkEsaUJBQWlCRCxHQUFNRyxjQUN0RCxHQVNVQyxFQUFZTixRQ2hCWk8sRUFPWEMsWUFBYUMsR0F3QmJDLEtBQUFDLE1BQTRCVixTQUFVVyxLQUdwQyxTQUZNRixLQUFLRyxZQUVTLE1BQWhCSCxLQUFLSSxRQUNQLE1BQU0sSUFBSUMsTUFBTSxjQUdsQixhQUFhTCxLQUFLSSxRQUFRRSxRQUFRSixFQUFLLEVBOUJ2Q0YsS0FBS08sU0FBV1IsRUFB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
