"use strict";var t=require("@i3m/wallet-protocol"),i=require("rxjs"),s=require("readline/promises"),e=require("crypto"),a=require("os"),r=require("fs/promises"),o=require("path");function n(t){var i=Object.create(null);return t&&Object.keys(t).forEach((function(s){if("default"!==s){var e=Object.getOwnPropertyDescriptor(t,s);Object.defineProperty(i,s,e.get?e:{enumerable:!0,get:function(){return t[s]}})}})),i.default=t,Object.freeze(i)}var c=n(s);const l=async t=>{{const i=await Promise.resolve().then((function(){return u}));return await i.pinConsoleDialog(t?.consoleDialog)}},h=l;class p{constructor(t){this.fetch=async(...t)=>{if(await this.initialized,null==this.session)throw new Error("no session");return await this.session.send(...t)},this.protocol=t.protocol,this.$session=new i.BehaviorSubject(void 0),this.initialized=this.init()}async init(t,i){if(void 0===t){const t=(await Promise.resolve().then((function(){return d}))).SessionFileStorage;this.storage=new t(i?.fileStorage)}else this.storage=t}get hasSession(){return void 0!==this.session}async createIfNotExists(){if(await this.initialized,void 0!==this.session)return this.session;const t=await this.protocol.run();return await this.setSession(t),t}async removeSession(){await this.initialized,await this.setSession()}async setSession(t){if(await this.initialized,this.session=t,null==t)await this.storage.clear();else{const i=t.toJSON();await this.storage.setSessionData(i)}this.$session.next(t)}async loadSession(){let i;await this.initialized;try{const s=await this.storage.getSessionData();null!==s&&(i=await t.Session.fromJSON(this.protocol.transport,s))}catch(t){}await this.setSession(i)}}var u=Object.freeze({__proto__:null,pinConsoleDialog:async t=>{const i=t?.message??"Introduce the PIN: ",s=c.createInterface({input:process.stdin,output:process.stdout}),e=await s.question(i);return console.log(e),s.close(),e}});var d=Object.freeze({__proto__:null,SessionFileStorage:class{constructor(t){this.filepath="string"==typeof t?.filepath&&""!==t.filepath?t.filepath:o.join(a.tmpdir(),"i3m-wallet-session"),this.password=t?.password,this.initialized=this.init()}async deriveKey(t,i){this.salt=i??e.randomBytes(64),this.key=await async function(t,i,s=!1){let a={};void 0!==i.algOptions&&(a={N:16384,r:8,p:1,...i.algOptions},a.maxmem=256*a.N*a.r);const r=new Promise(((r,o)=>{e.scrypt(t,i.salt,i.derivedKeyLength,a,((t,i)=>{null!==t&&o(t),r(s?i:e.createSecretKey(i))}))}));return await r}(t,{alg:"scrypt",derivedKeyLength:32,salt:this.salt})}async init(){await r.mkdir(o.dirname(this.filepath),{recursive:!0}),void 0!==this.password&&await this.deriveKey(this.password)}async encryptJson(t){if(void 0===this.key||void 0===this.password||void 0===this.salt)throw new Error("For the session to be encrypted you must provide a password");const i=JSON.stringify(t),s=e.randomBytes(16),a=e.createCipheriv("aes-256-gcm",this.key,s),r=Buffer.concat([a.update(i,"utf8"),a.final()]),o=a.getAuthTag();return Buffer.concat([this.salt,s,o,r])}async decryptToJson(t){if(void 0===this.key||void 0===this.password||void 0===this.salt)throw new Error("For the session to be encrypted you must provide a password");const i=Buffer.from(t),s=i.subarray(0,64);0!==s.compare(this.salt)&&await this.deriveKey(this.password,s);const a=i.subarray(64,80),r=i.subarray(80,96),o=i.subarray(96),n=e.createDecipheriv("aes-256-gcm",this.key,a);n.setAuthTag(r);return JSON.parse(Buffer.concat([n.update(o),n.final()]).toString("utf8"))}async getSessionData(){let t;await this.initialized;const i=await r.readFile(this.filepath);if(t=void 0===this.password?i.toString("utf8"):await this.decryptToJson(i),""===t)throw new Error("invalid storage file or invalid format");return t}async setSessionData(t){await this.initialized,void 0===this.password?await r.writeFile(this.filepath,JSON.stringify(t),{encoding:"utf8"}):await r.writeFile(this.filepath,await this.encryptJson(t))}async clear(){await this.initialized,await r.rm(this.filepath,{force:!0})}}});exports.LocalSessionManager=class extends p{constructor(t,i={}){super({protocol:t,storageOptions:{localStorage:{key:i.localStorageKey}}}),this.protocol=t}},exports.SessionManager=p,exports.openModal=h,exports.pinDialog=l;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9waW4tZGlhbG9nLnRzIiwiLi4vc3JjL3RzL3Nlc3Npb24tbWFuYWdlci50cyIsIi4uL3NyYy90cy9waW4tZGlhbG9ncy9waW4tY29uc29sZS1kaWFsb2cudHMiLCIuLi9zcmMvdHMvc2Vzc2lvbi1zdG9yYWdlcy9zZXNzaW9uLWZpbGUtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsicGluRGlhbG9nIiwiYXN5bmMiLCJvcHRzIiwicGluQ29uc29sZURpYWxvZyIsIlByb21pc2UiLCJjb25zb2xlRGlhbG9nIiwib3Blbk1vZGFsIiwiU2Vzc2lvbk1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ0aGlzIiwiZmV0Y2giLCJhcmdzIiwiaW5pdGlhbGl6ZWQiLCJzZXNzaW9uIiwiRXJyb3IiLCJzZW5kIiwicHJvdG9jb2wiLCIkc2Vzc2lvbiIsIkJlaGF2aW9yU3ViamVjdCIsInVuZGVmaW5lZCIsImluaXQiLCJzdG9yYWdlIiwic3RvcmFnZU9wdGlvbnMiLCJTZXNzaW9uRmlsZVN0b3JhZ2UiLCJyZXNvbHZlIiwidGhlbiIsInNlc3Npb25GaWxlU3RvcmFnZSIsImZpbGVTdG9yYWdlIiwiaGFzU2Vzc2lvbiIsInJ1biIsInNldFNlc3Npb24iLCJjbGVhciIsInNlc3Npb25Kc29uIiwidG9KU09OIiwic2V0U2Vzc2lvbkRhdGEiLCJuZXh0IiwiZ2V0U2Vzc2lvbkRhdGEiLCJTZXNzaW9uIiwiZnJvbUpTT04iLCJ0cmFuc3BvcnQiLCJlcnJvciIsInF1ZXJ5IiwibWVzc2FnZSIsInJsIiwicmVhZGxpbmUiLCJjcmVhdGVJbnRlcmZhY2UiLCJpbnB1dCIsInByb2Nlc3MiLCJzdGRpbiIsIm91dHB1dCIsInN0ZG91dCIsInBpbiIsInF1ZXN0aW9uIiwiY29uc29sZSIsImxvZyIsImNsb3NlIiwiZmlsZXBhdGgiLCJqb2luIiwidG1wZGlyIiwicGFzc3dvcmQiLCJzYWx0IiwicmFuZG9tQnl0ZXMiLCJrZXkiLCJyZXR1cm5CdWZmZXIiLCJzY3J5cHRPcHRpb25zIiwiYWxnT3B0aW9ucyIsIk4iLCJyIiwicCIsIm1heG1lbSIsImtleVByb21pc2UiLCJyZWplY3QiLCJzY3J5cHQiLCJkZXJpdmVkS2V5TGVuZ3RoIiwiZXJyIiwiY3JlYXRlU2VjcmV0S2V5IiwiZGVyaXZlS2V5IiwiYWxnIiwibWtkaXIiLCJkaXJuYW1lIiwicmVjdXJzaXZlIiwianNvbiIsInBsYWludGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpdiIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiZW5jcnlwdGVkIiwiQnVmZmVyIiwiY29uY2F0IiwidXBkYXRlIiwiZmluYWwiLCJ0YWciLCJnZXRBdXRoVGFnIiwiY3J5cHRvZ3JhbSIsImJ1ZiIsImZyb20iLCJzdWJhcnJheSIsImNvbXBhcmUiLCJjaXBoZXJ0ZXh0IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2Iiwic2V0QXV0aFRhZyIsInBhcnNlIiwidG9TdHJpbmciLCJpdGVtIiwiZmlsZUJ1ZiIsInJlYWRGaWxlIiwiZGVjcnlwdFRvSnNvbiIsIndyaXRlRmlsZSIsImVuY29kaW5nIiwiZW5jcnlwdEpzb24iLCJybSIsImZvcmNlIiwic3VwZXIiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2VLZXkiXSwibWFwcGluZ3MiOiJ1Y0FPYUEsRUFBWUMsTUFBT0MsSUFJdkIsQ0FDTCxNQUFNQyxRQUF5QkMsK0NBQy9CLGFBQWFELEVBQWlCQSxpQkFBaUJELEdBQU1HLGNBQ3RELEdBU1VDLEVBQVlOLFFDaEJaTyxFQU9YQyxZQUFhQyxHQXdCYkMsS0FBQUMsTUFBNEJWLFNBQVVXLEtBR3BDLFNBRk1GLEtBQUtHLFlBRVMsTUFBaEJILEtBQUtJLFFBQ1AsTUFBTSxJQUFJQyxNQUFNLGNBR2xCLGFBQWFMLEtBQUtJLFFBQVFFLFFBQVFKLEVBQUssRUE5QnZDRixLQUFLTyxTQUFXUixFQUFRUSxTQUN4QlAsS0FBS1EsU0FBVyxJQUFJ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
