"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("@i3m/wallet-protocol"),e=require("rxjs"),i=require("node:readline/promises"),s=require("crypto"),a=require("os"),r=require("fs/promises"),o=require("path");function n(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(i){if("default"!==i){var s=Object.getOwnPropertyDescriptor(t,i);Object.defineProperty(e,i,s.get?s:{enumerable:!0,get:function(){return t[i]}})}})),e.default=t,Object.freeze(e)}var c=n(i);const l=async t=>{{const e=await Promise.resolve().then((function(){return d}));return await e.pinConsoleDialog(t?.consoleDialog)}},h=l;class u{constructor(t){this.fetch=async(...t)=>{if(await this.initialized,null==this.session)throw new Error("no session");return await this.session.send(...t)},this.protocol=t.protocol,this.$session=new e.BehaviorSubject(void 0),this.initialized=this.init()}async init(t,e){if(void 0===t){const t=(await Promise.resolve().then((function(){return p}))).SessionFileStorage;this.storage=new t(e?.fileStorage)}else this.storage=t}get hasSession(){return void 0!==this.session}async createIfNotExists(){if(await this.initialized,void 0!==this.session)return this.session;const t=await this.protocol.run();return await this.setSession(t),t}async removeSession(){await this.initialized,await this.setSession()}async setSession(t){if(await this.initialized,this.session=t,null==t)await this.storage.clear();else{const e=t.toJSON();await this.storage.setSessionData(e)}this.$session.next(t)}async loadSession(){let e;await this.initialized;try{const i=await this.storage.getSessionData();null!==i&&(e=await t.Session.fromJSON(this.protocol.transport,i))}catch(t){}await this.setSession(e)}}var d=Object.freeze({__proto__:null,pinConsoleDialog:async t=>{const e=t?.message??"Introduce the PIN: ",i=c.createInterface({input:process.stdin,output:process.stdout}),s=await i.question(e);return console.log(s),i.close(),s}});var p=Object.freeze({__proto__:null,SessionFileStorage:class{constructor(t){this.filepath="string"==typeof t?.filepath&&""!==t.filepath?t.filepath:o.join(a.tmpdir(),"i3m-wallet-session"),this.password=t?.password,this.initialized=this.init()}async deriveKey(t,e){this.salt=e??s.randomBytes(64),this.key=await async function(t,e,i=!1){let a={};void 0!==e.algOptions&&(a={N:16384,r:8,p:1,...e.algOptions},a.maxmem=256*a.N*a.r);const r=new Promise(((r,o)=>{s.scrypt(t,e.salt,e.derivedKeyLength,a,((t,e)=>{null!==t&&o(t),r(i?e:s.createSecretKey(e))}))}));return await r}(t,{alg:"scrypt",derivedKeyLength:32,salt:this.salt})}async init(){await r.mkdir(o.dirname(this.filepath),{recursive:!0}),void 0!==this.password&&await this.deriveKey(this.password)}async encryptJson(t){if(void 0===this.key||void 0===this.password||void 0===this.salt)throw new Error("For the session to be encrypted you must provide a password");const e=JSON.stringify(t),i=s.randomBytes(16),a=s.createCipheriv("aes-256-gcm",this.key,i),r=Buffer.concat([a.update(e,"utf8"),a.final()]),o=a.getAuthTag();return Buffer.concat([this.salt,i,o,r])}async decryptToJson(t){if(void 0===this.key||void 0===this.password||void 0===this.salt)throw new Error("For the session to be encrypted you must provide a password");const e=Buffer.from(t),i=e.subarray(0,64);0!==i.compare(this.salt)&&await this.deriveKey(this.password,i);const a=e.subarray(64,80),r=e.subarray(80,96),o=e.subarray(96),n=s.createDecipheriv("aes-256-gcm",this.key,a);n.setAuthTag(r);return JSON.parse(Buffer.concat([n.update(o),n.final()]).toString("utf8"))}async getSessionData(){let t;await this.initialized;const e=await r.readFile(this.filepath);if(t=void 0===this.password?e.toString("utf8"):await this.decryptToJson(e),""===t)throw new Error("invalid storage file or invalid format");return t}async setSessionData(t){await this.initialized,void 0===this.password?await r.writeFile(this.filepath,JSON.stringify(t),{encoding:"utf8"}):await r.writeFile(this.filepath,await this.encryptJson(t))}async clear(){await this.initialized,await r.rm(this.filepath,{force:!0})}}});exports.LocalSessionManager=class extends u{constructor(t,e={}){super({protocol:t,storageOptions:{localStorage:{key:e.localStorageKey}}}),this.protocol=t}},exports.SessionManager=u,exports.openModal=h,exports.pinDialog=l;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cy9waW4tZGlhbG9nLnRzIiwiLi4vLi4vc3JjL3RzL3Nlc3Npb24tbWFuYWdlci50cyIsIi4uLy4uL3NyYy90cy9waW4tZGlhbG9ncy9waW4tY29uc29sZS1kaWFsb2cudHMiLCIuLi8uLi9zcmMvdHMvc2Vzc2lvbi1zdG9yYWdlcy9zZXNzaW9uLWZpbGUtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsicGluRGlhbG9nIiwiYXN5bmMiLCJvcHRzIiwicGluQ29uc29sZURpYWxvZyIsIlByb21pc2UiLCJjb25zb2xlRGlhbG9nIiwib3Blbk1vZGFsIiwiU2Vzc2lvbk1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ0aGlzIiwiZmV0Y2giLCJhcmdzIiwiaW5pdGlhbGl6ZWQiLCJzZXNzaW9uIiwiRXJyb3IiLCJzZW5kIiwicHJvdG9jb2wiLCIkc2Vzc2lvbiIsIkJlaGF2aW9yU3ViamVjdCIsInVuZGVmaW5lZCIsImluaXQiLCJzdG9yYWdlIiwic3RvcmFnZU9wdGlvbnMiLCJTZXNzaW9uRmlsZVN0b3JhZ2UiLCJyZXNvbHZlIiwidGhlbiIsInNlc3Npb25GaWxlU3RvcmFnZSIsImZpbGVTdG9yYWdlIiwiaGFzU2Vzc2lvbiIsInJ1biIsInNldFNlc3Npb24iLCJjbGVhciIsInNlc3Npb25Kc29uIiwidG9KU09OIiwic2V0U2Vzc2lvbkRhdGEiLCJuZXh0IiwiZ2V0U2Vzc2lvbkRhdGEiLCJTZXNzaW9uIiwiZnJvbUpTT04iLCJ0cmFuc3BvcnQiLCJlcnJvciIsInF1ZXJ5IiwibWVzc2FnZSIsInJsIiwicmVhZGxpbmUiLCJjcmVhdGVJbnRlcmZhY2UiLCJpbnB1dCIsInByb2Nlc3MiLCJzdGRpbiIsIm91dHB1dCIsInN0ZG91dCIsInBpbiIsInF1ZXN0aW9uIiwiY29uc29sZSIsImxvZyIsImNsb3NlIiwiZmlsZXBhdGgiLCJqb2luIiwidG1wZGlyIiwicGFzc3dvcmQiLCJzYWx0IiwicmFuZG9tQnl0ZXMiLCJrZXkiLCJyZXR1cm5CdWZmZXIiLCJzY3J5cHRPcHRpb25zIiwiYWxnT3B0aW9ucyIsIk4iLCJyIiwicCIsIm1heG1lbSIsImtleVByb21pc2UiLCJyZWplY3QiLCJzY3J5cHQiLCJkZXJpdmVkS2V5TGVuZ3RoIiwiZXJyIiwiY3JlYXRlU2VjcmV0S2V5IiwiZGVyaXZlS2V5IiwiYWxnIiwibWtkaXIiLCJkaXJuYW1lIiwicmVjdXJzaXZlIiwianNvbiIsInBsYWludGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpdiIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiZW5jcnlwdGVkIiwiQnVmZmVyIiwiY29uY2F0IiwidXBkYXRlIiwiZmluYWwiLCJ0YWciLCJnZXRBdXRoVGFnIiwiY3J5cHRvZ3JhbSIsImJ1ZiIsImZyb20iLCJzdWJhcnJheSIsImNvbXBhcmUiLCJjaXBoZXJ0ZXh0IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2Iiwic2V0QXV0aFRhZyIsInBhcnNlIiwidG9TdHJpbmciLCJpdGVtIiwiZmlsZUJ1ZiIsInJlYWRGaWxlIiwiZGVjcnlwdFRvSnNvbiIsIndyaXRlRmlsZSIsImVuY29kaW5nIiwiZW5jcnlwdEpzb24iLCJybSIsImZvcmNlIiwic3VwZXIiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2VLZXkiXSwibWFwcGluZ3MiOiIraEJBT2FBLEVBQVlDLE1BQU9DLElBSXZCLENBQ0wsTUFBTUMsUUFBeUJDLCtDQUMvQixhQUFhRCxFQUFpQkEsaUJBQWlCRCxHQUFNRyxjQUN0RCxHQVNVQyxFQUFZTixRQ2hCWk8sRUFPWEMsWUFBYUMsR0F3QmJDLEtBQUFDLE1BQTRCVixTQUFVVyxLQUdwQyxTQUZNRixLQUFLRyxZQUVTLE1BQWhCSCxLQUFLSSxRQUNQLE1BQU0sSUFBSUMsTUFBTSxjQUdsQixhQUFhTCxLQUFLSSxRQUFRRSxRQUFRSixFQUFLLEVBOUJ2Q0YsS0FBS08sU0FBV1IsRUFBUVEsU0FDeEJQLEtB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
