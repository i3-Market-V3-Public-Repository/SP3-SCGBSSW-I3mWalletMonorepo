import{Session as t}from"@i3m/wallet-protocol";import{BehaviorSubject as s}from"rxjs";import*as i from"node:readline/promises";import*as e from"crypto";import{tmpdir as o}from"os";import{mkdir as a,readFile as r,writeFile as n,rm as c}from"fs/promises";import{join as l,dirname as h}from"path";const p=async t=>{{const s=await Promise.resolve().then((function(){return u}));return await s.pinConsoleDialog(t?.consoleDialog)}},f=p;class d{constructor(t){this.fetch=async(...t)=>{if(await this.initialized,null==this.session)throw new Error("no session");return await this.session.send(...t)},this.protocol=t.protocol,this.$session=new s(void 0),this.initialized=new Promise(((s,i)=>{this.init(t.storage).then((()=>{s(!0)})).catch((t=>{i(t)}))}))}async init(t,s){if(void 0===t){const t=(await Promise.resolve().then((function(){return y}))).SessionFileStorage;this.storage=new t(s?.fileStorage)}else this.storage=t}get hasSession(){return void 0!==this.session}async createIfNotExists(){if(await this.initialized,void 0!==this.session)return this.session;const t=await this.protocol.run();return await this.setSession(t),t}async removeSession(){await this.initialized,await this.setSession()}async setSession(t){if(await this.initialized,this.session=t,null==t)await this.storage.clear();else{const s=t.toJSON();await this.storage.setSessionData(JSON.stringify(s))}this.$session.next(t)}async loadSession(){let s;await this.initialized;try{const i=await this.storage.getSessionData();null!==i&&(s=await t.fromJSON(this.protocol.transport,i))}catch(t){}await this.setSession(s)}}class w extends d{constructor(t,s={}){super({protocol:t,storageOptions:{localStorage:{key:s.localStorageKey}}}),this.protocol=t}}var u=Object.freeze({__proto__:null,pinConsoleDialog:async t=>{const s=t?.message??"Introduce the PIN:",e=i.createInterface({input:process.stdin,output:process.stdout}),o=await e.question(s);return console.log(o),e.close(),o}});var y=Object.freeze({__proto__:null,SessionFileStorage:class{constructor(t){if(!("undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node))throw new Error("FileStore can only be instantiated from Node.js");this.filepath="string"==typeof t?.filepath&&""!==t.filepath?t.filepath:l(o(),"i3m-wallet-session"),this.password=t?.password,this.initialized=new Promise(((t,s)=>{this.init().then((()=>{t(!0)})).catch((t=>{s(t)}))}))}async init(){await a(h(this.filepath),{recursive:!0})}kdf(t,s){return e.scryptSync(t,s,32)}async encryptJson(t){if(void 0===this.password)throw new Error("For the store to be encrypted you must provide a password");const s=JSON.stringify(t),i=e.randomBytes(16),o=e.randomBytes(64),a=this.kdf(this.password,o),r=e.createCipheriv("aes-256-gcm",a,i),n=Buffer.concat([r.update(s,"utf8"),r.final()]),c=r.getAuthTag();return Buffer.concat([o,i,c,n])}async decryptToJson(t){if(void 0===this.password)throw new Error("For the store to be encrypted you must provide a password");const s=Buffer.from(t),i=s.slice(0,64),o=s.slice(64,80),a=s.slice(80,96),r=s.slice(96),n=this.kdf(this.password,i),c=e.createDecipheriv("aes-256-gcm",n,o);c.setAuthTag(a);return JSON.parse(Buffer.concat([c.update(r),c.final()]).toString("utf8"))}async getSessionData(){let t;await this.initialized;const s=await r(this.filepath);if(t=void 0===this.password?s.toString("utf8"):await this.decryptToJson(s),""===t)throw new Error("invalid storage file or invalid format");return t}async setSessionData(t){await this.initialized,void 0===this.password?await n(this.filepath,JSON.stringify(t),{encoding:"utf8"}):await n(this.filepath,await this.encryptJson(t))}async clear(){await this.initialized,await c(this.filepath,{force:!0})}}});export{w as LocalSessionManager,d as SessionManager,f as openModal,p as pinDialog};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL3Bpbi1kaWFsb2cudHMiLCIuLi8uLi9zcmMvdHMvc2Vzc2lvbi1tYW5hZ2VyLnRzIiwiLi4vLi4vc3JjL3RzL3Bpbi1kaWFsb2dzL3Bpbi1jb25zb2xlLWRpYWxvZy50cyIsIi4uLy4uL3NyYy90cy9zZXNzaW9uLXN0b3JhZ2VzL3Nlc3Npb24tZmlsZS1zdG9yYWdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJwaW5EaWFsb2ciLCJhc3luYyIsIm9wdHMiLCJwaW5Db25zb2xlRGlhbG9nIiwiUHJvbWlzZSIsImNvbnNvbGVEaWFsb2ciLCJvcGVuTW9kYWwiLCJTZXNzaW9uTWFuYWdlciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInRoaXMiLCJmZXRjaCIsImFyZ3MiLCJpbml0aWFsaXplZCIsInNlc3Npb24iLCJFcnJvciIsInNlbmQiLCJwcm90b2NvbCIsIiRzZXNzaW9uIiwiQmVoYXZpb3JTdWJqZWN0IiwidW5kZWZpbmVkIiwicmVzb2x2ZSIsInJlamVjdCIsImluaXQiLCJzdG9yYWdlIiwidGhlbiIsImNhdGNoIiwicmVhc29uIiwic3RvcmFnZU9wdGlvbnMiLCJTZXNzaW9uRmlsZVN0b3JhZ2UiLCJzZXNzaW9uRmlsZVN0b3JhZ2UiLCJmaWxlU3RvcmFnZSIsImhhc1Nlc3Npb24iLCJydW4iLCJzZXRTZXNzaW9uIiwiY2xlYXIiLCJzZXNzaW9uSnNvbiIsInRvSlNPTiIsInNldFNlc3Npb25EYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5leHQiLCJnZXRTZXNzaW9uRGF0YSIsIlNlc3Npb24iLCJmcm9tSlNPTiIsInRyYW5zcG9ydCIsImVycm9yIiwiTG9jYWxTZXNzaW9uTWFuYWdlciIsInN1cGVyIiwibG9jYWxTdG9yYWdlIiwia2V5IiwibG9jYWxTdG9yYWdlS2V5IiwicXVlcnkiLCJtZXNzYWdlIiwicmwiLCJyZWFkbGluZSIsImNyZWF0ZUludGVyZmFjZSIsImlucHV0IiwicHJvY2VzcyIsInN0ZGluIiwib3V0cHV0Iiwic3Rkb3V0IiwicGluIiwicXVlc3Rpb24iLCJjb25zb2xlIiwibG9nIiwiY2xvc2UiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJmaWxlcGF0aCIsImpvaW4iLCJ0bXBkaXIiLCJwYXNzd29yZCIsIm1rZGlyIiwiZGlybmFtZSIsInJlY3Vyc2l2ZSIsImtkZiIsInNhbHQiLCJjcnlwdG8iLCJzY3J5cHRTeW5jIiwianNvbiIsInBsYWludGV4dCIsIml2IiwicmFuZG9tQnl0ZXMiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsImVuY3J5cHRlZCIsIkJ1ZmZlciIsImNvbmNhdCIsInVwZGF0ZSIsImZpbmFsIiwidGFnIiwiZ2V0QXV0aFRhZyIsImNyeXB0b2dyYW0iLCJidWYiLCJmcm9tIiwic2xpY2UiLCJjaXBoZXJ0ZXh0IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2Iiwic2V0QXV0aFRhZyIsInBhcnNlIiwidG9TdHJpbmciLCJpdGVtIiwiZmlsZUJ1ZiIsInJlYWRGaWxlIiwiZGVjcnlwdFRvSnNvbiIsIndyaXRlRmlsZSIsImVuY29kaW5nIiwiZW5jcnlwdEpzb24iLCJybSIsImZvcmNlIl0sIm1hcHBpbmdzIjoiNFNBT2FBLEVBQVlDLE1BQU9DLElBSXZCLENBQ0wsTUFBTUMsUUFBeUJDLCtDQUMvQixhQUFhRCxFQUFpQkEsaUJBQWlCRCxHQUFNRyxjQUN0RCxHQVNVQyxFQUFZTixRQ2hCWk8sRUFPWEMsWUFBYUMsR0E0QmJDLEtBQUFDLE1BQTRCVixTQUFVVyxLQUdwQyxTQUZNRixLQUFLRyxZQUVTLE1BQWhCSCxLQUFLSSxRQUNQLE1BQU0sSUFBSUMsTUFBTSxjQUdsQixhQUFhTCxLQUFLSSxRQUFRRSxRQUFRSixFQUFLLEVBbEN2Q0YsS0FBS08sU0FBV1IsRUFBUVEsU0FDeEJQLEtBQUtRLFNBQVcsSUFBSUMsT0FBd0NDLEdBQzVEVixLQUFLRyxZQUFjLElBQUlULFNBQVEsQ0FBQ2lCLEVBQVNDLEtBQ3ZDWixLQUFLYSxLQUFLZCxFQUFRZSxTQUFTQyxNQUFLLEtBQzlCSixHQUFRLEVBQUssSUFDWkssT0FBTUMsSUFBWUwsRUFBT0ssRUFBTyxHQUFHLEdBRXpDLENBRU8xQixXQUFZdUIsRUFBMEJJLEdBQzVDLFFBQWdCUixJQUFaSSxFQUlLLENBQ0wsTUFBTUssU0FBNEJ6QixRQUFpRGlCLFVBQUFJLE1BQUEsV0FBQSxPQUFBSyxDQUFBLEtBQUVELG1CQUNyRm5CLEtBQUtjLFFBQVUsSUFBSUssRUFBbUJELEdBQWdCRyxZQUN2RCxNQUVEckIsS0FBS2MsUUFBVUEsQ0FFbEIsQ0FFR1EsaUJBQ0YsWUFBd0JaLElBQWpCVixLQUFLSSxPQUNiLENBWURiLDBCQUdFLFNBRk1TLEtBQUtHLGlCQUVVTyxJQUFqQlYsS0FBS0ksUUFDUCxPQUFPSixLQUFLSSxRQUVkLE1BQU1BLFFBQWdCSixLQUFLTyxTQUFTZ0IsTUFHcEMsYUFGTXZCLEtBQUt3QixXQUFXcEIsR0FFZkEsQ0FDUixDQUVEYiw0QkFDUVMsS0FBS0csa0JBRUxILEtBQUt3QixZQUNaLENBRURqQyxpQkFBa0JhLEdBSWhCLFNBSE1KLEtBQUtHLFlBRVhILEtBQUtJLFFBQVVBLEVBQ1hBLGNBQ0lKLEtBQUtjLFFBQVFXLFlBQ2QsQ0FDTCxNQUFNQyxFQUFjdEIsRUFBUXVCLGVBQ3RCM0IsS0FBS2MsUUFBUWMsZUFBZUMsS0FBS0MsVUFBVUosR0FDbEQsQ0FDRDFCLEtBQUtRLFNBQVN1QixLQUFLM0IsRUFDcEIsQ0FFRGIsb0JBR0UsSUFBSWEsUUFGRUosS0FBS0csWUFHWCxJQUNFLE1BQU11QixRQUFvQjFCLEtBQUtjLFFBQVFrQixpQkFDbkIsT0FBaEJOLElBQ0Z0QixRQUFnQjZCLEVBQVFDLFNBQVNsQyxLQUFLTyxTQUFTNEIsVUFBV1QsR0FFNUMsQ0FBaEIsTUFBT1UsR0FBUyxPQUVacEMsS0FBS3dCLFdBQVdwQixFQUN2QixFQVFHLE1BQU9pQyxVQUE2RHhDLEVBQ3hFQyxZQUF1QlMsRUFBNkJSLEVBQTBDLElBQzVGdUMsTUFBTSxDQUFFL0IsV0FBVVcsZUFBZ0IsQ0FBRXFCLGFBQWMsQ0FBRUMsSUFBS3pDLEVBQVEwQyxvQkFENUN6QyxLQUFRTyxTQUFSQSxDQUV0Qix1RENuRzZCaEIsTUFBT1EsSUFDckMsTUFBTTJDLEVBQVEzQyxHQUFTNEMsU0FBVyxxQkFFNUJDLEVBQUtDLEVBQVNDLGdCQUFnQixDQUNsQ0MsTUFBT0MsUUFBUUMsTUFDZkMsT0FBUUYsUUFBUUcsU0FHWkMsUUFBWVIsRUFBR1MsU0FBU1gsR0FJOUIsT0FIQVksUUFBUUMsSUFBSUgsR0FDWlIsRUFBR1ksUUFFSUosQ0FBRyxpRUNSVnRELFlBQWFDLEdBRVgsS0FEa0Msb0JBQVppRCxTQUErQyxNQUFwQkEsUUFBUVMsVUFBNkMsTUFBekJULFFBQVFTLFNBQVNDLE1BRTVGLE1BQU0sSUFBSXJELE1BQU0sbURBRWxCTCxLQUFLMkQsU0FBeUMsaUJBQXRCNUQsR0FBUzRELFVBQThDLEtBQXJCNUQsRUFBUTRELFNBQW1CNUQsRUFBUTRELFNBQVdDLEVBQUtDLElBQVUsc0JBQ3ZIN0QsS0FBSzhELFNBQVcvRCxHQUFTK0QsU0FDekI5RCxLQUFLRyxZQUFjLElBQUlULFNBQVEsQ0FBQ2lCLEVBQVNDLEtBQ3ZDWixLQUFLYSxPQUFPRSxNQUFLLEtBQ2ZKLEdBQVEsRUFBSyxJQUNaSyxPQUFNQyxJQUFZTCxFQUFPSyxFQUFPLEdBQUcsR0FFekMsQ0FFTzFCLG1CQUNBd0UsRUFBTUMsRUFBUWhFLEtBQUsyRCxVQUFXLENBQUVNLFdBQVcsR0FDbEQsQ0FFT0MsSUFBS0osRUFBa0JLLEdBQzdCLE9BQU9DLEVBQU9DLFdBQVdQLEVBQVVLLEVBQU0sR0FDMUMsQ0FFTzVFLGtCQUFtQitFLEdBQ3pCLFFBQXNCNUQsSUFBbEJWLEtBQUs4RCxTQUNQLE1BQU0sSUFBSXpELE1BQU0sNkRBR2xCLE1BQU1rRSxFQUFZMUMsS0FBS0MsVUFBVXdDLEdBRzNCRSxFQUFLSixFQUFPSyxZQUFZLElBR3hCTixFQUFPQyxFQUFPSyxZQUFZLElBRzFCakMsRUFBTXhDLEtBQUtrRSxJQUFJbEUsS0FBSzhELFNBQVVLLEdBRzlCTyxFQUFTTixFQUFPTyxlQUFlLGNBQWVuQyxFQUFLZ0MsR0FHbkRJLEVBQVlDLE9BQU9DLE9BQU8sQ0FBQ0osRUFBT0ssT0FBT1IsRUFBVyxRQUFTRyxFQUFPTSxVQUdwRUMsRUFBTVAsRUFBT1EsYUFHbkIsT0FBT0wsT0FBT0MsT0FBTyxDQUFDWCxFQUFNSyxFQUFJUyxFQUFLTCxHQUN0QyxDQUVPckYsb0JBQXFCNEYsR0FDM0IsUUFBc0J6RSxJQUFsQlYsS0FBSzhELFNBQ1AsTUFBTSxJQUFJekQsTUFBTSw2REFJbEIsTUFBTStFLEVBQU1QLE9BQU9RLEtBQUtGLEdBQ2xCaEIsRUFBT2lCLEVBQUlFLE1BQU0sRUFBRyxJQUNwQmQsRUFBS1ksRUFBSUUsTUFBTSxHQUFJLElBQ25CTCxFQUFNRyxFQUFJRSxNQUFNLEdBQUksSUFDcEJDLEVBQWFILEVBQUlFLE1BQU0sSUFHdkI5QyxFQUFNeEMsS0FBS2tFLElBQUlsRSxLQUFLOEQsU0FBVUssR0FHOUJxQixFQUFXcEIsRUFBT3FCLGlCQUFpQixjQUFlakQsRUFBS2dDLEdBQzdEZ0IsRUFBU0UsV0FBV1QsR0FLcEIsT0FGa0JwRCxLQUFLOEQsTUFBTWQsT0FBT0MsT0FBTyxDQUFDVSxFQUFTVCxPQUFPUSxHQUFhQyxFQUFTUixVQUFVWSxTQUFTLFFBR3RHLENBRURyRyx1QkFHRSxJQUFJc0csUUFGRTdGLEtBQUtHLFlBR1gsTUFBTTJGLFFBQWdCQyxFQUFTL0YsS0FBSzJELFVBTXBDLEdBSkVrQyxPQURvQm5GLElBQWxCVixLQUFLOEQsU0FDQWdDLEVBQVFGLFNBQVMsY0FFWDVGLEtBQUtnRyxjQUFjRixHQUVyQixLQUFURCxFQUFhLE1BQU0sSUFBSXhGLE1BQU0sMENBQ2pDLE9BQU93RixDQUNSLENBRUR0RyxxQkFBc0IrRSxTQUNkdEUsS0FBS0csaUJBRVdPLElBQWxCVixLQUFLOEQsZUFDRG1DLEVBQVVqRyxLQUFLMkQsU0FBVTlCLEtBQUtDLFVBQVV3QyxHQUFPLENBQUU0QixTQUFVLGVBRTNERCxFQUFVakcsS0FBSzJELGVBQWdCM0QsS0FBS21HLFlBQVk3QixHQUV6RCxDQUVEL0Usb0JBQ1FTLEtBQUtHLGtCQUNMaUcsRUFBR3BHLEtBQUsyRCxTQUFVLENBQUUwQyxPQUFPLEdBQ2xDIn0=
