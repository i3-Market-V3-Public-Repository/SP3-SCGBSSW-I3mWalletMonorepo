"use strict";var e=require("ethers"),t=require("lodash"),r=require("uint8arrays"),a=require("uuid"),i=require("object-sha"),s=require("@i3m/non-repudiation-library"),n=require("did-jwt"),o=require("crypto"),c=require("debug"),d=require("path"),l=require("rxjs"),u=require("@veramo/core"),h=require("@veramo/did-manager"),p=require("@veramo/did-provider-ethr"),f=require("@veramo/did-provider-web"),w=require("@veramo/key-manager"),g=require("@veramo/did-resolver"),y=require("did-resolver"),m=require("@ethersproject/basex"),v=require("@ethersproject/bignumber"),b=require("@ethersproject/contracts"),k=require("@ethersproject/providers"),x=require("ethr-did-registry"),D=require("@ethersproject/address"),S=require("@ethersproject/transactions"),E=require("querystring"),M=require("web-did-resolver"),O=require("@veramo/selective-disclosure"),$=require("@veramo/message-handler"),j=require("@veramo/did-jwt"),A=require("@veramo/credential-w3c"),I=require("fs/promises"),T=require("events"),N=require("write-file-atomic"),R=require("fs");function K(e){return e&&e.__esModule?e:{default:e}}function C(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var a=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,a.get?a:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var P=K(t),J=C(r),q=K(o),W=K(c),U=K(x),V=C(E),B=K(N);var _={encode:e=>e.toString("base64").replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_"),decode:e=>Buffer.from(e,"base64")};function F(e,t){const r=e.match(/^([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)$/);if(null!=r)return{header:JSON.parse(_.decode(r[1]).toString("binary")),payload:JSON.parse(_.decode(r[2]).toString(t)),signature:r[3],data:`${r[1]}.${r[2]}`};throw new Error("invalid_argument: Incorrect format JWS")}class L extends Error{constructor(e,t){super(e),this.code=t?.code??1,this.status=t?.status??500}}const H=async(e,t)=>{const r=[];try{const{keyPair:t}=e.resource,r=JSON.parse(t.publicJwk),a=JSON.parse(t.privateJwk);await s.verifyKeyPair(r,a),t.publicJwk=await s.parseJwk(r,!0),t.privateJwk=await s.parseJwk(a,!0),e.id=await i.digest(t.publicJwk)}catch(e){r.push(new Error("string"==typeof e?e:"unknown validation error"))}return r};function z(e){return Object.keys(e.credentialSubject).filter((e=>"id"!==e))}async function Y(e,t,r){let a;try{a=F(e)}catch(e){return{verification:"failed",error:"Invalid JWT format"}}const i=a.payload;if(void 0!==r){const e=P.default.cloneDeep(r);P.default.defaultsDeep(e,i);const t=(s=i,o=e,Object.keys(s).reduce(((e,t)=>{if(Object.prototype.hasOwnProperty.call(o,t)){if(P.default.isEqual(s[t],o[t])){const r=e.indexOf(t);e.splice(r,1)}}else e.push(t);return e}),Object.keys(o)));if(t.length>0)return{verification:"failed",error:"The following top-level properties are missing or different: "+t.join(", "),decodedJwt:a}}var s,o;const c={resolve:async e=>await t.agent.resolveDid({didUrl:e})};try{return{verification:"success",decodedJwt:(await n.verifyJWT(e,{resolver:c})).payload}}catch(e){if(e instanceof Error)return{verification:"failed",error:e.message,decodedJwt:a};throw new Error("unknown error during verification")}}async function G(e,t,r){const a=[],{signatures:i,...s}=e;let n,o;return"provider"===r?(o=s.parties.providerDid,n=await Y(i.providerSignature,t,s)):(o=s.parties.consumerDid,n=await Y(i.consumerSignature,t,s)),"success"===n.verification?n.decodedJwt?.iss!==o&&a.push(new Error(`Signing DID does not match expected signer: ${n.decodedJwt?.iss??"undefined"} != ${o}`)):a.push(new Error(n.error)),a}const X=W.default("base-wallet"+d.basename(__filename));async function Z(e,t,r,...a){if(t.length<1||void 0===t[0][r])throw new Error("invalid executors");const i=e.successRate??0;if(i<0||i>1)throw new Error("invalid successRate. It should be a value between 0 and 1 (both included)");const s=0===i?1:Math.ceil(i*t.length),n=e.timeout??1e4,o=new l.Observable((e=>{let i=0;t.forEach((s=>{const n=s[r];let o=!1;try{const r=n.call(s,...a);void 0!==(c=r)&&"function"==typeof c.then?(o=!0,r.then((t=>{e.next(t)})).catch((e=>{X(e)})).finally((()=>{i++,i===t.length&&e.complete()}))):e.next(r)}catch(e){X(e)}finally{o||(i++,i===t.length&&e.complete())}var c}))})).pipe(l.bufferCount(s),l.timeout(n)),c=await new Promise(((e,t)=>{const r=o.subscribe({next:t=>{e(t)}});setTimeout((()=>{r.unsubscribe(),t(new Error("Timeout waiting for results reached"))}),n)})).catch();if(c.length<s)throw new Error(`less successful executions (${c.length}) than min requested (${s})`);return c}const Q=async(e,t)=>{const r=[];try{const{dataSharingAgreement:a,keyPair:n}=e.resource,o=await s.validateDataSharingAgreementSchema(a);if(o.length>0)return o;if(a.parties.consumerDid===a.parties.providerDid)throw new Error("the same identity cannot be at the same time the consumer and the provider");const c=await s.validateDataExchangeAgreement(a.dataExchangeAgreement);let d;if(c.length>0&&c.forEach((e=>{r.push(e)})),n.publicJwk===a.dataExchangeAgreement.orig)d="provider";else{if(n.publicJwk!==a.dataExchangeAgreement.dest)throw new Error(`${n.publicJwk} is not either dataExchangeAgreement.orig or dataExchangeAgreement.dest`);d="consumer"}if(await s.verifyKeyPair(JSON.parse(n.publicJwk),JSON.parse(n.privateJwk)),void 0!==e.identity){if(("consumer"===d?a.parties.consumerDid:a.parties.providerDid)!==e.identity)throw new Error(`resource.identity does not match dataSharingAgreement.parties.${d}Did`)}(await G(a,t,"provider")).forEach((e=>{r.push(e)}));(await G(a,t,"consumer")).forEach((e=>{r.push(e)})),e.id=await i.digest(a.dataExchangeAgreement)}catch(e){r.push(new Error("string"==typeof e?e:"unknown validation error"))}return r},ee=async(e,t)=>{const r=[];return r.push(new Error("NOT IMPLEMENTED. The data exchange will be automatically added when adding a valid nr proof")),r},te=W.default("base-wallet:NrpValidator"),re=async(e,t)=>{const r=[];try{const t=e.resource,a=await s.jwsDecode(t,((e,t)=>{const r=t.iss;return JSON.parse(t.exchange[r])})),i=await s.validateDataExchange(a.payload.exchange);i.length>0?i.forEach((e=>{r.push(e)})):(e.parentResource=a.payload.exchange.id,te(`Received NRP for data exchange ${a.payload.exchange.id}:\n`+JSON.stringify(a.payload.exchange,void 0,2)),te(`  associated to data exchange agreement ${e.parentResource}`),e.name=a.payload.proofType)}catch(e){r.push(new Error("string"==typeof e?e:JSON.stringify(e,void 0,2)))}return r},ae=async(e,t)=>[],ie=async(e,t)=>{const r=[],a=e.resource.credentialSubject.id;if(e.identity=a,void 0===e.resource)r.push(new L(""));else try{await t.agent.handleMessage({raw:e.resource.proof.jwt})}catch(e){r.push(e)}return r};class se{constructor(){this.validators={},this.initValidators()}initValidators(){this.setValidator("VerifiableCredential",ie),this.setValidator("Object",ae),this.setValidator("KeyPair",H),this.setValidator("Contract",Q),this.setValidator("DataExchange",ee),this.setValidator("NonRepudiationProof",re)}setValidator(e,t){this.validators[e]=t}async validate(e,t){const r={validated:!1,errors:[]},a=this.validators[e.type];return void 0!==a&&(r.errors=await a(e,t),r.validated=!0),r}}const ne=e=>{const t=e.split(":");if(1===t.length)throw new Error("Wrong did format");if("ethr"===t[1]){const e=t.pop();return t.push(`${e.slice(0,6)}...${e.slice(e.length-6)}`),t.join(":")}return e};const oe=/^(.*)?(0x[0-9a-fA-F]{40}|0x[0-9a-fA-F]{66})$/,ce="0xdca7ef03e98e0dc2b855be647c39abe984fcf21b";var de,le;!function(e){e.EcdsaSecp256k1VerificationKey2019="EcdsaSecp256k1VerificationKey2019",e.EcdsaSecp256k1RecoveryMethod2020="EcdsaSecp256k1RecoveryMethod2020",e.Ed25519VerificationKey2018="Ed25519VerificationKey2018",e.RSAVerificationKey2018="RSAVerificationKey2018",e.X25519KeyAgreementKey2019="X25519KeyAgreementKey2019"}(de||(de={})),function(e){e.DIDOwnerChanged="DIDOwnerChanged",e.DIDAttributeChanged="DIDAttributeChanged",e.DIDDelegateChanged="DIDDelegateChanged"}(le||(le={}));const ue={sigAuth:"SignatureAuthentication2018",veriKey:"VerificationKey2018",enc:"KeyAgreementKey2019"},he={Secp256k1VerificationKey2018:de.EcdsaSecp256k1VerificationKey2019,Ed25519SignatureAuthentication2018:de.Ed25519VerificationKey2018,Secp256k1SignatureAuthentication2018:de.EcdsaSecp256k1VerificationKey2019,RSAVerificationKey2018:de.RSAVerificationKey2018,Ed25519VerificationKey2018:de.Ed25519VerificationKey2018,X25519KeyAgreementKey2019:de.X25519KeyAgreementKey2019};function pe(e){const t="0x"+Buffer.from(e).slice(0,32).toString("hex");return t+"0".repeat(66-t.length)}function fe(e){let t,r=e;if(r.startsWith("did:ethr")){r=r.split("?")[0];const e=r.split(":");r=e[e.length-1],e.length>=4&&(t=e.splice(2,e.length-3).join(":"))}return r.length>42?{address:S.computeAddress(r),publicKey:r,network:t}:{address:D.getAddress(r),network:t}}const we={mainnet:"0x1",ropsten:"0x3",rinkeby:"0x4",goerli:"0x5",kovan:"0x2a"},ge={...we,rsk:"0x1e","rsk:testnet":"0x1f",artis_t1:"0x03c401",artis_s1:"0x03c301",matic:"0x89",maticmum:"0x13881"};var ye;function me(e){if(!e)return{};return ke({networks:[{name:"mainnet",chainId:"0x1",provider:new k.InfuraProvider("homestead",e)},{name:"ropsten",chainId:"0x3",provider:new k.InfuraProvider("ropsten",e)},{name:"rinkeby",chainId:"0x4",provider:new k.InfuraProvider("rinkeby",e)},{name:"goerli",chainId:"0x5",provider:new k.InfuraProvider("goerli",e)},{name:"kovan",chainId:"0x2a",provider:new k.InfuraProvider("kovan",e)}]})}function ve(e){let t=e.provider||e.web3?.currentProvider;if(!t){if(!e.rpcUrl)throw new Error(`invalid_config: No web3 provider could be determined for network ${e.name||e.chainId}`);{const r=e.chainId?e.chainId:ge[e.name||""],a=r?v.BigNumber.from(r).toNumber():r,i=we[e.name||""]?e.name?.replace("mainnet","homestead"):"any";t=new k.JsonRpcProvider(e.rpcUrl,a||i)}}return b.ContractFactory.fromSolidity(U.default).attach(e.registry||ce).connect(t)}function be(e){const t={},r=e.chainId||ge[e.name||""];if(r){e.name&&(t[e.name]=ve(e));t["number"==typeof r?`0x${r.toString(16)}`:r]=ve(e)}else(e.provider||e.web3||e.rpcUrl)&&(t[e.name||""]=ve(e));return t}function ke(e){return{...be(e),...e.networks?.reduce(((e,t)=>({...e,...be(t)})),{})}}!function(e){e.notFound="notFound",e.invalidDid="invalidDid",e.unknownNetwork="unknownNetwork"}(ye||(ye={}));class xe{constructor(e,t,r,a="mainnet",i,s,n=ce){const{address:o,publicKey:c,network:d}=fe(e),l=d||a;if(t)this.contract=t;else{if(!(i||r?.provider||s))throw new Error(" either a contract instance or a provider or rpcUrl is required to initialize");{const e=i||r?.provider;this.contract=ve({name:l,provider:e,registry:n,rpcUrl:s})}}this.signer=r,this.address=o;let u=l?`${l}:`:"";u in["mainnet:","0x1:"]&&(u=""),this.did=c?`did:ethr:${u}${c}`:`did:ethr:${u}${o}`}async getOwner(e,t){return(await this.contract.functions.identityOwner(e,{blockTag:t}))[0]}async attachContract(e){const t=e?await e:await this.getOwner(this.address,"latest"),r=this.signer?this.signer:this.contract.provider.getSigner(t)||this.contract.signer;return this.contract.connect(r)}async changeOwner(e,t={}){const r={gasLimit:123456,gasPrice:1e9,...t},a=await this.attachContract(r.from);delete r.from;const i=await a.functions.changeOwner(this.address,e,r);return await i.wait()}async addDelegate(e,t,r,a={}){const i={gasLimit:123456,gasPrice:1e9,...a},s=await this.attachContract(i.from);delete i.from;const n=pe(e),o=await s.functions.addDelegate(this.address,n,t,r,i);return await o.wait()}async revokeDelegate(e,t,r={}){const a={gasLimit:123456,gasPrice:1e9,...r};e=e.startsWith("0x")?e:pe(e);const i=await this.attachContract(a.from);delete a.from;const s=await i.functions.revokeDelegate(this.address,e,t,a);return await s.wait()}async setAttribute(e,t,r,a={}){const i={gasLimit:123456,gasPrice:1e9,controller:void 0,...a};e=e.startsWith("0x")?e:pe(e),t=t.startsWith("0x")?t:"0x"+Buffer.from(t,"utf-8").toString("hex");const s=await this.attachContract(i.from);delete i.from;const n=await s.functions.setAttribute(this.address,e,t,r,i);return await n.wait()}async revokeAttribute(e,t,r={}){const a={gasLimit:123456,gasPrice:1e9,...r};e=e.startsWith("0x")?e:pe(e),t=t.startsWith("0x")?t:"0x"+Buffer.from(t,"utf-8").toString("hex");const i=await this.attachContract(a.from);delete a.from;const s=await i.functions.revokeAttribute(this.address,e,t,a);return await s.wait()}}function De(e,t){const r={};if(e.eventFragment.inputs.length!==e.args.length)throw new TypeError("malformed event input. wrong number of arguments");return e.eventFragment.inputs.forEach(((t,a)=>{let i=e.args[a];"object"==typeof i&&(i=v.BigNumber.from(i)),"bytes32"===t.type&&(i=function(e){return("string"==typeof e?Buffer.from(e.slice(2),"hex"):Buffer.from(e)).toString("utf8").replace(/\0+$/,"")}(i)),r[t.name]=i})),r._eventName=e.name,r.blockNumber=t,r}function Se(e,t){return t.map((t=>De(e.interface.parseLog(t),t.blockNumber)))}class Ee{constructor(e){this.contracts=function(e={}){const t={...me(e.infuraProjectId),...ke(e)};if(0===Object.keys(t).length)throw new Error("invalid_config: Please make sure to have at least one network");return t}(e)}async getOwner(e,t,r){return new xe(e,this.contracts[t]).getOwner(e,r)}async previousChange(e,t,r){const a=await this.contracts[t].functions.changed(e,{blockTag:r});return v.BigNumber.from(a[0])}async getBlockMetadata(e,t){const r=await this.contracts[t].provider.getBlock(e);return{height:r.number.toString(),isoDate:new Date(1e3*r.timestamp).toISOString().replace(".000","")}}async changeLog(e,t,r="latest"){const a=this.contracts[t],i=a.provider,s=t.startsWith("0x")?t:ge[t],n=s?v.BigNumber.from(s).toNumber():(await i.getNetwork()).chainId,o=[],{address:c,publicKey:d}=fe(e),l=d;let u=await this.previousChange(c,t,r);for(;u;){const e=u,t=Se(a,await i.getLogs({address:a.address,topics:[null,`0x000000000000000000000000${c.slice(2)}`],fromBlock:u.toHexString(),toBlock:u.toHexString()}));t.reverse(),u=null;for(const r of t)o.unshift(r),r.previousChange.lt(e)&&(u=r.previousChange)}return{address:c,history:o,controllerKey:l,chainId:n}}wrapDidDocument(e,t,r,a,i,s,n){const o={"@context":["https://www.w3.org/ns/did/v1","https://identity.foundation/EcdsaSecp256k1RecoverySignature2020/lds-ecdsa-secp256k1-recovery2020-0.0.jsonld"],id:e,verificationMethod:[],authentication:[],assertionMethod:[]};let c=t;const d=[`${e}#controller`],l=[];let u=0,h=Number.POSITIVE_INFINITY,p=!1,f=0,w=0;const g={},y={},b={},k={};for(const t of a){if(-1!==s&&t.blockNumber>s){h>t.blockNumber&&(h=t.blockNumber);continue}u<t.blockNumber&&(u=t.blockNumber);const r=t.validTo||v.BigNumber.from(0),a=`${t._eventName}-${t.delegateType||t.name}-${t.delegate||t.value}`;if(r&&r.gte(n)){if(t._eventName===le.DIDDelegateChanged){const r=t;f++;switch(r.delegateType){case"sigAuth":g[a]=`${e}#delegate-${f}`;case"veriKey":b[a]={id:`${e}#delegate-${f}`,type:de.EcdsaSecp256k1RecoveryMethod2020,controller:e,blockchainAccountId:`${r.delegate}@eip155:${i}`}}}else if(t._eventName===le.DIDAttributeChanged){const r=t,i=r.name.match(/^did\/(pub|svc)\/(\w+)(\/(\w+))?(\/(\w+))?$/);if(i){const t=i[1],s=i[2],n=ue[i[4]]||i[4],o=i[6];switch(t){case"pub":{f++;const t={id:`${e}#delegate-${f}`,type:`${s}${n}`,controller:e};switch(t.type=he[t.type]||s,o){case null:case void 0:case"hex":t.publicKeyHex=r.value.slice(2);break;case"base64":t.publicKeyBase64=Buffer.from(r.value.slice(2),"hex").toString("base64");break;case"base58":t.publicKeyBase58=m.Base58.encode(Buffer.from(r.value.slice(2),"hex"));break;case"pem":t.publicKeyPem=Buffer.from(r.value.slice(2),"hex").toString();break;default:t.value=r.value}b[a]=t,"sigAuth"===i[4]?g[a]=t.id:"enc"===i[4]&&(y[a]=t.id);break}case"svc":w++,k[a]={id:`${e}#service-${w}`,type:s,serviceEndpoint:Buffer.from(r.value.slice(2),"hex").toString()}}}}}else if(t._eventName===le.DIDOwnerChanged){const e=t;if(c=e.owner,"0x0000000000000000000000000000000000000000"===e.owner){p=!0;break}}else t._eventName===le.DIDDelegateChanged||t._eventName===le.DIDAttributeChanged&&t.name.match(/^did\/pub\//)?f++:t._eventName===le.DIDAttributeChanged&&t.name.match(/^did\/svc\//)&&w++,delete g[a],delete b[a],delete k[a]}const x=[{id:`${e}#controller`,type:de.EcdsaSecp256k1RecoveryMethod2020,controller:e,blockchainAccountId:`${c}@eip155:${i}`}];r&&c==t&&(x.push({id:`${e}#controllerKey`,type:de.EcdsaSecp256k1VerificationKey2019,controller:e,publicKeyHex:r}),d.push(`${e}#controllerKey`));const D={...o,verificationMethod:x.concat(Object.values(b)),authentication:d.concat(Object.values(g))};return Object.values(k).length>0&&(D.service=Object.values(k)),Object.values(y).length>0&&(D.keyAgreement=l.concat(Object.values(y))),D.assertionMethod=[...D.verificationMethod?.map((e=>e.id))||[]],p?{didDocument:{...o,"@context":"https://www.w3.org/ns/did/v1"},deactivated:p,versionId:u,nextVersionId:h}:{didDocument:D,deactivated:p,versionId:u,nextVersionId:h}}async resolve(e,t,r,a){const i=t.id.match(oe);if(!i)return{didResolutionMetadata:{error:ye.invalidDid,message:`Not a valid did:ethr: ${t.id}`},didDocumentMetadata:{},didDocument:null};const s=i[2],n=i[1]?i[1].slice(0,-1):"mainnet";let o=a.blockTag||"latest";if("string"==typeof t.query){const e=V.decode(t.query);o="string"==typeof e.versionId?e.versionId:o;try{o=Number.parseInt(o)}catch(e){o="latest"}}if(!this.contracts[n])return{didResolutionMetadata:{error:ye.unknownNetwork,message:`The DID resolver does not have a configuration for network: ${n}`},didDocumentMetadata:{},didDocument:null};let c=v.BigNumber.from(Math.floor((new Date).getTime()/1e3));if("number"==typeof o){const e=await this.getBlockMetadata(o,n);c=v.BigNumber.from(Date.parse(e.isoDate)/1e3)}const{address:d,history:l,controllerKey:u,chainId:h}=await this.changeLog(s,n,"latest");try{const{didDocument:t,deactivated:r,versionId:a,nextVersionId:i}=this.wrapDidDocument(e,d,u,l,h,o,c),s=r?{deactivated:!0}:{};let p={},f={};if(0!==a){const e=await this.getBlockMetadata(a,n);p={versionId:e.height,updated:e.isoDate}}if(i!==Number.POSITIVE_INFINITY){const e=await this.getBlockMetadata(i,n);f={nextVersionId:e.height,nextUpdate:e.isoDate}}return{didDocumentMetadata:{...s,...p,...f},didResolutionMetadata:{contentType:"application/did+ld+json"},didDocument:t}}catch(e){return{didResolutionMetadata:{error:ye.notFound,message:e.toString()},didDocumentMetadata:{},didDocument:null}}}build(){return{ethr:this.resolve.bind(this)}}}class Me{constructor(e){this.options=e,this.resolvers=[];const t=[];if(e.networks.forEach((e=>{e.rpcUrl instanceof Array?e.rpcUrl.forEach(((r,a)=>{void 0===t[a]&&(t[a]=[]),t[a].push({name:e.network,rpcUrl:r})})):(void 0===t[0]&&(t[0]=[]),t[0].push({name:e.network,rpcUrl:e.rpcUrl}))})),t.forEach((e=>{const t=new Ee({networks:e});this.resolvers.push(t)})),0===this.resolvers.length)throw new Error("no networks");this.networks=e.networks,this.multiRpcOptions=e.multiRpcOptions??{}}async getOwner(e,t,r){return await this.multiproviderFnExec("getOwner",e,t,r)}async previousChange(e,t,r){return await this.multiproviderFnExec("previousChange",e,t,r)}async getBlockMetadata(e,t){return await this.multiproviderFnExec("getBlockMetadata",e,t)}async changeLog(e,t,r){return await this.multiproviderFnExec("changeLog",e,t,r)}wrapDidDocument(e,t,r,a,i,s,n){return this.resolvers[0].wrapDidDocument(e,t,r,a,i,s,n)}async resolve(e,t,r,a){return await this.multiproviderFnExec("resolve",e,t,r,a)}build(){return{ethr:this.resolve.bind(this)}}async multiproviderFnExec(e,...t){const r=await Z(this.multiRpcOptions,this.resolvers,e,...t);if((a=r).every((e=>P.default.isEqual(e,a[0]))))return r[0];var a;throw new Error("not all responses are equal, please consider removing the missbehaving/malicious RPC endpoint.")}}const Oe=W.default("base-wallet:DidWalletStore");class $e extends h.AbstractDIDStore{constructor(e){super(),this.store=e}async import(e){return await this.store.set(`identities.${e.did}`,e),!0}async get(e){Oe("Get ddo");const t=await this.store.get("identities",{});if(void 0!==e.did){if(void 0===t[e.did])throw new L("DID not found",{status:404});return t[e.did]}if(void 0!==e.alias)throw new L("Get by alias not implemented.",{status:500});{const e=Object.keys(t);if(0===e.length)throw new L("DID not found",{status:404});return t[e[0]]}}async delete(e){return await this.store.delete(`identities.${e.did}`),!0}async list(e){const t=await this.store.get("identities");if(void 0===t)return[];const{alias:r,provider:a}=e;return Object.keys(t).filter((e=>(void 0===r||t[e].alias===r)&&(void 0===a||t[e].provider===a))).map((e=>t[e]))}}const je=W.default("base-wallet:KMS");class Ae extends w.AbstractKeyManagementSystem{constructor(e){super(),this.keyWallet=e}async createKey(t){const r=t.type,a=await this.keyWallet.createAccountKeyPair();je("Import",t,a);const i=await this.keyWallet.getPublicKey(a);if(!(i instanceof Uint8Array))throw Error("Only Uint8Array supported yet");return{kid:a,type:r,publicKeyHex:e.ethers.utils.hexlify(i).substr(2)}}async deleteKey(e){return await this.keyWallet.delete(e.kid),je("Delete",e),!0}async encryptJWE(e){throw new Error("[encryptJWE] Method not implemented.")}async decryptJWE(e){throw new Error("[decryptJWE] Method not implemented.")}async signJWT(t){let r;const{key:a,data:i}=t;r="string"==typeof i?J.fromString(i,"utf-8"):i;const s=e.ethers.utils.sha256(r),n=e.ethers.utils.arrayify(s),o=await this.keyWallet.signDigest(a.kid,n);return J.toString(o.subarray(0,o.length-1),"base64url")}async signEthTX(t){const{key:r,transaction:a}=t,{v:i,r:s,s:n,from:o,...c}=a;if(e.ethers.utils.computeAddress(`0x${r.publicKeyHex}`).toLowerCase()!==o.toLowerCase())throw new L("Transaction from parammeter does not match the chosen key.");const d=e.ethers.utils.serializeTransaction(c),l=e.ethers.utils.keccak256(d),u=e.ethers.utils.arrayify(l),h=await this.keyWallet.signDigest(t.key.kid,u);return e.ethers.utils.serializeTransaction(c,h)}}const Ie=W.default("base-wallet:KeyWalletStore");class Te extends w.AbstractKeyStore{constructor(e){super(),this.keyWallet=e}async import(e){return Ie("Import key. Doing nothing"),!0}async get(t){const r=t.kid;Ie("Get key",t,r);const a=await this.keyWallet.getPublicKey(r);if(!(a instanceof Uint8Array))throw Error("Only Uint8Array supported yet");return{kid:r,type:"Secp256k1",kms:"keyWallet",publicKeyHex:e.utils.hexlify(a).substr(2)}}async delete(e){return!0}}const Ne="did:ethr:i3m",Re={"did:ethr:i3m":{network:"i3m",rpcUrl:["http://95.211.3.244:8545","http://95.211.3.249:8545","http://95.211.3.250:8545","http://95.211.3.251:8545"]}};class Ke{constructor(e,t,r){this.defaultKms="keyWallet",this.providersData=r;const a=(i={networks:Object.values(this.providersData),multiRpcOptions:{successRate:.5}},new Me(i).build());var i;const s=M.getResolver(),n=new y.Resolver({...a,...s});this.providers={"did:web":new f.WebDIDProvider({defaultKms:this.defaultKms})};for(const[e,t]of Object.entries(this.providersData))this.providers[e]=new p.EthrDIDProvider({defaultKms:this.defaultKms,...{...t,rpcUrl:void 0!==t.rpcUrl?"string"==typeof t.rpcUrl?t.rpcUrl:t.rpcUrl[0]:void 0}});this.agent=u.createAgent({plugins:[new w.KeyManager({store:new Te(t),kms:{keyWallet:new Ae(t)}}),new h.DIDManager({store:new $e(e),defaultProvider:Ne,providers:this.providers}),new A.CredentialIssuer,new O.SelectiveDisclosure,new $.MessageHandler({messageHandlers:[new j.JwtMessageHandler,new O.SdrMessageHandler,new A.W3cMessageHandler]}),new g.DIDResolverPlugin({resolver:n})]})}getProvider(e){const t=this.providers[e];if(void 0===t)throw new L("Identifier provider does not exist: "+e);return t}}function Ce(e){const t=[...e],r=[];for(let a=0;a<e.length;a++){const i=o.randomInt(e.length-a);r.push(t[i]),t.splice(i,1)}return r}const Pe=W.default("base-wallet:base-wallet.ts");const Je=W.default("base-wallet:TestDialog");class qe extends T.EventEmitter{constructor(e,t,r){super();if(!("undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node))throw new Error("FileStore can only be instantiated from Node.js");this.filepath=e,t instanceof o.KeyObject?this.key=t:"string"==typeof t&&(this._password=t),this.defaultModel=r??{},this.initialized=this.init()}on(e,t){return super.on(e,t)}emit(e,...t){return super.emit(e,...t)}async init(){await I.mkdir(d.dirname(this.filepath),{recursive:!0}).catch(),void 0!==this._password&&await this.deriveKey(this._password);const e=await this.getModel();await this.setModel(e)}async deriveKey(e,t){this._passwordSalt=t??o.randomBytes(64),this.key=await We(e,{alg:"scrypt",derivedKeyLength:32,salt:this._passwordSalt})}async getModel(){let e=P.default.cloneDeep(this.defaultModel);try{const t=R.readFileSync(this.filepath);e=void 0===this.key?JSON.parse(t.toString("utf8")):await this.decryptModel(t)}catch(e){if("ENOENT"!==e?.code)throw e}return e}async setModel(e){void 0===this.key?await B.default(this.filepath,JSON.stringify(e)):await B.default(this.filepath,await this.encryptModel(e))}async encryptModel(e){if(void 0===this._password&&void 0===this.key)throw new Error("For the store to be encrypted you must provide a key/password");const t=o.randomBytes(16),r=o.createCipheriv("aes-256-gcm",this.key,t),a=Buffer.concat([r.update(JSON.stringify(e),"utf8"),r.final()]),i=r.getAuthTag();return void 0!==this._passwordSalt?Buffer.concat([this._passwordSalt,t,i,a]):Buffer.concat([t,i,a])}async decryptModel(e){if(void 0===this._password&&void 0===this.key)throw new Error("For the store to be encrypted you must provide a key/password");const t=Buffer.from(e);let r,a,i;if(void 0!==this._password){const e=t.subarray(0,64);0!==e.compare(this._passwordSalt)&&await this.deriveKey(this._password,e),r=t.subarray(64,80),a=t.subarray(80,96),i=t.subarray(96)}else r=t.subarray(0,16),a=t.subarray(16,32),i=t.subarray(32);const s=o.createDecipheriv("aes-256-gcm",this.key,r);return s.setAuthTag(a),JSON.parse(Buffer.concat([s.update(i),s.final()]).toString("utf8"))}async get(e,t){await this.initialized;const r=await this.getModel();return P.default.get(r,e,t)}async set(e,t){await this.initialized;const r=await this.getModel();void 0===t?Object.assign(r,e):P.default.set(r,e,t),await this.setModel(r),this.emit("changed",Date.now())}async has(e){await this.initialized;const t=await this.getModel();return P.default.has(t,e)}async delete(e){await this.initialized;let t=await this.getModel();t=P.default.omit(t,e),await this.setModel(t),this.emit("changed",Date.now())}async clear(){await this.initialized,this.emit("cleared",Date.now()),await I.rm(this.filepath)}async getStore(){return await this.initialized,await this.getModel()}getPath(){return this.filepath}}async function We(e,t,r=!1){let a={};void 0!==t.algOptions&&(a={N:16384,r:8,p:1,...t.algOptions},a.maxmem=256*a.N*a.r);const i=new Promise(((i,s)=>{o.scrypt(e,t.salt,t.derivedKeyLength,a,((e,t)=>{null!==e&&s(e),i(r?t:o.createSecretKey(t))}))}));return await i}class Ue extends T.EventEmitter{constructor(e){super(),this.defaultModel=e,this.model=P.default.cloneDeep(e)}on(e,t){return super.on(e,t)}emit(e,...t){return super.emit(e,...t)}get(e,t){return P.default.get(this.model,e,t)}set(e,t){void 0!==t?(P.default.set(this.model,e,t),this.emit("changed",Date.now())):Object.assign({},this.model,e)}has(e){return P.default.has(this.model,e)}delete(e){this.model=P.default.omit(this.model,e),this.emit("changed",Date.now())}clear(){this.model=P.default.cloneDeep(this.defaultModel),this.emit("cleared",Date.now())}getStore(){return this.model}getPath(){return"RAM"}}const Ve=W.default("base-wallet:TestDialog");const Be=W.default("base-wallet:NullDialog");const _e=W.default("base-wallet:ConsoleToast");exports.BaseWallet=class{constructor(e){this.dialog=e.dialog,this.store=e.store,this.toast=e.toast,this.keyWallet=e.keyWallet,this.resourceValidator=new se,this.provider=e.provider??Ne,this.providersData=e.providersData??Re,this.confirmations={},this.veramo=new Ke(this.store,this.keyWallet,this.providersData)}async executeTransaction(t={}){const r=this.veramo.providersData[this.provider];if(void 0===r?.rpcUrl)throw new L("This provider has incomplete information, cannot execute transaction");let a=t.transaction;const i=t.notifyUser??!0;if(void 0===a&&(a=await this.dialog.text({title:"Execute transaction",message:"Put the transaction. Should start with 0x"})),void 0===a||!a.startsWith("0x"))throw new L(`Invalid transaction ${a??"<undefined>"}`);const s=async e=>{e.wait().then((e=>{this.toast.show({message:"Transaction properly executed",type:"success"}),Pe(e)})).catch((e=>{const t=e.reason??"";this.toast.show({message:"Error sending transaction to the ledger"+t,type:"error"}),Pe(t)}))},n=async(e,t)=>{const r=await e.sendTransaction(t);i?s(r).catch((e=>{Pe(e)})):Pe(r)},o=Ce(r.rpcUrl instanceof Array?r.rpcUrl:[r.rpcUrl]).map((t=>new e.ethers.providers.JsonRpcProvider(t)));let c=!1;for(const e of o)try{await n(e,a),c=!0;break}catch(e){Pe(e)}if(!c)throw new L("Error sending transaction to the blockchain")}async queryBalance(){const t=this.veramo.providersData[this.provider];if(void 0===t?.rpcUrl)throw new L(`The provider '${this.provider}' has incomplete information: cannot execute transaction`);const r=await this.veramo.agent.didManagerFind(),a=await this.dialog.select({message:"Select an account to get its balance.",values:r,getText:e=>e.alias??e.did});if(void 0===a)throw new L("Query balance cancelled");const i=Ce(t.rpcUrl instanceof Array?t.rpcUrl:[t.rpcUrl]).map((t=>new e.ethers.providers.StaticJsonRpcProvider(t))),s=e.ethers.utils.computeAddress(`0x${a.keys[0].publicKeyHex}`),n=await i[0].getBalance(s);console.log(n);const o=await Z({successRate:0},i,"getBalance",s),c=e.ethers.utils.formatEther(o[0]);this.toast.show({message:"Balance",details:`The account '${s}' current balance is ${c} ETH.`,type:"success"})}async createTransaction(){const t=this.veramo.providersData[this.provider];if(void 0===t?.rpcUrl)throw new L("This provider has incomplete information, cannot execute transaction");const r=await this.veramo.agent.didManagerFind(),a=await this.dialog.form({title:"Create Transaction",descriptors:{from:{type:"select",message:"Select the origin account",values:r,getText:e=>e.alias??"<UNKNOWN>"},to:{type:"text",message:"Type the destination account"},value:{type:"text",message:"Put the ether value"},sign:{type:"confirmation",message:"Sign the transaction?",acceptMsg:"Sign",rejectMsg:"Cancel"}},order:["from","to","value","sign"]});if(void 0===a)throw new L("Create transaction cancelled");const i=Ce(t.rpcUrl instanceof Array?t.rpcUrl:[t.rpcUrl]).map((t=>new e.ethers.providers.JsonRpcProvider(t))),s=e.ethers.utils.computeAddress(`0x${a.from.keys[0].publicKeyHex}`),n=(await Z({successRate:0},i,"getTransactionCount",s,"latest"))[0],o=(await Z({successRate:0},i,"getGasPrice"))[0],c={to:a.to,value:e.ethers.utils.parseEther(a.value),nonce:Number(n),gasLimit:e.ethers.utils.hexlify(1e5),gasPrice:o};let d="";if(a.sign){d=(await this.identitySign({did:a.from.did},{type:"Transaction",data:{...c,from:s}})).signature}else d=e.ethers.utils.serializeTransaction(c);await this.dialog.confirmation({message:`Transaction created, click the input to copy its value.\n<input value="${d}" disabled></input>`,acceptMsg:"Continue",rejectMsg:""})}async wipe(){if(!0!==await this.dialog.confirmation({title:"Delete Wallet?",message:"Are you sure you want to delete this wallet?",acceptMsg:"Delete",rejectMsg:"Cancel"}))throw new L("Operation rejected by user");await Promise.all([this.store.clear(),this.keyWallet.wipe()])}async selectIdentity(e){const t=await this.veramo.agent.didManagerFind(),r=`${e?.reason??"Authentication required. Please, select an identity to proceed."}`,a=await this.dialog.select({message:r,values:t,getText:e=>void 0!==e.alias?e.alias:e.did});if(void 0===a)throw new L("No did selected");return a}async selectCredentialsForSdr(e){if(null===e.data||void 0===e.data||void 0===e.from)return;const t=e.data,r={},a=await this.store.get("resources",{});for(const e of Object.values(a))if("VerifiableCredential"===e.type&&void 0!==e.identity)for(const a of Object.keys(e.resource.credentialSubject)){if("id"===a)continue;const i=t.claims.find((e=>e.claimType===a));if(void 0!==i){let t=r[e.identity];void 0===t&&(t={},r[e.identity]=t);let a=t[i.claimType];void 0===a&&(a={...i,credentials:[]},t[i.claimType]=a),a.credentials.push(e.resource)}}const i={},s=t.claims.filter((e=>!0===e.essential));for(const e of Object.keys(r)){const t=r[e];let a=!0;for(const e of s)if(void 0===t[e.claimType]){a=!1;break}a&&(i[e]=t)}let n;const o=Object.keys(i);if(0===o.length);else if(1===o.length)n=Object.keys(i)[0];else{const e=(await this.veramo.agent.didManagerFind()).filter((e=>o.includes(e.did))),r=`Requested claims ${t.claims.map((e=>e.claimType)).join(",")} are available in the following identities. Please select one to continue...`,a=await this.dialog.select({message:r,values:e,getText:e=>void 0!==e.alias?`${e.alias} (${ne(e.did)})`:ne(e.did)});void 0!==a&&(n=a.did)}if(void 0===n)throw new L("Selective disclousure cancelled by the user",{status:403});const c=i[n],d=[];for(;;){const t=await this.dialog.form({title:"Selective disclosure",descriptors:Object.values(c).reduce(((t,r)=>({...t,[r.claimType]:{type:"select",message:`${e.from??"UNKNOWN"} has requested the claim <b>${r.claimType}</b>.You have the following claim/s that meet the request. \nSelect the claim to disclouse or leave empty for not disclousing it.${!0===r.essential?"\n<b>This claim is compulsory. Not disclosing it will cancel the disclosure.</b>":""}`,values:[void 0,...r.credentials],getText(e){if(void 0===e)return"Don't disclose";const t=e.credentialSubject[r.claimType];return`${r.claimType}=${t} (by ${ne(e.issuer.id)})`},getContext:e=>void 0!==e?"success":"danger"}})),{}),order:Object.keys(c)});if(void 0===t){if(!0===await this.dialog.confirmation({message:"You cancelled the selective disclosure. Are you sure?",acceptMsg:"Yes",rejectMsg:"No",allowCancel:!1}))throw new L("Selective disclosure denied")}else{const e=[];for(const[r,a]of Object.entries(t))if(void 0!==a)d.push(a);else{void 0!==s.find((e=>e.claimType===r))&&e.push(r)}let r;if(e.length>0)r=await this.dialog.confirmation({message:`You skipped the mandatory claims: ${e.join(", ")}. <b>The selective disclosure will be cancelled</b>. \nContinue?`,acceptMsg:"No",rejectMsg:"Yes",allowCancel:!1});else{if(0!==d.length)break;r=await this.dialog.confirmation({message:"You did not select any claim.<b>The selective disclosure will be cancelled</b>. \nContinue?",acceptMsg:"No",rejectMsg:"Yes",allowCancel:!1})}if(!1===r)throw new L("Selective disclosure denied")}}return await this.veramo.agent.createVerifiablePresentation({presentation:{holder:n,verifier:[e.from],verifiableCredential:d,request:e.raw},proofFormat:"jwt",save:!1})}getKeyWallet(){return this.keyWallet}async call(e){await this[e.call]()}async getIdentities(){return await this.store.get("identities",{})}async identityList(e){const{alias:t}=e;return(await this.veramo.agent.didManagerFind({alias:t})).map((e=>({did:e.did})))}async identityCreate(e){const{alias:t}=e;if(void 0!==t){const e=await this.getIdentities();for(const r of Object.values(e))if(r.alias===t)return this.toast.show({message:"Alias already exists",details:`An identity with alias ${t} already exists. If you want to create a new one, please delete the old one first`,type:"warning"}),{did:r.did}}if(!0!==await this.dialog.confirmation({message:`Are you sure you want to create an identity${void 0!==t?` with alias '${t}'`:""}?`,acceptMsg:"Yes",rejectMsg:"No"}))throw new L("User cancelled the operation",{status:403});const{did:r}=await this.veramo.agent.didManagerCreate({alias:t,provider:this.provider});return{did:r}}async identitySelect(e){const{did:t}=await this.selectIdentity(e);return{did:t}}async identitySign(e,t){let r;switch(t.type){case"Transaction":{const{data:a}=t;if(void 0===a)throw new L("No transaction present on the request",{code:400});const i=await this.veramo.agent.didManagerGet(e);r={signature:await this.veramo.agent.keyManagerSignEthTX({kid:i.keys[0].kid,transaction:a})};break}case"Raw":{const{data:a}=t;if(void 0===a)throw new L("No data present on the request",{code:400});const i=await this.veramo.agent.didManagerGet(e);r={signature:await this.veramo.agent.keyManagerSignJWT({kid:i.keys[0].kid,data:J.fromString(a.payload,"base64url")})};break}case"JWT":{const{data:a}=t;if(void 0===a)throw new L("No data present on the request",{code:400});const i=await this.veramo.agent.didManagerGet(e),s=function(e,t,r){return`${_.encode(Buffer.from(JSON.stringify(e),"binary"))}.${_.encode(Buffer.from(JSON.stringify(t),r))}`}({...a.header??void 0,alg:"ES256K",typ:"JWT"},{...a.payload,iss:e.did,iat:Math.floor(Date.now()/1e3)});r={signature:`${s}.${await this.veramo.agent.keyManagerSignJWT({kid:i.keys[0].kid,data:s})}`};break}default:throw new L("Unknown sign data type")}return r}async identityInfo(t){const r=await this.veramo.agent.didManagerGet({did:t.did}),a=P.default.pick(r,["did","alias","provider"]);let i=[];return r.provider.startsWith("did:ethr")&&(i=r.keys.map((t=>e.ethers.utils.computeAddress(`0x${t.publicKeyHex}`)))),{...a,addresses:i}}async identityDeployTransaction(e,t){throw new Error("Method not implemented.")}async getResources(){return await this.store.get("resources",{})}async getResource(e){const t=await this.getResources(),r=Object.keys(t).map((e=>t[e])).filter((t=>t.id===e));if(1!==r.length)throw Error("resource not found");return r[0]}async setResource(e){let t;if(void 0!==e.parentResource)try{t=await this.getResource(e.parentResource)}catch(t){throw Pe("Failed to add resource since parent resource does not exist:\n"+JSON.stringify(e,void 0,2)),new Error("Parent resource for provided resource does not exist")}if(void 0!==e.identity&&!await this.store.has(`identities.${e.identity}`))throw Pe("Failed to add resource since the identity is associated to does not exist:\n"+JSON.stringify(e,void 0,2)),new Error("Identity for this resource does not exist");if(void 0!==t){if(void 0!==e.identity&&t.identity!==e.identity)throw Pe("Failed to add resource since it has a different identity than its parent resource"),new Error("Identity mismatch between parent and child resources");void 0===e.identity&&(e.identity=t.identity)}await this.store.set(`resources.${e.id}`,e)}async resourceList(e){const t=Object.keys(e),r=[],a=[];if(t.includes("type")&&(r.push(`type '<code>${e.type??"unknown"}</code>'`),a.push((t=>t.type===e.type))),t.includes("identity")&&(""!==e.identity&&void 0!==e.identity?(r.push(`identity '<code>${e.identity}</code>'`),a.push((t=>t.identity===e.identity))):(r.push("not liked to any identity"),a.push((e=>void 0===e.identity)))),t.includes("parentResource")){let t;try{t=await this.getResource(e.parentResource)}catch(e){throw new L("Invalid parentResource id",{status:400})}""!==e.parentResource&&void 0!==e.parentResource?(r.push(`parent-resource:\n\tid '<code>${e.parentResource}</code>\n\t<code>${t.type}</code>'`),a.push((t=>t.parentResource===e.parentResource))):a.push((e=>void 0===e.parentResource))}const i=`One application wants to retrieve all your stored resources${r.length>0?" with:\n"+r.join("\n\t"):""}.\nDo you agree?`;if(!1===await this.dialog.confirmation({message:i,acceptMsg:"Yes",rejectMsg:"No"}))throw new L("User cancelled the operation",{status:403});const s=await this.getResources();return Object.keys(s).map((e=>s[e])).filter((e=>a.reduce(((t,r)=>t&&r(e)),!0)))}async deleteResource(e,t=!0){let r=!0;if(t&&(r=await this.dialog.confirmation({message:"Are you sure you want to delete this resource and all its children resources (if any)? This action cannot be undone",acceptMsg:"Delete",rejectMsg:"Cancel"})),!0===r){await this.store.delete(`resources.${e}`);const t=await this.getResources(),r=Object.keys(t).map((e=>t[e])).filter((t=>t.parentResource===e));for(const e of r)await this.deleteResource(e.id,!1)}}async deleteIdentity(e){if(!0===await this.dialog.confirmation({message:"Are you sure you want to delete this identity and all its associated resources (if any)?\n"+e+"\nThis action cannot be undone",acceptMsg:"Delete",rejectMsg:"Cancel"})){await this.veramo.agent.didManagerDelete({did:e});const t=await this.getResources(),r=Object.keys(t).map((e=>t[e])).filter((t=>t.identity===e));for(const e of r)await this.deleteResource(e.id,!1)}}async resourceCreate(e){const t={...e,id:a.v4()};if("Contract"===t.type&&void 0===t.resource.keyPair){let e,r;try{e=await i.digest(t.resource.dataSharingAgreement.dataExchangeAgreement.orig),r=await this.getResource(e)}catch(a){try{e=await i.digest(t.resource.dataSharingAgreement.dataExchangeAgreement.dest),r=await this.getResource(e)}catch(e){throw new L("No associated keyPair found for this contract, please provide one",{status:400})}}t.resource.keyPair=r.resource.keyPair,t.parentResource=e}const r=await this.resourceValidator.validate(t,this.veramo);if(!r.validated)throw new L(`Resource validation failed: type ${t.type} not supported`,{status:400});if(r.errors.length>0){const e=[];throw r.errors.forEach((t=>{e.push(t.message)})),new L("Resource validation failed:\n"+e.join("\n"),{status:400})}switch(t.type){case"VerifiableCredential":{const e=z(t.resource).map((e=>`  - ${e}: ${JSON.stringify(t.resource.credentialSubject[e])}`)).join("\n");if(!0!==await this.dialog.confirmation({message:`Do you want to add the following verifiable credential: \n${e}`}))throw new L("User cancelled the operation",{status:403});break}case"Object":if(!0!==await this.dialog.confirmation({message:"Do you want to add an object into your wallet?"}))throw new L("User cancelled the operation",{status:403});break;case"KeyPair":if(!0!==await this.dialog.confirmation({message:`Do you want to add the following keys to your wallet?\n\t${JSON.stringify(t.resource.keyPair,void 0,2)}`}))throw new L("User cancelled the operation",{status:403});break;case"Contract":{const{dataSharingAgreement:e,keyPair:r}=t.resource;if(!0!==await this.dialog.confirmation({message:`Do you want to add the a data sharing agreement to your wallet?\n\tofferingId: ${e.dataOfferingDescription.dataOfferingId}\n\tproviderDID: ${e.parties.providerDid}\n\tconsumerDID: ${e.parties.consumerDid}`}))throw new L("User cancelled the operation",{status:403});const a=await i.digest(r.publicJwk),s={id:a,identity:t.identity,type:"KeyPair",resource:{keyPair:r}};t.parentResource=a;try{await this.setResource(s)}catch(e){throw new L("Failed to add resource",{status:500})}break}case"NonRepudiationProof":{const e=F(t.resource).payload,r=e.exchange,{id:a,cipherblockDgst:n,blockCommitment:o,secretCommitment:c,...d}=r,l=await i.digest(d);if(!this.confirmations[l]){const t={value:"yes",text:"Yes",context:"success"},r={value:"no",text:"No",context:"danger"},a={value:"yesToAll",text:"Yes to all for this data sharing agreement",context:"success"},i=await this.dialog.select({message:`Do you want to add a non repudiation proof into your wallet?\nType: ${e.proofType}\nExchangeId: ${await s.exchangeId(e.exchange)}`,values:[t,a,r],getText:e=>e.text,getContext:e=>e.context});if(void 0===i||"no"===i.value)throw new L("User cancelled the operation",{status:403});"yesToAll"===i.value&&(this.confirmations[l]=!0)}if(!await this.store.has(`resources.${t.parentResource}`)){const e={id:a,parentResource:l,type:"DataExchange",resource:r};try{await this.setResource(e)}catch(e){throw new L("Failed to add resource",{status:500})}}break}default:throw new L("Resource type not supported",{status:501})}return await this.setResource(t),t}async selectiveDisclosure(e){const t=e.jwt;let r;try{r=await this.veramo.agent.handleMessage({raw:t,save:!1})}catch(e){if(e instanceof Error)throw new L(`Cannot verify selective disclousure request: ${e.message}`);throw e}if(void 0===r.from)throw new L("Selective disclosure request origin not defined");const a=await this.selectCredentialsForSdr(r);if(void 0===a)throw new L("No verifiable credentials selected");return{jwt:a.proof.jwt}}async transactionDeploy(e){return await this.executeTransaction({transaction:e.transaction}),{}}async didJwtVerify(e){try{return await Y(e.jwt,this.veramo,e.expectedPayloadClaims)}catch(e){if("string"==typeof e)throw new L(e);throw new Error("string"==typeof e?e:"unknown error")}}async providerinfoGet(){const e=this.veramo.providersData[this.provider];return{provider:this.provider,...e}}},exports.ConsoleToast=class{show(e){_e("Show message:",e.message)}close(e){_e("Close toast",e)}},exports.DEFAULT_PROVIDER=Ne,exports.DEFAULT_PROVIDERS_DATA=Re,exports.FileStore=qe,exports.NullDialog=class{constructor(){this.valuesStack=[{text:"With love for my caller",confirmation:!0,selectMap(e){if(e.length>0)return e[0]}}]}get values(){return this.valuesStack[this.valuesStack.length-1]}async setValues(e,t){this.valuesStack.push(Object.assign({},this.values,e)),await t(),this.valuesStack.pop()}async text(e){return Be("Returning a dummy text:",this.values.text),this.values.text}async confirmation(e){return Be("Ask for user confirmation:",this.values.confirmation),this.values.confirmation}async select(e){const t=this.values.selectMap(e.values);return Be("Pick item ",t," from ",e.values),t}async authenticate(){throw new Error("Method not implemented.")}async form(e){const t={},r=Object.keys(e.descriptors);for(const a of r){let r;const i=e.descriptors[a];switch(i.type){case"confirmation":r=this.confirmation(i);break;case"select":r=this.select(i);break;case"text":r=this.text(i)}void 0!==r&&(t[a]=await r)}return t}},exports.RamStore=Ue,exports.TestDialog=class{constructor(){this.valuesStack=[{text:"With love for my caller",confirmation:!0,selectMap(e){if(e.length>0)return e[0]}}]}get values(){return this.valuesStack[this.valuesStack.length-1]}async setValues(e,t){this.valuesStack.push(Object.assign({},this.values,e)),await t(),this.valuesStack.pop()}async text(e){return Je("Returning a dummy text:",this.values.text),this.values.text}async confirmation(e){return Je("Ask for user confirmation:",this.values.confirmation),this.values.confirmation}async select(e){const t=this.values.selectMap(e.values);return Je("Pick item ",t," from ",e.values),t}async authenticate(){throw new Error("Method not implemented.")}async form(e){const t={},r=Object.keys(e.descriptors);for(const a of r){let r;const i=e.descriptors[a];switch(i.type){case"confirmation":r=this.confirmation(i);break;case"select":r=this.select(i);break;case"text":r=this.text(i)}void 0!==r&&(t[a]=await r)}return t}},exports.TestStore=Ue,exports.TestToast=class{show(e){Ve("Show message:",e.message)}close(e){Ve("Close toast",e)}},exports.Veramo=Ke,exports.WalletError=L,exports.base64url=_,exports.deriveKey=We,exports.didJwtVerify=Y,exports.getCredentialClaims=z,exports.jwkSecret=(e=q.default.randomBytes(32))=>({kid:a.v4(),kty:"oct",k:_.encode(e)}),exports.multipleExecutions=Z,exports.parseAddress=function(t){const r=t.match(/^(0x)?([\da-fA-F]{40})$/);if(null==r)throw new RangeError("incorrect address format");const a=r[2];return e.ethers.utils.getAddress("0x"+a)},exports.parseHex=function(e,t=!0){const r=e.match(/^(0x)?(([\da-fA-F][\da-fA-F])+)$/);if(null==r)throw new RangeError("wrong hex input");const a=r[2];return t?"0x"+a:a},exports.verifyDataSharingAgreementSignature=G;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
