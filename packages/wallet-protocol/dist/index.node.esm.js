import t from"crypto";import*as e from"@juanelas/base64";import n from"pbkdf2-hmac";import*as s from"object-sha";class r{async send(t,e,n){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var i={...Object.freeze({__proto__:null,COMMITMENT_LENGTH:256,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,INITIAL_PORT:29170,NONCE_LENGTH:128,PORT_LENGTH:12,PORT_SPACE:4096}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class a{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class o{async randomFill(t,e,n){throw new Error("not implemented")}async randomFillBits(t,e,n){const s=Math.ceil(n/8),r=new Uint8Array(s);await this.randomFill(r,0,s),v.insertBits(r,t,0,e,n)}}class c{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class h{async digest(t,e){throw new Error("not implemented")}}const d=new class extends o{async randomFill(e,n,s){return await new Promise((r=>{t.randomFill(e,n,s,(()=>{r()}))}))}};class u extends c{async encrypt(e){const n=new Uint8Array(12);await d.randomFill(n,0,n.length);const s=t.createSecretKey(this.key),r=t.createCipheriv(this.algorithm,s,n),i=[];return i.push(n),i.push(r.update(e)),i.push(r.final()),i.push(r.getAuthTag()),v.join(...i)}async decrypt(e){const n=[];if("aes-256-gcm"===this.algorithm)n[0]=12,n[2]=16;n[1]=e.length-n[0]-(n[2]??0);const[s,r,i]=v.split(e,...n),a=t.createSecretKey(this.key),o=t.createDecipheriv(this.algorithm,a,s);void 0!==i&&o.setAuthTag(i);const c=[];return c.push(o.update(r)),c.push(o.final()),v.join(...c)}}class l extends a{constructor(){super(),this.ecdh=t.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const p=new class extends h{async digest(e,n){const s=t.createHash(e).update(n).digest();return new Uint8Array(s.buffer)}},w=t=>(new TextEncoder).encode(t),y=t=>(new TextDecoder).decode(t),g=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const n=new Uint8Array(e);let s=t;for(let t=e-1;t>=0;t--){const e=s>>8,r=s-(e<<8);n[t]=r,s=e}return n},m=t=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]<<t.length-1-n;return e},f=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},x=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),b=t=>e.encode(t,!0,!1),P=t=>e.decode(t,!1),v={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),n=new Uint8Array(e);let s=0;for(const e of t)n.set(e,s),s+=e.length;return n},split:(t,...e)=>{const n=[];let s=0;for(const r of e)n.push(t.slice(s,s+r)),s+=r;return n},insertBytes:(t,e,n,s,r)=>{for(let i=0;i<r;i++)e[i+s]=t[i+n]},insertBits:(t,e,n,s,r)=>{let i=Math.floor(n/8),a=n%8,o=Math.floor(s/8),c=s%8,h=t[i]??0;const d=c-a;for(let n=0;n<r;n++){let n;n=d>=0?(h&128>>a)<<d:h&128>>a;const s=e[o]&~(128>>c)|n;e[o]=s,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,n)=>{const s=Math.ceil(n/8),r=new Uint8Array(s);return v.insertBits(t,r,e,0,n),r}};class E{constructor(t){this.maxLength=t,this._values=new Array(t),this._first=0,this._length=0}get length(){return this._length}push(t){this._values[this.lastIndex]=t,this.length>=this.maxLength?this._first=(this._first+1)%this.maxLength:this._length++}pop(){if(this.length>0){const t=this._values[this._first];return this._first=(this._first+1)%this.maxLength,this._length--,t}}get lastIndex(){return(this._first+this._length)%this.maxLength}get last(){return this._values[this.lastIndex]}}class _{constructor(t=1){this.queueLength=t,this.queue=new E(t)}get promise(){return this.createPromise()}async createPromise(){const t=this.queue.pop();return void 0!==t?t:await new Promise(((t,e)=>{if(void 0!==this.rejectPending||void 0!==this.resolvePending)return e(new K("wallet protocol: cannot create two promises of one subject")),void this.unbindPromise();this.resolvePending=e=>{t(e)},this.rejectPending=t=>e(t)}))}next(t){null!=this.resolvePending?(this.resolvePending(t),this.unbindPromise()):this.queue.push(t)}err(t){null!=this.rejectPending&&(this.rejectPending(t),this.unbindPromise())}finish(){void 0!==this.rejectPending&&(this.rejectPending(new K("wallet protocol: the subject has a pending promise")),this.unbindPromise())}unbindPromise(){this.resolvePending=void 0,this.rejectPending=void 0}}class S{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const n=this.events[t];return void 0!==n&&(n.forEach((t=>t(...e))),!0)}}const T=async(t,e,s)=>{const r=new Uint8Array(16),i=new Uint8Array(96),a=f(t),o=f(e);v.insertBytes(s,i,0,0,32),v.insertBytes(a,i,0,32,32),v.insertBytes(o,i,0,64,32);const c=await n(i,r,1,32);return new Uint8Array(c)};class N{constructor(t,e,n,s,r,i,a,o){this.port=t,this.from=e,this.to=n,this.na=s,this.nb=r,this.secret=i,this.cipher=new u("aes-256-gcm",a),this.decipher=new u("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:b(this.na),nb:b(this.nb),secret:b(this.secret)}}async fromHash(){return await s.digest(this.from)}async toHash(){return await s.digest(this.to)}static async fromSecret(t,e,n,r,i,a){const o=await s.digest(e),c=await s.digest(n),h=await T(o,c,a),d=await T(c,o,a);return new N(t,e,n,r,i,a,h,d)}static async fromJSON(t){const e=P(t.na),n=P(t.nb),s=P(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,n,s)}}class O{constructor(t,e,n){this.transport=t,this.masterKey=e,this.code=n}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:x(this.code)}}static async fromJSON(t,e){const n=await N.fromJSON(e.masterKey),s=f(e.code);let r;if("object"==typeof t)r=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");r=new t}return new O(r,n,s)}}class A extends S{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,n)=>t^e[n]))}async computeNx(){const t=Math.ceil(i.NONCE_LENGTH/8),e=new Uint8Array(t);return await d.randomFillBits(e,0,i.NONCE_LENGTH),e}async computeCx(t,e,n){const s=Math.ceil(i.NONCE_LENGTH/8),r=Math.ceil(i.DEFAULT_RANDOM_LENGTH/8),a=f(t.a.publicKey),o=f(t.b.publicKey),c=new Uint8Array(64+s+r);v.insertBytes(a,c,1,0,32),v.insertBytes(o,c,1,32,32),v.insertBits(e,c,0,512,i.NONCE_LENGTH),v.insertBits(n,c,0,512+i.NONCE_LENGTH,i.DEFAULT_RANDOM_LENGTH);return await p.digest("sha256",c)}async validateAuthData(t,e){const{cx:n,nx:s}=e.received,{cx:r,nx:i,r:a}=e.sent;if(!(n.length===r.length&&s.length===i.length))throw new U("invalid received auth data length");if(n.every(((t,e)=>t===r[e])))throw new U("received and sent Cx are the same");if(!(await this.computeCx(t,s,a)).every(((t,e)=>t===n[e])))throw new U("received a wrong Cx")}async computeMasterKey(t,e,r){const a=Math.ceil(i.NONCE_LENGTH/8),o=await t.deriveBits(e.received.publicKey),c=new Uint8Array(16),h=new Uint8Array(32+2*a+6+64),d=new Uint8Array([109,97,115,116,101,114]),u=await s.digest(e.a,"SHA-256"),l=f(u),p=await s.digest(e.b,"SHA-256"),w=f(p);v.insertBytes(o,h,0,0,32),v.insertBytes(r.a.nx,h,0,32,a),v.insertBytes(r.a.nx,h,0,32+a,a),v.insertBytes(d,h,0,32+2*a,6),v.insertBytes(l,h,0,32+2*a+6,32),v.insertBytes(w,h,0,32+2*a+6+32,32);const y=await n(h,c,1,32);return await N.fromSecret(e.port,e.sent.id,e.received.id,r.a.nx,r.b.nx,new Uint8Array(y))}async run(){const t=(async()=>{const t=new l;await t.generateKeys();const e=await t.getPublicKey(),n=await this.transport.prepare(this,e);let s;try{s=await this.transport.publicKeyExchange(this,n)}catch(t){if(t instanceof TypeError)throw new U(t.message);throw t}const r=await this.computeR(s.a.rx,s.b.rx),i=await this.computeNx(),a={r:r,nx:i,cx:await this.computeCx(s,i,r)},o=await this.transport.authentication(this,a);await this.validateAuthData(s,o);const c=await this.computeMasterKey(t,s,o),h=await this.transport.verification(this,c),d=new O(this.transport,c,h);return this.emit("masterKey",c),d})();return this._running=t,t.finally((()=>{this.transport.finish(this)})),await t}get isRunning(){return void 0!==this._running}async finish(){this.transport.finish(this),void 0!==this._running&&await this._running.catch((()=>{}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}}class L{constructor(t,e){this.buffer=t,this.l=e}toString(){return b(this.buffer)}extractPort(){const t=Math.ceil(i.PORT_LENGTH/8),e=this.l%8,n=new Uint8Array(t);v.insertBits(this.buffer,n,this.l,e,i.PORT_LENGTH);const s=m(n);return i.INITIAL_PORT+s}extractRb(){return v.extractBits(this.buffer,0,this.l)}static async generate(t,e){const n=Math.ceil((e+i.PORT_LENGTH)/8),s=new Uint8Array(n);await d.randomFillBits(s,0,e);const r=t-i.INITIAL_PORT;if(r<0||r>i.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const a=g(r,2);return v.insertBits(a,s,16-i.PORT_LENGTH,e,i.PORT_LENGTH),new L(s,e)}static fromString(t,e){return new L(P(t),e)}}const R={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return w(JSON.stringify(e))},async getMasterKey(t){const e=y(t);return await N.fromJSON(JSON.parse(e))}};class K extends Error{}class U extends K{}class B extends r{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??i.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const n=await this.opts.getConnectionString();if(""===n)throw new U("empty connection string");try{this.connString=L.fromString(n,this.opts.l)}catch(t){throw new U("invalid pin format")}const s=Math.ceil(this.opts.l/8),r=new Uint8Array(s);return await d.randomFillBits(r,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:r}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new U("missing connection string");const n=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:b(e.rx)}),s={id:n.sender,publicKey:n.publicKey,rx:this.connString.extractRb()};return{a:e,b:s,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const n=await this.sendRequest({method:"commitment",cx:b(e.cx)}),s=await this.sendRequest({method:"nonce",nx:b(e.nx)}),r={cx:P(n.cx),nx:P(s.nx),r:e.r};return{a:e,b:{cx:P(n.cx),nx:P(s.nx),r:e.r},sent:e,received:r}}async verification(t,e){const n=await this.sendRequest({method:"verification"}),s=P(n.ciphertext);return await e.decrypt(s)}finish(t){super.finish(t),this.connString=void 0}}class C extends B{async baseSend(t,e){{const n=await import("http");return await new Promise((s=>{const r=e.body,a=n.request({path:`/${i.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(r)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{s({status:t.statusCode??200,body:e})}))}));a.write(r),a.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),n=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(n.body)}async send(t,e,n){const s=w(JSON.stringify(n)),r=await t.encrypt(s),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:y(e)},body:b(r)});if(i.status<=300&&i.status>=200){const e=P(i.body),n=await t.decrypt(e);i.body=y(n)}return i}}class H extends r{constructor(t={}){super(),this.opts={port:t.port??i.INITIAL_PORT,timeout:t.timeout??i.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??i.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??R},this.rpcSubject=new _}async pairing(t,e,n){this.stopPairing(),this.connString=await L.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),n)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:n,res:s}=await this.waitRequest("publicKeyExchange");await s.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const r={id:n.sender,publicKey:n.publicKey,rx:P(n.ra??"")};return{a:r,b:e,port:this.connString.extractPort(),sent:e,received:r}}async authentication(t,e){const n=await this.waitRequest("commitment");await n.res.send({method:"commitment",cx:b(e.cx)});const s=n.req,r=await this.waitRequest("nonce");await r.res.send({method:"nonce",nx:b(e.nx)});const i=r.req,a={cx:P(s.cx),nx:P(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const n=await this.waitRequest("verification"),s=await this.opts.codeGenerator.generate(e),r=await e.encrypt(s);return await n.res.send({method:"verificationChallenge",ciphertext:b(r)}),s}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.finish(),this.connString=void 0}}class M{}class q extends M{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}class j extends H{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${i.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const n of t)e.push(n);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const n=await this.readRequestBody(t),s=JSON.parse(n);this.rpcSubject.next({req:s,res:new q(e)})}async dispatchEncryptedMessage(t,e,n){const s=w(n),r=await this.opts.codeGenerator.getMasterKey(s),i=await this.readRequestBody(t),a=P(i),o=await r.decrypt(a),c=y(o),h=JSON.parse(c);let d={};const u=h.init??{};void 0!==u.body&&""!==u.body&&(d=JSON.parse(u.body));const l=Object.entries(u.headers??{}).reduce(((t,[e,n])=>(t[e.toLocaleLowerCase()]=n,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return u.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return d;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,n,s)=>{const i=void 0===n.statusCode?500:n.statusCode;if(i>=200&&i<300){const i=s[0],a=async()=>{let a;if("string"==typeof i)a=w(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await r.encrypt(a),c=b(o);e.setHeader("Content-Length",c.length),t.call(n,c,...s.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(n,...s)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const n of this.listeners)n(t,e)}use(t){this.listeners.push(t)}}export{r as BaseTransport,L as ConnectionString,C as HttpInitiatorTransport,j as HttpResponderTransport,U as InvalidPinError,N as MasterKey,E as Queue,O as Session,_ as Subject,A as WalletProtocol,K as WalletProtocolError,i as constants,R as defaultCodeGenerator};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
