import*as t from"@juanelas/base64";import e from"pbkdf2-hmac";import*as r from"object-sha";class s{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var n={...Object.freeze({__proto__:null,COMMITMENT_LENGTH:256,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,INITIAL_PORT:29170,NONCE_LENGTH:128,PORT_LENGTH:12,PORT_SPACE:4096}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class i{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class a{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const s=Math.ceil(r/8),n=new Uint8Array(s);await this.randomFill(n,0,s),f.insertBits(n,t,0,e,r)}}class o{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class c{async digest(t,e){throw new Error("not implemented")}}const h=new class extends a{async randomFill(t,e,r){const s=new Uint8Array(r);crypto.getRandomValues(s);for(let n=0;n<r;n++)t[e+n]=s[n]}},u={"aes-256-gcm":{name:"AES-GCM",tagLength:128}};class d extends o{async encrypt(t){const e=new Uint8Array(12);await h.randomFill(e,0,e.length);const r=u[this.algorithm],s=await crypto.subtle.importKey("raw",this.key,r,!1,["encrypt"]),n=await crypto.subtle.encrypt({...r,iv:e},s,t),i=[];return i.push(e),i.push(new Uint8Array(n)),f.join(...i)}async decrypt(t){const e=[];if("aes-256-gcm"===this.algorithm)e[0]=12;e[1]=t.length-e[0];const[r,s]=f.split(t,...e),n=u[this.algorithm],i=await crypto.subtle.importKey("raw",this.key,n,!1,["decrypt"]),a=await crypto.subtle.decrypt({...n,iv:r},i,s);return new Uint8Array(a)}}class l extends i{async generateKeys(){this.keys=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"])}async getPublicKey(){if(void 0===this.keys||void 0===this.keys.publicKey)throw new Error("keys must be initialized fist");const t=await crypto.subtle.exportKey("raw",this.keys.publicKey);return w.u8Arr2Hex(new Uint8Array(t))}async deriveBits(t){if(void 0===this.keys||void 0===this.keys.privateKey)throw new Error("keys must be generated first");const e=w.hex2U8Arr(t),r=await crypto.subtle.importKey("raw",e,{name:"ECDH",namedCurve:"P-256"},!0,[]),s=await crypto.subtle.deriveBits({name:"ECDH",public:r},this.keys.privateKey,256);return new Uint8Array(s)}}const y={sha256:"SHA-256"};const p=new class extends c{async digest(t,e){const r=y[t],s=await crypto.subtle.digest(r,e);return new Uint8Array(s)}},w={utf2U8Arr:t=>(new TextEncoder).encode(t),u8Arr2Utf:t=>(new TextDecoder).decode(t),num2U8Arr:(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let s=t;for(let t=e-1;t>=0;t--){const e=s>>8,n=s-(e<<8);r[t]=n,s=e}return r},u8Arr2Num:t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},hex2U8Arr:t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},u8Arr2Hex:t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),u8Arr2Base64:e=>t.encode(e,!0,!1),base642U8Arr:e=>t.decode(e,!1)},f={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let s=0;for(const e of t)r.set(e,s),s+=e.length;return r},split:(t,...e)=>{const r=[];let s=0;for(const n of e)r.push(t.slice(s,s+n)),s+=n;return r},insertBytes:(t,e,r,s,n)=>{for(let i=0;i<n;i++)e[i+s]=t[i+r]},insertBits:(t,e,r,s,n)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(s/8),c=s%8,h=t[i]??0;const u=c-a;for(let r=0;r<n;r++){let r;r=u>=0?(h&128>>a)<<u:h&128>>a;const s=e[o]&~(128>>c)|r;e[o]=s,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const s=Math.ceil(r/8),n=new Uint8Array(s);return f.insertBits(t,n,e,0,r),n}};class m{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class g{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const A=async(t,r,s)=>{const n=new Uint8Array(16),i=new Uint8Array(96),a=w.hex2U8Arr(t),o=w.hex2U8Arr(r);f.insertBytes(s,i,0,0,32),f.insertBytes(a,i,0,32,32),f.insertBytes(o,i,0,64,32);const c=await e(i,n,1,32);return new Uint8Array(c)};class b{constructor(t,e,r,s,n,i,a,o){this.port=t,this.from=e,this.to=r,this.na=s,this.nb=n,this.secret=i,this.cipher=new d("aes-256-gcm",a),this.decipher=new d("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:w.u8Arr2Base64(this.na),nb:w.u8Arr2Base64(this.nb),secret:w.u8Arr2Base64(this.secret)}}async fromHash(){return await r.digest(this.from)}async toHash(){return await r.digest(this.to)}static async fromSecret(t,e,s,n,i,a){const o=await r.digest(e),c=await r.digest(s),h=await A(o,c,a),u=await A(c,o,a);return new b(t,e,s,n,i,a,h,u)}static async fromJSON(t){const e=w.base642U8Arr(t.na),r=w.base642U8Arr(t.nb),s=w.base642U8Arr(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,s)}}class x{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:w.u8Arr2Hex(this.code)}}static async fromJSON(t,e){const r=await b.fromJSON(e.masterKey),s=w.hex2U8Arr(e.code);let n;if("object"==typeof t)n=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");n=new t}return new x(n,r,s)}}class U extends g{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(n.NONCE_LENGTH/8),e=new Uint8Array(t);return await h.randomFillBits(e,0,n.NONCE_LENGTH),e}async computeCx(t,e,r){const s=Math.ceil(n.NONCE_LENGTH/8),i=Math.ceil(n.DEFAULT_RANDOM_LENGTH/8),a=w.hex2U8Arr(t.a.publicKey),o=w.hex2U8Arr(t.b.publicKey),c=new Uint8Array(64+s+i);f.insertBytes(a,c,1,0,32),f.insertBytes(o,c,1,32,32),f.insertBits(e,c,0,512,n.NONCE_LENGTH),f.insertBits(r,c,0,512+n.NONCE_LENGTH,n.DEFAULT_RANDOM_LENGTH);return await p.digest("sha256",c)}async validateAuthData(t,e){const{cx:r,nx:s}=e.received,{cx:n,nx:i,r:a}=e.sent;if(!(r.length===n.length&&s.length===i.length))throw new v("invalid received auth data length");if(r.every(((t,e)=>t===n[e])))throw new v("received and sent Cx are the same");if(!(await this.computeCx(t,s,a)).every(((t,e)=>t===r[e])))throw new v("received a wrong Cx")}async computeMasterKey(t,s,i){const a=Math.ceil(n.NONCE_LENGTH/8),o=await t.deriveBits(s.received.publicKey),c=new Uint8Array(16),h=new Uint8Array(32+2*a+6+64),u=new Uint8Array([109,97,115,116,101,114]),d=await r.digest(s.a,"SHA-256"),l=w.hex2U8Arr(d),y=await r.digest(s.b,"SHA-256"),p=w.hex2U8Arr(y);f.insertBytes(o,h,0,0,32),f.insertBytes(i.a.nx,h,0,32,a),f.insertBytes(i.a.nx,h,0,32+a,a),f.insertBytes(u,h,0,32+2*a,6),f.insertBytes(l,h,0,32+2*a+6,32),f.insertBytes(p,h,0,32+2*a+6+32,32);const m=await e(h,c,1,32);return await b.fromSecret(s.port,s.sent.id,s.received.id,i.a.nx,i.b.nx,new Uint8Array(m))}async run(){return await(async()=>{const t=new l;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e);let s;try{s=await this.transport.publicKeyExchange(this,r)}catch(t){if(t instanceof TypeError)throw new v(t.message);throw t}const n=await this.computeR(s.a.rx,s.b.rx),i=await this.computeNx(),a={r:n,nx:i,cx:await this.computeCx(s,i,n)},o=await this.transport.authentication(this,a);await this.validateAuthData(s,o);const c=await this.computeMasterKey(t,s,o),h=await this.transport.verification(this,c),u=new x(this.transport,c,h);return this.emit("masterKey",c),u})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}}class E{constructor(t,e){this.buffer=t,this.l=e}toString(){return w.u8Arr2Base64(this.buffer)}extractPort(){const t=Math.ceil(n.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);f.insertBits(this.buffer,r,this.l,e,n.PORT_LENGTH);const s=w.u8Arr2Num(r);return n.INITIAL_PORT+s}extractRb(){return f.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+n.PORT_LENGTH)/8),s=new Uint8Array(r);await h.randomFillBits(s,0,e);const i=t-n.INITIAL_PORT;if(i<0||i>n.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const a=w.num2U8Arr(i,2);return f.insertBits(a,s,16-n.PORT_LENGTH,e,n.PORT_LENGTH),new E(s,e)}static fromString(t,e){return new E(w.base642U8Arr(t),e)}}const N={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return w.utf2U8Arr(JSON.stringify(e))},async getMasterKey(t){const e=w.u8Arr2Utf(t);return await b.fromJSON(JSON.parse(e))}};class v extends Error{}class S extends s{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??n.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new v("empty connection string");try{this.connString=E.fromString(r,this.opts.l)}catch(t){throw new v("invalid pin format")}const s=Math.ceil(this.opts.l/8),n=new Uint8Array(s);return await h.randomFillBits(n,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:n}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new v("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:w.u8Arr2Base64(e.rx)}),s={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:s,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:w.u8Arr2Base64(e.cx)}),s=await this.sendRequest({method:"nonce",nx:w.u8Arr2Base64(e.nx)}),n={cx:w.base642U8Arr(r.cx),nx:w.base642U8Arr(s.nx),r:e.r};return{a:e,b:{cx:w.base642U8Arr(r.cx),nx:w.base642U8Arr(s.nx),r:e.r},sent:e,received:n}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),s=w.base642U8Arr(r.ciphertext);return await e.decrypt(s)}finish(t){super.finish(t),this.connString=void 0}}class T extends S{async baseSend(t,e){{const s=`http://${r=this.opts.host,/(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/gi.test(r)?`[${this.opts.host}]`:this.opts.host}:${t}/${n.RPC_URL_PATH}`,i=await fetch(s,e),a=await i.text();return{status:i.status,body:a}}var r}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const s=w.utf2U8Arr(JSON.stringify(r)),n=await t.encrypt(s),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:w.u8Arr2Utf(e)},body:w.u8Arr2Base64(n)});if(i.status<=300&&i.status>=200){const e=w.base642U8Arr(i.body),r=await t.decrypt(e);i.body=w.u8Arr2Utf(r)}return i}}class O extends s{constructor(t={}){super(),this.opts={port:t.port??n.INITIAL_PORT,timeout:t.timeout??n.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??n.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??N},this.rpcSubject=new m}async pairing(t,e,r){this.stopPairing(),this.connString=await E.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:s}=await this.waitRequest("publicKeyExchange");await s.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const n={id:r.sender,publicKey:r.publicKey,rx:w.base642U8Arr(r.ra??"")};return{a:n,b:e,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:w.u8Arr2Base64(e.cx)});const s=r.req,n=await this.waitRequest("nonce");await n.res.send({method:"nonce",nx:w.u8Arr2Base64(e.nx)});const i=n.req,a={cx:w.base642U8Arr(s.cx),nx:w.base642U8Arr(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),s=await this.opts.codeGenerator.generate(e),n=await e.encrypt(s);return await r.res.send({method:"verificationChallenge",ciphertext:w.u8Arr2Base64(n)}),s}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class P{}class B extends P{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}class _ extends O{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${n.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),s=JSON.parse(r);this.rpcSubject.next({req:s,res:new B(e)})}async dispatchEncryptedMessage(t,e,r){const s=w.utf2U8Arr(r),n=await this.opts.codeGenerator.getMasterKey(s),i=await this.readRequestBody(t),a=w.base642U8Arr(i),o=await n.decrypt(a),c=w.u8Arr2Utf(o),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const l=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),y=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,s)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=s[0],a=async()=>{let a;if("string"==typeof i)a=w.utf2U8Arr(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await n.encrypt(a),c=w.u8Arr2Base64(o);e.setHeader("Content-Length",c.length),t.call(r,c,...s.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...s)}}),await this.callListeners(y,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}}export{s as BaseTransport,E as ConnectionString,T as HttpInitiatorTransport,_ as HttpResponderTransport,v as InvalidPinError,b as MasterKey,x as Session,U as WalletProtocol,n as constants,N as defaultCodeGenerator};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy90cmFuc3BvcnQvdHJhbnNwb3J0LnRzIiwiLi4vc3JjL3RzL2NvbnN0YW50cy9pbmRleC50cyIsIi4uL3NyYy90cy9jb25zdGFudHMvcHJvdG9jb2wudHMiLCIuLi9zcmMvdHMvY29uc3RhbnRzL2h0dHAudHMiLCIuLi9zcmMvdHMvY3J5cHRvL3R5cGVzLnRzIiwiLi4vc3JjL3RzL2NyeXB0by9icm93c2VyL3JhbmRvbS50cyIsIi4uL3NyYy90cy9jcnlwdG8vYnJvd3Nlci9jaXBoZXIudHMiLCIuLi9zcmMvdHMvY3J5cHRvL2Jyb3dzZXIvZWNkaC50cyIsIi4uL3NyYy90cy9jcnlwdG8vYnJvd3Nlci9kaWdlc3QudHMiLCIuLi9zcmMvdHMvdXRpbC9mb3JtYXQudHMiLCIuLi9zcmMvdHMvdXRpbC9idWZmZXIudHMiLCIuLi9zcmMvdHMvc3ViamVjdC50cyIsIi4uL3NyYy90cy9wcm90b2NvbC9ldmVudC1lbWl0dGVyLnRzIiwiLi4vc3JjL3RzL3Byb3RvY29sL21hc3Rlci1rZXkudHMiLCIuLi9zcmMvdHMvcHJvdG9jb2wvc2Vzc2lvbi50cyIsIi4uL3NyYy90cy9wcm90b2NvbC9wcm90b2NvbC50cyIsIi4uL3NyYy90cy9wcm90b2NvbC9jb25uZWN0aW9uLXN0cmluZy50cyIsIi4uL3NyYy90cy9wcm90b2NvbC9jb2RlLWdlbmVyYXRvci50cyIsIi4uL3NyYy90cy9lcnJvcnMudHMiLCIuLi9zcmMvdHMvdHJhbnNwb3J0L2luaXRpYXRvci10cmFuc3BvcnQudHMiLCIuLi9zcmMvdHMvdHJhbnNwb3J0L2h0dHAvaHR0cC1pbml0aWF0b3IudHMiLCIuLi9zcmMvdHMvdHJhbnNwb3J0L3Jlc3BvbmRlci10cmFuc3BvcnQudHMiLCIuLi9zcmMvdHMvdHJhbnNwb3J0L3Jlc3BvbnNlLnRzIiwiLi4vc3JjL3RzL3RyYW5zcG9ydC9odHRwL2h0dHAtcmVzcG9uc2UudHMiLCIuLi9zcmMvdHMvdHJhbnNwb3J0L2h0dHAvaHR0cC1yZXNwb25kZXIudHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbIkJhc2VUcmFuc3BvcnQiLCJhc3luYyIsIm1hc3RlcktleSIsImNvZGUiLCJyZXEiLCJFcnJvciIsImZpbmlzaCIsInByb3RvY29sIiwiZW1pdCIsImNvbnN0YW50cyIsIkJhc2VFQ0RIIiwicHVibGljS2V5SGV4IiwiQmFzZVJhbmRvbSIsImJ1ZmZlciIsInN0YXJ0Iiwic2l6ZSIsImJ5dGVMZW4iLCJNYXRoIiwiY2VpbCIsInJhbmRvbUJ5dGVzIiwiVWludDhBcnJheSIsInRoaXMiLCJyYW5kb21GaWxsIiwiYnVmZmVyVXRpbHMiLCJpbnNlcnRCaXRzIiwiQmFzZUNpcGhlciIsImNvbnN0cnVjdG9yIiwiYWxnb3JpdGhtIiwia2V5IiwicGF5bG9hZCIsImNpcGhlcnRleHQiLCJCYXNlRGlnZXN0IiwiaW5wdXQiLCJyYW5kb20iLCJuZXdCdWZmZXIiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJpIiwiTk9ERV9UT19CUk9XU0VSX0NJUEhFUl9BTEdPUklUSE1TIiwibmFtZSIsInRhZ0xlbmd0aCIsIkNpcGhlciIsIm1lc3NhZ2UiLCJpdiIsImxlbmd0aCIsImFsZyIsImNyeXB0b0tleSIsInN1YnRsZSIsImltcG9ydEtleSIsImVuY3J5cHQiLCJidWZmZXJzIiwicHVzaCIsImpvaW4iLCJjcnlwdG9zZWN1ZW5jZSIsInNpemVzIiwic3BsaXQiLCJkZWNyeXB0IiwiRUNESCIsImtleXMiLCJnZW5lcmF0ZUtleSIsIm5hbWVkQ3VydmUiLCJ1bmRlZmluZWQiLCJwdWJsaWNLZXkiLCJleHBvcnRLZXkiLCJmb3JtYXQiLCJ1OEFycjJIZXgiLCJwcml2YXRlS2V5IiwicHVibGljS2V5QnVmZmVyIiwiaGV4MlU4QXJyIiwic2VjcmV0IiwiZGVyaXZlQml0cyIsInB1YmxpYyIsIk5PREVfVE9fQlJPV1NFUl9IQVNIX0FMR09SSVRITVMiLCJzaGEyNTYiLCJkaWdlc3QiLCJicm93c2VyQWxnb3JpdGhtIiwidXRmMlU4QXJyIiwidGV4dCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwidThBcnIyVXRmIiwiYXJyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJudW0yVThBcnIiLCJudW0iLCJsZW4iLCJyZXN0IiwibmV4dFJlc3QiLCJ1OEFycjJOdW0iLCJoZXgiLCJtYXRjaCIsIm1hcCIsImJ5dGUiLCJwYXJzZUludCIsInJlZHVjZSIsInN0ciIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ1OEFycjJCYXNlNjQiLCJiYXNlNjQiLCJiYXNlNjQyVThBcnIiLCJiNjQiLCJsaXN0IiwiYSIsImIiLCJhY2NMZW4iLCJlbCIsInNldCIsInNsaWNlIiwiaW5zZXJ0Qnl0ZXMiLCJzcmMiLCJkc3QiLCJmcm9tU3RhcnQiLCJ0b1N0YXJ0IiwiZnJvbUJ5dGVJbmRleCIsImZsb29yIiwiZnJvbUJpdEluZGV4IiwidG9CeXRlSW5kZXgiLCJ0b0JpdEluZGV4IiwiY3VyckZyb21CeXRlIiwiZGVsdGFPZmZzZXQiLCJjdXJyQml0IiwiYml0U2V0IiwiZXh0cmFjdEJpdHMiLCJidWYiLCJieXRlU2l6ZSIsIlN1YmplY3QiLCJwcm9taXNlIiwiY3JlYXRlUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibmV4dCIsInZhbHVlIiwiZXJyIiwicmVhc29uIiwiRXZlbnRFbWl0dGVyIiwiZXZlbnRzIiwib24iLCJldmVudCIsImNiIiwiZGF0YSIsImV2ZW50Q2JzIiwiZm9yRWFjaCIsImV2ZW50Q2IiLCJkZXJpdmVLZXkiLCJmcm9tIiwidG8iLCJzYWx0IiwicGJrZGYySW5wdXQiLCJmcm9tQnVmZmVyIiwidG9CdWZmZXIiLCJkZXJpdmF0ZWRTZWNyZXQiLCJwYmtkZjJIbWFjIiwiTWFzdGVyS2V5IiwicG9ydCIsIm5hIiwibmIiLCJlbmNyeXB0S2V5IiwiZGVjcnlwdEtleSIsImNpcGhlciIsImRlY2lwaGVyIiwidG9KU09OIiwib2JqZWN0U2hhIiwic3RhdGljIiwiZnJvbUhhc2giLCJ0b0hhc2giLCJmcm9tU2VjcmV0IiwiU2Vzc2lvbiIsInRyYW5zcG9ydCIsInJlcXVlc3QiLCJzZW5kIiwiVHJhbnNwb3J0T3JDb25zdHJ1Y3RvciIsImpzb24iLCJmcm9tSlNPTiIsIkZ1bmN0aW9uIiwiV2FsbGV0UHJvdG9jb2wiLCJzdXBlciIsInJhIiwicmIiLCJ2YWwiLCJuTGVuIiwiTk9OQ0VfTEVOR1RIIiwibngiLCJyYW5kb21GaWxsQml0cyIsInBrZURhdGEiLCJyIiwickxlbiIsIkRFRkFVTFRfUkFORE9NX0xFTkdUSCIsInBrYSIsInBrYiIsImZ1bGxQa2VEYXRhIiwiZnVsbEF1dGhEYXRhIiwiY3giLCJyZWNlaXZlZEN4IiwicmVjZWl2ZWROeCIsInJlY2VpdmVkIiwic2VudEN4Iiwic2VudE54Iiwic2VudCIsIkludmFsaWRQaW5FcnJvciIsImV2ZXJ5IiwiY29tcHV0ZUN4IiwiZWNkaCIsInNoYXJlZFNlY3JldCIsInNlY3JldFdpdGhDb250ZXh0IiwibWFzdGVyQ29udGV4dCIsImFIYXNoIiwiYUhhc2hCdWZmZXIiLCJiSGFzaCIsImJIYXNoQnVmZmVyIiwiaWQiLCJnZW5lcmF0ZUtleXMiLCJnZXRQdWJsaWNLZXkiLCJwcmVwYXJlIiwicHVibGljS2V5RXhjaGFuZ2UiLCJUeXBlRXJyb3IiLCJjb21wdXRlUiIsInJ4IiwiY29tcHV0ZU54IiwiYXV0aERhdGEiLCJhdXRoZW50aWNhdGlvbiIsInZhbGlkYXRlQXV0aERhdGEiLCJjb21wdXRlTWFzdGVyS2V5IiwidmVyaWZpY2F0aW9uIiwic2Vzc2lvbiIsIl9ydW4iLCJmaW5hbGx5IiwibGlzdGVuZXIiLCJhcmdzIiwiQ29ubmVjdGlvblN0cmluZyIsImwiLCJleHRyYWN0UG9ydCIsInBvcnRCeXRlc0xlbiIsIlBPUlRfTEVOR1RIIiwicG9ydEJ5dGVzT2Zmc2V0IiwicG9ydEJ5dGVzIiwiZHBvcnQiLCJJTklUSUFMX1BPUlQiLCJleHRyYWN0UmIiLCJjb25uQnl0ZXNMZW4iLCJQT1JUX1NQQUNFIiwiY29ublN0cmluZyIsImRlZmF1bHRDb2RlR2VuZXJhdG9yIiwiY29uc29sZSIsIndhcm4iLCJrZXlDb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwiSW5pdGlhdG9yVHJhbnNwb3J0Iiwib3B0cyIsImhvc3QiLCJnZXRDb25uZWN0aW9uU3RyaW5nIiwiZnJvbVN0cmluZyIsImxMZW4iLCJyZXNwb25zZSIsInNlbmRSZXF1ZXN0IiwibWV0aG9kIiwic2VuZGVyIiwiY29tbWl0bWVudFJlcSIsIm5vbmNlUmVxIiwidmVyaWZDaGFsbGVuZ2UiLCJpbkNpcGhlcnRleHQiLCJIdHRwSW5pdGlhdG9yVHJhbnNwb3J0IiwiaHR0cFJlcSIsInJwY1VybCIsInRlc3QiLCJSUENfVVJMX1BBVEgiLCJyZXNwIiwiZmV0Y2giLCJib2R5Iiwic3RhdHVzIiwiYmFzZVNlbmQiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImJvZHlDaXBoZXJ0ZXh0IiwianNvbkJ1ZmZlciIsIlJlc3BvbmRlclRyYW5zcG9ydCIsInRpbWVvdXQiLCJERUZBVUxUX1RJTUVPVVQiLCJjb2RlR2VuZXJhdG9yIiwicnBjU3ViamVjdCIsInN0b3BQYWlyaW5nIiwiZ2VuZXJhdGUiLCJsYXN0UGFpcmluZyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJpc1BhaXJpbmciLCJwYWlyaW5nIiwicnBjUmVxdWVzdCIsInJlcyIsIndhaXRSZXF1ZXN0IiwiY3hEYXRhIiwibnhEYXRhIiwidmVyaWZEYXRhIiwiUmVzcG9uc2UiLCJIdHRwUmVzcG9uc2UiLCJ3cml0ZSIsImVuZCIsIkh0dHBSZXNwb25kZXJUcmFuc3BvcnQiLCJsaXN0ZW5lcnMiLCJjaHVuayIsIkJ1ZmZlciIsImNvbmNhdCIsInJlYWRSZXF1ZXN0Qm9keSIsInJlcUJvZHkiLCJnZXRNYXN0ZXJLZXkiLCJjaXBoZXJ0ZXh0QmFzZTY0IiwibWVzc2FnZUpzb24iLCJpbm5lckJvZHkiLCJpbml0IiwiT2JqZWN0IiwiZW50cmllcyIsImgiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInJlcVByb3h5IiwiUHJveHkiLCJnZXQiLCJ0YXJnZXQiLCJwIiwidXJsIiwiYXBwbHkiLCJ0aGlzQXJnIiwiYXJnc0FycmF5Iiwic3RhdHVzQ29kZSIsInNldEhlYWRlciIsImNhbGwiLCJjYXRjaCIsImVycm9yIiwiY2FsbExpc3RlbmVycyIsImF1dGhvcml6YXRpb24iLCJkaXNwYXRjaEVuY3J5cHRlZE1lc3NhZ2UiLCJkaXNwYXRjaFByb3RvY29sTWVzc2FnZSIsInVzZSJdLCJtYXBwaW5ncyI6ImlHQWNzQkEsRUFPcEJDLFdBQVlDLEVBQXNCQyxFQUFrQkMsR0FDbEQsTUFBTSxJQUFJQyxNQUFNLHNDQUNqQixDQUVEQyxPQUFRQyxHQUNOQSxFQUFTQyxLQUFLLFdBQ2YsTUN4QllDLEVBQUEsb0RDS2tCLDBCQU5JLG1CQUNOLGlCQUVILG1CQUVBLGdCQU5ELGNBR0QscURDSEUsdUNDQ2ZDLEVBQ1hULHFCQUNFLE1BQU0sSUFBSUksTUFBTSxrQkFDakIsQ0FFREoscUJBQ0UsTUFBTSxJQUFJSSxNQUFNLGtCQUNqQixDQUVESixpQkFBa0JVLEdBQ2hCLE1BQU0sSUFBSU4sTUFBTSxrQkFDakIsUUFHVU8sRUFDWFgsaUJBQWtCWSxFQUFvQkMsRUFBZUMsR0FDbkQsTUFBTSxJQUFJVixNQUFNLGtCQUNqQixDQUVESixxQkFBc0JZLEVBQW9CQyxFQUFlQyxHQUN2RCxNQUFNQyxFQUFVQyxLQUFLQyxLQUFLSCxFQUFPLEdBQzNCSSxFQUFjLElBQUlDLFdBQVdKLFNBQzdCSyxLQUFLQyxXQUFXSCxFQUFhLEVBQUdILEdBQ3RDTyxFQUFZQyxXQUFXTCxFQUFhTixFQUFRLEVBQUdDLEVBQU9DLEVBQ3ZELFFBSVVVLEVBQ1hDLFlBQ2tCQyxFQUNBQyxHQURBUCxLQUFTTSxVQUFUQSxFQUNBTixLQUFHTyxJQUFIQSxDQUNiLENBRUwzQixjQUFlNEIsR0FDYixNQUFNLElBQUl4QixNQUFNLGtCQUNqQixDQUVESixjQUFlNkIsR0FDYixNQUFNLElBQUl6QixNQUFNLGtCQUNqQixRQUtVMEIsRUFDWDlCLGFBQWMwQixFQUEyQkssR0FDdkMsTUFB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
