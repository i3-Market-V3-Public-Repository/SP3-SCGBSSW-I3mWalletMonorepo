import t from"crypto";import*as e from"@juanelas/base64";import r from"pbkdf2-hmac";import*as s from"object-sha";class n{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var i={...Object.freeze({__proto__:null,PORT_LENGTH:12,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,PORT_SPACE:4096,INITIAL_PORT:29170,NONCE_LENGTH:128,COMMITMENT_LENGTH:256}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class a{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class o{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const s=Math.ceil(r/8),n=new Uint8Array(s);await this.randomFill(n,0,s),S.insertBits(n,t,0,e,r)}}class c{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class h{async digest(t,e){throw new Error("not implemented")}}const d=new class extends o{async randomFill(e,r,s){return await new Promise((n=>{t.randomFill(e,r,s,(()=>{n()}))}))}};class u extends c{async encrypt(e){const r=new Uint8Array(12);await d.randomFill(r,0,r.length);const s=t.createSecretKey(this.key),n=t.createCipheriv(this.algorithm,s,r),i=[];return i.push(r),i.push(n.update(e)),i.push(n.final()),i.push(n.getAuthTag()),S.join(...i)}async decrypt(e){const r=[];if("aes-256-gcm"===this.algorithm)r[0]=12,r[2]=16;r[1]=e.length-r[0]-(r[2]??0);const[s,n,i]=S.split(e,...r),a=t.createSecretKey(this.key),o=t.createDecipheriv(this.algorithm,a,s);void 0!==i&&o.setAuthTag(i);const c=[];return c.push(o.update(n)),c.push(o.final()),S.join(...c)}}class l extends a{constructor(){super(),this.ecdh=t.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const p=new class extends h{async digest(e,r){const s=t.createHash(e).update(r).digest();return new Uint8Array(s.buffer)}},y=t=>(new TextEncoder).encode(t),w=t=>(new TextDecoder).decode(t),m=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let s=t;for(let t=e-1;t>=0;t--){const e=s>>8,n=s-(e<<8);r[t]=n,s=e}return r},g=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},f=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},x=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),b=t=>e.encode(t,!0,!1),E=t=>e.decode(t,!1),S={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let s=0;for(const e of t)r.set(e,s),s+=e.length;return r},split:(t,...e)=>{const r=[];let s=0;for(const n of e)r.push(t.slice(s,s+n)),s+=n;return r},insertBytes:(t,e,r,s,n)=>{for(let i=0;i<n;i++)e[i+s]=t[i+r]},insertBits:(t,e,r,s,n)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(s/8),c=s%8,h=t[i]??0;const d=c-a;for(let r=0;r<n;r++){let r;r=d>=0?(h&128>>a)<<d:h&128>>a;const s=e[o]&~(128>>c)|r;e[o]=s,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const s=Math.ceil(r/8),n=new Uint8Array(s);return S.insertBits(t,n,e,0,r),n}};class T{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class N{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const P=async(t,e,s)=>{const n=new Uint8Array(16),i=new Uint8Array(96),a=f(t),o=f(e);S.insertBytes(s,i,0,0,32),S.insertBytes(a,i,0,32,32),S.insertBytes(o,i,0,64,32);const c=await r(i,n,1,32);return new Uint8Array(c)};class v{constructor(t,e,r,s,n,i,a,o){this.port=t,this.from=e,this.to=r,this.na=s,this.nb=n,this.secret=i,this.cipher=new u("aes-256-gcm",a),this.decipher=new u("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:b(this.na),nb:b(this.nb),secret:b(this.secret)}}async fromHash(){return await s.digest(this.from)}async toHash(){return await s.digest(this.to)}static async fromSecret(t,e,r,n,i,a){const o=await s.digest(e),c=await s.digest(r),h=await P(o,c,a),d=await P(c,o,a);return new v(t,e,r,n,i,a,h,d)}static async fromJSON(t){const e=E(t.na),r=E(t.nb),s=E(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,s)}}class O{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:x(this.code)}}static async fromJSON(t,e){const r=await v.fromJSON(e.masterKey),s=f(e.code);let n;if("object"==typeof t)n=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");n=new t}return new O(n,r,s)}}class A extends N{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(i.NONCE_LENGTH/8),e=new Uint8Array(t);return await d.randomFillBits(e,0,i.NONCE_LENGTH),e}async computeCx(t,e,r){const s=Math.ceil(i.NONCE_LENGTH/8),n=Math.ceil(i.DEFAULT_RANDOM_LENGTH/8),a=f(t.a.publicKey),o=f(t.b.publicKey),c=new Uint8Array(64+s+n);S.insertBytes(a,c,1,0,32),S.insertBytes(o,c,1,32,32),S.insertBits(e,c,0,512,i.NONCE_LENGTH),S.insertBits(r,c,0,512+i.NONCE_LENGTH,i.DEFAULT_RANDOM_LENGTH);return await p.digest("sha256",c)}async validateAuthData(t,e){const{cx:r,nx:s}=e.received,{cx:n,nx:i,r:a}=e.sent;if(!(r.length===n.length&&s.length===i.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===n[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,s,a)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,e,n){const a=Math.ceil(i.NONCE_LENGTH/8),o=await t.deriveBits(e.received.publicKey),c=new Uint8Array(16),h=new Uint8Array(32+2*a+6+64),d=new Uint8Array([109,97,115,116,101,114]),u=await s.digest(e.a,"SHA-256"),l=f(u),p=await s.digest(e.b,"SHA-256"),y=f(p);S.insertBytes(o,h,0,0,32),S.insertBytes(n.a.nx,h,0,32,a),S.insertBytes(n.a.nx,h,0,32+a,a),S.insertBytes(d,h,0,32+2*a,6),S.insertBytes(l,h,0,32+2*a+6,32),S.insertBytes(y,h,0,32+2*a+6+32,32);const w=await r(h,c,1,32);return await v.fromSecret(e.port,e.sent.id,e.received.id,n.a.nx,n.b.nx,new Uint8Array(w))}async run(){return await(async()=>{const t=new l;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e),s=await this.transport.publicKeyExchange(this,r),n=await this.computeR(s.a.rx,s.b.rx),i=await this.computeNx(),a={r:n,nx:i,cx:await this.computeCx(s,i,n)},o=await this.transport.authentication(this,a);await this.validateAuthData(s,o);const c=await this.computeMasterKey(t,s,o),h=await this.transport.verification(this,c),d=new O(this.transport,c,h);return this.emit("masterKey",c),d})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}}class _{constructor(t,e){this.buffer=t,this.l=e}toString(){return b(this.buffer)}extractPort(){const t=Math.ceil(i.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);S.insertBits(this.buffer,r,this.l,e,i.PORT_LENGTH);const s=g(r);return i.INITIAL_PORT+s}extractRb(){return S.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+i.PORT_LENGTH)/8),s=new Uint8Array(r);await d.randomFillBits(s,0,e);const n=t-i.INITIAL_PORT;if(n<0||n>i.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const a=m(n,2);return S.insertBits(a,s,16-i.PORT_LENGTH,e,i.PORT_LENGTH),new _(s,e)}static fromString(t,e){return new _(E(t),e)}}const R={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return y(JSON.stringify(e))},async getMasterKey(t){const e=w(t);return await v.fromJSON(JSON.parse(e))}};class L extends n{constructor(t={}){super(),this.opts={host:t.host??"localhost",id:t.id??{name:"Initiator"},l:t.l??i.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=_.fromString(r,this.opts.l);const s=Math.ceil(this.opts.l/8),n=new Uint8Array(s);return await d.randomFillBits(n,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:n}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:b(e.rx)}),s={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:s,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:b(e.cx)}),s=await this.sendRequest({method:"nonce",nx:b(e.nx)}),n={cx:E(r.cx),nx:E(s.nx),r:e.r};return{a:e,b:{cx:E(r.cx),nx:E(s.nx),r:e.r},sent:e,received:n}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),s=E(r.ciphertext);return await e.decrypt(s)}finish(t){super.finish(t),this.connString=void 0}}class K extends L{buildRpcUrl(t){return`http://${this.opts.host}:${t}/${i.RPC_URL_PATH}`}async baseSend(t,e){{const r=await import("http");return await new Promise((s=>{const n=e.body,a=r.request({path:`/${i.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(n)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{s({status:t.statusCode??200,body:e})}))}));a.write(n),a.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const s=y(JSON.stringify(r)),n=await t.encrypt(s),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:w(e)},body:b(n)});if(i.status<=300&&i.status>=200){const e=E(i.body),r=await t.decrypt(e);i.body=w(r)}return i}}class U extends n{constructor(t={}){super(),this.opts={port:t.port??i.INITIAL_PORT,timeout:t.timeout??i.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??i.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??R},this.rpcSubject=new T}async pairing(t,e,r){this.stopPairing(),this.connString=await _.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:s}=await this.waitRequest("publicKeyExchange");await s.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const n={id:r.sender,publicKey:r.publicKey,rx:E(r.ra??"")};return{a:n,b:e,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:b(e.cx)});const s=r.req,n=await this.waitRequest("nonce");await n.res.send({method:"nonce",nx:b(e.nx)});const i=n.req,a={cx:E(s.cx),nx:E(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),s=await this.opts.codeGenerator.generate(e),n=await e.encrypt(s);return await r.res.send({method:"verificationChallenge",ciphertext:b(n)}),s}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class B{}class C extends B{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}class H extends U{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${i.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),s=JSON.parse(r);this.rpcSubject.next({req:s,res:new C(e)})}async dispatchEncryptedMessage(t,e,r){const s=y(r),n=await this.opts.codeGenerator.getMasterKey(s),i=await this.readRequestBody(t),a=E(i),o=await n.decrypt(a),c=w(o),h=JSON.parse(c);let d={};const u=h.init??{};void 0!==u.body&&""!==u.body&&(d=JSON.parse(u.body));const l=Object.entries(u.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return u.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return d;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,s)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=s[0],a=async()=>{let a;if("string"==typeof i)a=y(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await n.encrypt(a),c=b(o);e.setHeader("Content-Length",c.length),t.call(r,c,...s.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...s)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}}export{n as BaseTransport,_ as ConnectionString,K as HttpInitiatorTransport,H as HttpResponderTransport,v as MasterKey,O as Session,A as WalletProtocol,i as constants,R as defaultCodeGenerator};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
