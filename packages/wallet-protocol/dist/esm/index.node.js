import*as t from"@juanelas/base64";import e from"pbkdf2-hmac";import*as r from"object-sha";class n{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var s={...Object.freeze({__proto__:null,PORT_LENGTH:12,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,PORT_SPACE:4096,INITIAL_PORT:29170,NONCE_LENGTH:128,COMMITMENT_LENGTH:256}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class i{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class a{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}const o=void 0,c=void 0,h=t=>(new TextEncoder).encode(t),d=t=>(new TextDecoder).decode(t),u=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},p=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},l=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},w=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),y=e=>t.encode(e,!0,!1),m=e=>t.decode(e,!1),g={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(n/8),c=n%8,h=t[i]??0;const d=c-a;for(let r=0;r<s;r++){let r;r=d>=0?(h&128>>a)<<d:h&128>>a;const n=e[o]&~(128>>c)|r;e[o]=n,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return g.insertBits(t,s,e,0,r),s}};class f{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class x{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const b=async(t,r,n)=>{const s=new Uint8Array(16),i=new Uint8Array(96),a=l(t),o=l(r);g.insertBytes(n,i,0,0,32),g.insertBytes(a,i,0,32,32),g.insertBytes(o,i,0,64,32);const c=await e(i,s,1,32);return new Uint8Array(c)};class E{constructor(t,e,r,n,s,i,o,c){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new a("aes-256-gcm",o),this.decipher=new a("aes-256-gcm",c)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:y(this.na),nb:y(this.nb),secret:y(this.secret)}}async fromHash(){return await r.digest(this.from)}async toHash(){return await r.digest(this.to)}static async fromSecret(t,e,n,s,i,a){const o=await r.digest(e),c=await r.digest(n),h=await b(o,c,a),d=await b(c,o,a);return new E(t,e,n,s,i,a,h,d)}static async fromJSON(t){const e=m(t.na),r=m(t.nb),n=m(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class N{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:w(this.code)}}static async fromJSON(t,e){const r=await E.fromJSON(e.masterKey),n=l(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new N(s,r,n)}}class S extends x{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(s.NONCE_LENGTH/8),e=new Uint8Array(t);return await o.randomFillBits(e,0,s.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(s.NONCE_LENGTH/8),i=Math.ceil(s.DEFAULT_RANDOM_LENGTH/8),a=l(t.a.publicKey),o=l(t.b.publicKey),h=new Uint8Array(64+n+i);g.insertBytes(a,h,1,0,32),g.insertBytes(o,h,1,32,32),g.insertBits(e,h,0,512,s.NONCE_LENGTH),g.insertBits(r,h,0,512+s.NONCE_LENGTH,s.DEFAULT_RANDOM_LENGTH);return await c.digest("sha256",h)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:a}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,n,a)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,n,i){const a=Math.ceil(s.NONCE_LENGTH/8),o=await t.deriveBits(n.received.publicKey),c=new Uint8Array(16),h=new Uint8Array(32+2*a+6+64),d=new Uint8Array([109,97,115,116,101,114]),u=await r.digest(n.a,"SHA-256"),p=l(u),w=await r.digest(n.b,"SHA-256"),y=l(w);g.insertBytes(o,h,0,0,32),g.insertBytes(i.a.nx,h,0,32,a),g.insertBytes(i.a.nx,h,0,32+a,a),g.insertBytes(d,h,0,32+2*a,6),g.insertBytes(p,h,0,32+2*a+6,32),g.insertBytes(y,h,0,32+2*a+6+32,32);const m=await e(h,c,1,32);return await E.fromSecret(n.port,n.sent.id,n.received.id,i.a.nx,i.b.nx,new Uint8Array(m))}async run(){return await(async()=>{const t=new i;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e),n=await this.transport.publicKeyExchange(this,r),s=await this.computeR(n.a.rx,n.b.rx),a=await this.computeNx(),o={r:s,nx:a,cx:await this.computeCx(n,a,s)},c=await this.transport.authentication(this,o);await this.validateAuthData(n,c);const h=await this.computeMasterKey(t,n,c),d=await this.transport.verification(this,h),u=new N(this.transport,h,d);return this.emit("masterKey",h),u})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}}class T{constructor(t,e){this.buffer=t,this.l=e}toString(){return y(this.buffer)}extractPort(){const t=Math.ceil(s.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);g.insertBits(this.buffer,r,this.l,e,s.PORT_LENGTH);const n=p(r);return s.INITIAL_PORT+n}extractRb(){return g.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+s.PORT_LENGTH)/8),n=new Uint8Array(r);await o.randomFillBits(n,0,e);const i=t-s.INITIAL_PORT;if(i<0||i>s.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const a=u(i,2);return g.insertBits(a,n,16-s.PORT_LENGTH,e,s.PORT_LENGTH),new T(n,e)}static fromString(t,e){return new T(m(t),e)}}const O={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return h(JSON.stringify(e))},async getMasterKey(t){const e=d(t);return await E.fromJSON(JSON.parse(e))}};class P extends n{constructor(t={}){super(),this.opts={host:t.host??"localhost",id:t.id??{name:"Initiator"},l:t.l??s.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=T.fromString(r,this.opts.l);const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await o.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:y(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:y(e.cx)}),n=await this.sendRequest({method:"nonce",nx:y(e.nx)}),s={cx:m(r.cx),nx:m(n.nx),r:e.r};return{a:e,b:{cx:m(r.cx),nx:m(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=m(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class v extends P{buildRpcUrl(t){return`http://${this.opts.host}:${t}/${s.RPC_URL_PATH}`}async baseSend(t,e){{const r=await import("http");return await new Promise((n=>{const i=e.body,a=r.request({path:`/${s.RPC_URL_PATH}`,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(i)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));a.write(i),a.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=h(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:d(e)},body:y(s)});if(i.status<=300&&i.status>=200){const e=m(i.body),r=await t.decrypt(e);i.body=d(r)}return i}}class _ extends n{constructor(t={}){super(),this.opts={port:t.port??s.INITIAL_PORT,timeout:t.timeout??s.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??s.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??O},this.rpcSubject=new f}async pairing(t,e,r){this.stopPairing(),this.connString=await T.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:m(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:y(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:y(e.nx)});const i=s.req,a={cx:m(n.cx),nx:m(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:y(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class R{}class A extends R{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}class L extends _{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${s.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new A(e)})}async dispatchEncryptedMessage(t,e,r){const n=h(r),s=await this.opts.codeGenerator.getMasterKey(n),i=await this.readRequestBody(t),a=m(i),o=await s.decrypt(a),c=d(o),u=JSON.parse(c);let p={};const l=u.init??{};void 0!==l.body&&""!==l.body&&(p=JSON.parse(l.body));const w=Object.entries(l.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),g=new Proxy(t,{get(t,e){switch(e){case"url":return u.url;case"method":return l.method;case"headers":return w;case"_body":case"walletProtocol":return!0;case"body":return p;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=n[0],a=async()=>{let a;if("string"==typeof i)a=h(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await s.encrypt(a),c=y(o);e.setHeader("Content-Length",c.length),t.call(r,c,...n.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(g,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}}export{n as BaseTransport,T as ConnectionString,v as HttpInitiatorTransport,L as HttpResponderTransport,E as MasterKey,N as Session,S as WalletProtocol,s as constants,O as defaultCodeGenerator};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
