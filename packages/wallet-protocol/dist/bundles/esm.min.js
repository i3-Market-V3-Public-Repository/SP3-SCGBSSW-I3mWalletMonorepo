class t{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var e={...Object.freeze({__proto__:null,PORT_LENGTH:12,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,PORT_SPACE:4096,INITIAL_PORT:29170,NONCE_LENGTH:128,COMMITMENT_LENGTH:256}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class r{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class n{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}const i=void 0,s=void 0;function a(t,e=!1,r=!0){let n="";n=(t=>{const e=[];for(let r=0;r<t.length;r+=32768)e.push(String.fromCharCode.apply(null,t.subarray(r,r+32768)));return btoa(e.join(""))})("string"==typeof t?(new TextEncoder).encode(t):new Uint8Array(t));return e&&(n=function(t){return t.replace(/\+/g,"-").replace(/\//g,"_")}(n)),r||(n=n.replace(/=/g,"")),n}function o(t,e=!1){{let r=!1;if(/^[0-9a-zA-Z_-]+={0,2}$/.test(t))r=!0;else if(!/^[0-9a-zA-Z+/]*={0,2}$/.test(t))throw new Error("Not a valid base64 input");r&&(t=t.replace(/-/g,"+").replace(/_/g,"/").replace(/=/g,""));const n=new Uint8Array(atob(t).split("").map((t=>t.charCodeAt(0))));return e?(new TextDecoder).decode(n):n}}const c=t=>(new TextEncoder).encode(t),h=t=>(new TextDecoder).decode(t),u=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,i=n-(e<<8);r[t]=i,n=e}return r},l=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},y=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},d=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),p=t=>a(t,!0,!1),w=t=>o(t,!1),f={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const i of e)r.push(t.slice(n,n+i)),n+=i;return r},insertBytes:(t,e,r,n,i)=>{for(let s=0;s<i;s++)e[s+n]=t[s+r]},insertBits:(t,e,r,n,i)=>{let s=Math.floor(r/8),a=r%8,o=Math.floor(n/8),c=n%8,h=t[s]??0;const u=c-a;for(let r=0;r<i;r++){let r;r=u>=0?(h&128>>a)<<u:h&128>>a;const n=e[o]&~(128>>c)|r;e[o]=n,a++,c++,a>=8&&(s++,a=0,h=t[s]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),i=new Uint8Array(n);return f.insertBits(t,i,e,0,r),i}};class g{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}const m={"SHA-1":{outputLength:20,blockSize:64},"SHA-256":{outputLength:32,blockSize:64},"SHA-384":{outputLength:48,blockSize:128},"SHA-512":{outputLength:64,blockSize:128}};function b(t,e,r,n,i="SHA-256"){return new Promise(((s,a)=>{i in m||a(new RangeError(`Valid hash algorithm values are any of ${Object.keys(m).toString()}`)),"string"==typeof t?t=(new TextEncoder).encode(t):t instanceof ArrayBuffer?t=new Uint8Array(t):ArrayBuffer.isView(t)||a(RangeError("P should be string, ArrayBuffer, TypedArray, DataView")),"string"==typeof e?e=(new TextEncoder).encode(e):e instanceof ArrayBuffer?e=new Uint8Array(e):ArrayBuffer.isView(e)?e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength):a(RangeError("S should be string, ArrayBuffer, TypedArray, DataView")),crypto.subtle.importKey("raw",t,"PBKDF2",!1,["deriveBits"]).then((o=>{const c={name:"PBKDF2",hash:i,salt:e,iterations:r};crypto.subtle.deriveBits(c,o,8*n).then((t=>s(t)),(o=>{(async function(t,e,r,n,i){if(!(i in m))throw new RangeError(`Valid hash algorithm values are any of ${Object.keys(m).toString()}`);if(!Number.isInteger(r)||r<=0)throw new RangeError("c must be a positive integer");const s=m[i].outputLength;if(!Number.isInteger(n)||n<=0||n>=(2**32-1)*s)throw new RangeError("dkLen must be a positive integer < (2 ** 32 - 1) * hLen");const a=Math.ceil(n/s),o=n-(a-1)*s,c=new Array(a);0===t.byteLength&&(t=new Uint8Array(m[i].blockSize));const h=await crypto.subtle.importKey("raw",t,{name:"HMAC",hash:{name:i}},!0,["sign"]),u=async function(t,e){const r=await crypto.subtle.sign("HMAC",t,e);return new Uint8Array(r)};for(let t=0;t<a;t++)c[t]=await l(h,e,r,t+1);async function l(t,e,r,n){function i(t){const e=new ArrayBuffer(4);return new DataView(e).setUint32(0,t,!1),new Uint8Array(e)}const s=await u(t,A(e,i(n)));let a=s;for(let e=1;e<r;e++)a=await u(t,a),E(s,a);return s}return c[a-1]=c[a-1].slice(0,o),A(...c).buffer})(t,e,r,n,i).then((t=>s(t)),(t=>a(t)))}))}),(t=>a(t)))}))}function A(...t){const e=t.reduce(((t,e)=>t+e.length),0);if(0===t.length)throw new RangeError("Cannot concat no arrays");const r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r}function E(t,e){for(let r=0;r<t.length;r++)t[r]^=e[r]}function S(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)}function x(t){return S(t)||Array.isArray(t)?Array.isArray(t)?t.map((t=>Array.isArray(t)||S(t)?x(t):t)):Object.keys(t).sort().map((e=>[e,x(t[e])])):t}function N(t){return JSON.stringify(x(t))}function T(t,e="SHA-256"){const r=["SHA-1","SHA-256","SHA-384","SHA-512"];if(!r.includes(e))throw RangeError(`Valid hash algorithm values are any of ${JSON.stringify(r)}`);return async function(t,e){const r=(new TextEncoder).encode(N(t)).buffer;let n="";{const t=await crypto.subtle.digest(e,r),i="0123456789abcdef";new Uint8Array(t).forEach((t=>{n+=i[t>>4]+i[15&t]}))}return n}(t,e)}class v{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const O=async(t,e,r)=>{const n=new Uint8Array(16),i=new Uint8Array(96),s=y(t),a=y(e);f.insertBytes(r,i,0,0,32),f.insertBytes(s,i,0,32,32),f.insertBytes(a,i,0,64,32);const o=await b(i,n,1,32);return new Uint8Array(o)};class R{constructor(t,e,r,i,s,a,o,c){this.port=t,this.from=e,this.to=r,this.na=i,this.nb=s,this.secret=a,this.cipher=new n("aes-256-gcm",o),this.decipher=new n("aes-256-gcm",c)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:p(this.na),nb:p(this.nb),secret:p(this.secret)}}async fromHash(){return await T(this.from)}async toHash(){return await T(this.to)}static async fromSecret(t,e,r,n,i,s){const a=await T(e),o=await T(r),c=await O(a,o,s),h=await O(o,a,s);return new R(t,e,r,n,i,s,c,h)}static async fromJSON(t){const e=w(t.na),r=w(t.nb),n=w(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class P{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:d(this.code)}}static async fromJSON(t,e){const r=await R.fromJSON(e.masterKey),n=y(e.code);let i;if("object"==typeof t)i=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");i=new t}return new P(i,r,n)}}class _ extends v{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(e.NONCE_LENGTH/8),r=new Uint8Array(t);return await i.randomFillBits(r,0,e.NONCE_LENGTH),r}async computeCx(t,r,n){const i=Math.ceil(e.NONCE_LENGTH/8),a=Math.ceil(e.DEFAULT_RANDOM_LENGTH/8),o=y(t.a.publicKey),c=y(t.b.publicKey),h=new Uint8Array(64+i+a);f.insertBytes(o,h,1,0,32),f.insertBytes(c,h,1,32,32),f.insertBits(r,h,0,512,e.NONCE_LENGTH),f.insertBits(n,h,0,512+e.NONCE_LENGTH,e.DEFAULT_RANDOM_LENGTH);return await s.digest("sha256",h)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:i,nx:s,r:a}=e.sent;if(!(r.length===i.length&&n.length===s.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===i[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,n,a)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,r,n){const i=Math.ceil(e.NONCE_LENGTH/8),s=await t.deriveBits(r.received.publicKey),a=new Uint8Array(16),o=new Uint8Array(32+2*i+6+64),c=new Uint8Array([109,97,115,116,101,114]),h=await T(r.a,"SHA-256"),u=y(h),l=await T(r.b,"SHA-256"),d=y(l);f.insertBytes(s,o,0,0,32),f.insertBytes(n.a.nx,o,0,32,i),f.insertBytes(n.a.nx,o,0,32+i,i),f.insertBytes(c,o,0,32+2*i,6),f.insertBytes(u,o,0,32+2*i+6,32),f.insertBytes(d,o,0,32+2*i+6+32,32);const p=await b(o,a,1,32);return await R.fromSecret(r.port,r.sent.id,r.received.id,n.a.nx,n.b.nx,new Uint8Array(p))}async run(){return await(async()=>{const t=new r;await t.generateKeys();const e=await t.getPublicKey(),n=await this.transport.prepare(this,e),i=await this.transport.publicKeyExchange(this,n),s=await this.computeR(i.a.rx,i.b.rx),a=await this.computeNx(),o={r:s,nx:a,cx:await this.computeCx(i,a,s)},c=await this.transport.authentication(this,o);await this.validateAuthData(i,c);const h=await this.computeMasterKey(t,i,c),u=await this.transport.verification(this,h),l=new P(this.transport,h,u);return this.emit("masterKey",h),l})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}}class L{constructor(t,e){this.buffer=t,this.l=e}toString(){return p(this.buffer)}extractPort(){const t=Math.ceil(e.PORT_LENGTH/8),r=this.l%8,n=new Uint8Array(t);f.insertBits(this.buffer,n,this.l,r,e.PORT_LENGTH);const i=l(n);return e.INITIAL_PORT+i}extractRb(){return f.extractBits(this.buffer,0,this.l)}static async generate(t,r){const n=Math.ceil((r+e.PORT_LENGTH)/8),s=new Uint8Array(n);await i.randomFillBits(s,0,r);const a=t-e.INITIAL_PORT;if(a<0||a>e.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const o=u(a,2);return f.insertBits(o,s,16-e.PORT_LENGTH,r,e.PORT_LENGTH),new L(s,r)}static fromString(t,e){return new L(w(t),e)}}const U={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return c(JSON.stringify(e))},async getMasterKey(t){const e=h(t);return await R.fromJSON(JSON.parse(e))}};class B extends t{constructor(t={}){super(),this.opts={host:t.host??"localhost",id:t.id??{name:"Initiator"},l:t.l??e.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=L.fromString(r,this.opts.l);const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await i.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:p(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:p(e.cx)}),n=await this.sendRequest({method:"nonce",nx:p(e.nx)}),i={cx:w(r.cx),nx:w(n.nx),r:e.r};return{a:e,b:{cx:w(r.cx),nx:w(n.nx),r:e.r},sent:e,received:i}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=w(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class H extends B{buildRpcUrl(t){return`http://${this.opts.host}:${t}/${e.RPC_URL_PATH}`}async baseSend(t,e){{const r=this.buildRpcUrl(t),n=await fetch(r,e),i=await n.text();return{status:n.status,body:i}}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=c(JSON.stringify(r)),i=await t.encrypt(n),s=await this.baseSend(t.port,{method:"POST",headers:{Authorization:h(e)},body:p(i)});if(s.status<=300&&s.status>=200){const e=w(s.body),r=await t.decrypt(e);s.body=h(r)}return s}}class K extends t{constructor(t={}){super(),this.opts={port:t.port??e.INITIAL_PORT,timeout:t.timeout??e.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??e.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??U},this.rpcSubject=new g}async pairing(t,e,r){this.stopPairing(),this.connString=await L.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const i={id:r.sender,publicKey:r.publicKey,rx:w(r.ra??"")};return{a:i,b:e,port:this.connString.extractPort(),sent:e,received:i}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:p(e.cx)});const n=r.req,i=await this.waitRequest("nonce");await i.res.send({method:"nonce",nx:p(e.nx)});const s=i.req,a={cx:w(n.cx),nx:w(s.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),i=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:p(i)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class C{}class M extends C{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}class G extends K{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${e.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new M(e)})}async dispatchEncryptedMessage(t,e,r){const n=c(r),i=await this.opts.codeGenerator.getMasterKey(n),s=await this.readRequestBody(t),a=w(s),o=await i.decrypt(a),u=h(o),l=JSON.parse(u);let y={};const d=l.init??{};void 0!==d.body&&""!==d.body&&(y=JSON.parse(d.body));const f=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),g=new Proxy(t,{get(t,e){switch(e){case"url":return l.url;case"method":return d.method;case"headers":return f;case"_body":case"walletProtocol":return!0;case"body":return y;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const s=void 0===r.statusCode?500:r.statusCode;if(s>=200&&s<300){const s=n[0],a=async()=>{let a;if("string"==typeof s)a=c(s);else{if(!(s instanceof Buffer))throw new Error("cannot manage this chunk...");a=s}const o=await i.encrypt(a),h=p(o);e.setHeader("Content-Length",h.length),t.call(r,h,...n.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(g,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}}export{t as BaseTransport,L as ConnectionString,H as HttpInitiatorTransport,G as HttpResponderTransport,R as MasterKey,P as Session,_ as WalletProtocol,e as constants,U as defaultCodeGenerator};
