"use strict";var t=require("crypto"),e=require("@juanelas/base64"),r=require("pbkdf2-hmac"),n=require("object-sha");function s(t){var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var i=s(e),o=s(n);class a{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var c={...Object.freeze({__proto__:null,COMMITMENT_LENGTH:256,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,INITIAL_PORT:29170,NONCE_LENGTH:128,PORT_LENGTH:12,PORT_SPACE:4096}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class h{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class u{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const n=Math.ceil(r/8),s=new Uint8Array(n);await this.randomFill(s,0,n),_.insertBits(s,t,0,e,r)}}class d{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class l{async digest(t,e){throw new Error("not implemented")}}const p=new class extends u{async randomFill(e,r,n){return await new Promise((s=>{t.randomFill(e,r,n,(()=>{s()}))}))}};class w extends d{async encrypt(e){const r=new Uint8Array(12);await p.randomFill(r,0,r.length);const n=t.createSecretKey(this.key),s=t.createCipheriv(this.algorithm,n,r),i=[];return i.push(r),i.push(s.update(e)),i.push(s.final()),i.push(s.getAuthTag()),_.join(...i)}async decrypt(e){const r=[];if("aes-256-gcm"===this.algorithm)r[0]=12,r[2]=16;r[1]=e.length-r[0]-(r[2]??0);const[n,s,i]=_.split(e,...r),o=t.createSecretKey(this.key),a=t.createDecipheriv(this.algorithm,o,n);void 0!==i&&a.setAuthTag(i);const c=[];return c.push(a.update(s)),c.push(a.final()),_.join(...c)}}class y extends h{constructor(){super(),this.ecdh=t.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const g=new class extends l{async digest(e,r){const n=t.createHash(e).update(r).digest();return new Uint8Array(n.buffer)}},m=t=>(new TextEncoder).encode(t),f=t=>(new TextDecoder).decode(t),x=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},b=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},v=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},P=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),E=t=>i.encode(t,!0,!1),S=t=>i.decode(t,!1),_={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),o=r%8,a=Math.floor(n/8),c=n%8,h=t[i]??0;const u=c-o;for(let r=0;r<s;r++){let r;r=u>=0?(h&128>>o)<<u:h&128>>o;const n=e[a]&~(128>>c)|r;e[a]=n,o++,c++,o>=8&&(i++,o=0,h=t[i]??0),c>=8&&(a++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return _.insertBits(t,s,e,0,r),s}};class T{constructor(t){this.maxLength=t,this._values=new Array(t),this._first=0,this._length=0}get length(){return this._length}push(t){this._values[this.lastIndex]=t,this.length>=this.maxLength?this._first=(this._first+1)%this.maxLength:this._length++}pop(){if(this.length>0){const t=this._values[this._first];return this._first=(this._first+1)%this.maxLength,this._length--,t}}get lastIndex(){return(this._first+this._length)%this.maxLength}get last(){return this._values[this.lastIndex]}}class N{constructor(t=1){this.queueLength=t,this.queue=new T(t)}get promise(){return this.createPromise()}async createPromise(){const t=this.queue.pop();return void 0!==t?t:await new Promise(((t,e)=>{if(void 0!==this.rejectPending||void 0!==this.resolvePending)return e(new B("wallet protocol: cannot create two promises of one subject")),void this.unbindPromise();this.resolvePending=e=>{t(e)},this.rejectPending=t=>e(t)}))}next(t){null!=this.resolvePending?(this.resolvePending(t),this.unbindPromise()):this.queue.push(t)}err(t){null!=this.rejectPending&&(this.rejectPending(t),this.unbindPromise())}finish(){void 0!==this.rejectPending&&(this.rejectPending(new B("wallet protocol: the subject has a pending promise")),this.unbindPromise())}unbindPromise(){this.resolvePending=void 0,this.rejectPending=void 0}}class O{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const A=async(t,e,n)=>{const s=new Uint8Array(16),i=new Uint8Array(96),o=v(t),a=v(e);_.insertBytes(n,i,0,0,32),_.insertBytes(o,i,0,32,32),_.insertBytes(a,i,0,64,32);const c=await r(i,s,1,32);return new Uint8Array(c)};class L{constructor(t,e,r,n,s,i,o,a){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new w("aes-256-gcm",o),this.decipher=new w("aes-256-gcm",a)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:E(this.na),nb:E(this.nb),secret:E(this.secret)}}async fromHash(){return await o.digest(this.from)}async toHash(){return await o.digest(this.to)}static async fromSecret(t,e,r,n,s,i){const a=await o.digest(e),c=await o.digest(r),h=await A(a,c,i),u=await A(c,a,i);return new L(t,e,r,n,s,i,h,u)}static async fromJSON(t){const e=S(t.na),r=S(t.nb),n=S(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class R{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:P(this.code)}}static async fromJSON(t,e){const r=await L.fromJSON(e.masterKey),n=v(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new R(s,r,n)}}class K{constructor(t,e){this.buffer=t,this.l=e}toString(){return E(this.buffer)}extractPort(){const t=Math.ceil(c.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);_.insertBits(this.buffer,r,this.l,e,c.PORT_LENGTH);const n=b(r);return c.INITIAL_PORT+n}extractRb(){return _.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+c.PORT_LENGTH)/8),n=new Uint8Array(r);await p.randomFillBits(n,0,e);const s=t-c.INITIAL_PORT;if(s<0||s>c.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=x(s,2);return _.insertBits(i,n,16-c.PORT_LENGTH,e,c.PORT_LENGTH),new K(n,e)}static fromString(t,e){return new K(S(t),e)}}const U={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return m(JSON.stringify(e))},async getMasterKey(t){const e=f(t);return await L.fromJSON(JSON.parse(e))}};class B extends Error{constructor(t,e=500,r){super(t),this.httpCode=e,this.parentError=r}}class C extends B{}class H extends a{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??c.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new C("empty connection string");try{this.connString=K.fromString(r,this.opts.l)}catch(t){throw new C("invalid pin format")}const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await p.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new C("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:E(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:E(e.cx)}),n=await this.sendRequest({method:"nonce",nx:E(e.nx)}),s={cx:S(r.cx),nx:S(n.nx),r:e.r};return{a:e,b:{cx:S(r.cx),nx:S(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=S(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class q extends a{constructor(t={}){super(),this.opts={port:t.port??c.INITIAL_PORT,timeout:t.timeout??c.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??c.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??U},this.rpcSubject=new N}async pairing(t,e,r){this.stopPairing(),this.connString=await K.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:S(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:E(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:E(e.nx)});const i=s.req,o={cx:S(n.cx),nx:S(i.nx),r:e.r};return{a:o,b:e,sent:e,received:o}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:E(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.finish(),this.connString=void 0}}class M{}class j extends M{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=a,exports.ConnectionString=K,exports.HttpInitiatorTransport=class extends H{async baseSend(t,e){{const r=require("http");return await new Promise((n=>{const s=e.body,i=r.request({path:`/${c.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=m(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:f(e)},body:E(s)});if(i.status<=300&&i.status>=200){const e=S(i.body),r=await t.decrypt(e);i.body=f(r)}return i}},exports.HttpResponderTransport=class extends q{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${c.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new j(e)})}async dispatchEncryptedMessage(t,e,r){let n,s;try{const t=m(r);n=await this.opts.codeGenerator.getMasterKey(t)}catch(t){throw new B("Unauthorized token",401,t)}try{const e=await this.readRequestBody(t),r=S(e),i=await n.decrypt(r),o=f(i);s=JSON.parse(o)}catch(t){throw new B("Invalid request body",401,t)}let i={};const o=s.init??{};void 0!==o.body&&""!==o.body&&(i=JSON.parse(o.body));const a=Object.entries(o.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),c=new Proxy(t,{get(t,e){switch(e){case"url":return s.url;case"method":return o.method;case"headers":return a;case"_body":case"walletProtocol":return!0;case"body":return i;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,s)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=s[0];(async()=>{let o;if("string"==typeof i)o=m(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");o=i}const a=await n.encrypt(o),c=E(a);e.setHeader("Content-Length",c.length),t.call(r,c,...s.slice(1))})().catch((t=>{console.error(t)}))}else t.call(r,...s)}}),await this.callListeners(c,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}},exports.InvalidPinError=C,exports.MasterKey=L,exports.Queue=T,exports.Session=R,exports.Subject=N,exports.WalletProtocol=class extends O{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(c.NONCE_LENGTH/8),e=new Uint8Array(t);return await p.randomFillBits(e,0,c.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(c.NONCE_LENGTH/8),s=Math.ceil(c.DEFAULT_RANDOM_LENGTH/8),i=v(t.a.publicKey),o=v(t.b.publicKey),a=new Uint8Array(64+n+s);_.insertBytes(i,a,1,0,32),_.insertBytes(o,a,1,32,32),_.insertBits(e,a,0,512,c.NONCE_LENGTH),_.insertBits(r,a,0,512+c.NONCE_LENGTH,c.DEFAULT_RANDOM_LENGTH);return await g.digest("sha256",a)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:o}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new C("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new C("received and sent Cx are the same");if(!(await this.computeCx(t,n,o)).every(((t,e)=>t===r[e])))throw new C("received a wrong Cx")}async computeMasterKey(t,e,n){const s=Math.ceil(c.NONCE_LENGTH/8),i=await t.deriveBits(e.received.publicKey),a=new Uint8Array(16),h=new Uint8Array(32+2*s+6+64),u=new Uint8Array([109,97,115,116,101,114]),d=await o.digest(e.a,"SHA-256"),l=v(d),p=await o.digest(e.b,"SHA-256"),w=v(p);_.insertBytes(i,h,0,0,32),_.insertBytes(n.a.nx,h,0,32,s),_.insertBytes(n.a.nx,h,0,32+s,s),_.insertBytes(u,h,0,32+2*s,6),_.insertBytes(l,h,0,32+2*s+6,32),_.insertBytes(w,h,0,32+2*s+6+32,32);const y=await r(h,a,1,32);return await L.fromSecret(e.port,e.sent.id,e.received.id,n.a.nx,n.b.nx,new Uint8Array(y))}async run(){const t=(async()=>{const t=new y;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e);let n;try{n=await this.transport.publicKeyExchange(this,r)}catch(t){if(t instanceof TypeError)throw new C(t.message);throw t}const s=await this.computeR(n.a.rx,n.b.rx),i=await this.computeNx(),o={r:s,nx:i,cx:await this.computeCx(n,i,s)},a=await this.transport.authentication(this,o);await this.validateAuthData(n,a);const c=await this.computeMasterKey(t,n,a),h=await this.transport.verification(this,c),u=new R(this.transport,c,h);return this.emit("masterKey",c),u})();return this._running=t,t.finally((()=>{this.transport.finish(this),this._running=void 0})),await t}get isRunning(){return void 0!==this._running}async finish(){this.transport.finish(this),void 0!==this._running&&await this._running.catch((()=>{}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.WalletProtocolError=B,exports.constants=c,exports.defaultCodeGenerator=U;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
