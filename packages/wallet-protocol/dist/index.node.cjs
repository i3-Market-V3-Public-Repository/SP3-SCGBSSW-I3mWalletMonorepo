"use strict";var t=require("crypto"),e=require("@juanelas/base64"),r=require("pbkdf2-hmac"),n=require("object-sha");function s(t){var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var i=s(e),a=s(n);class o{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var c={...Object.freeze({__proto__:null,COMMITMENT_LENGTH:256,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,INITIAL_PORT:29170,NONCE_LENGTH:128,PORT_LENGTH:12,PORT_SPACE:4096}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class h{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class u{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const n=Math.ceil(r/8),s=new Uint8Array(n);await this.randomFill(s,0,n),v.insertBits(s,t,0,e,r)}}class d{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class l{async digest(t,e){throw new Error("not implemented")}}const p=new class extends u{async randomFill(e,r,n){return await new Promise((s=>{t.randomFill(e,r,n,(()=>{s()}))}))}};class y extends d{async encrypt(e){const r=new Uint8Array(12);await p.randomFill(r,0,r.length);const n=t.createSecretKey(this.key),s=t.createCipheriv(this.algorithm,n,r),i=[];return i.push(r),i.push(s.update(e)),i.push(s.final()),i.push(s.getAuthTag()),v.join(...i)}async decrypt(e){const r=[];if("aes-256-gcm"===this.algorithm)r[0]=12,r[2]=16;r[1]=e.length-r[0]-(r[2]??0);const[n,s,i]=v.split(e,...r),a=t.createSecretKey(this.key),o=t.createDecipheriv(this.algorithm,a,n);void 0!==i&&o.setAuthTag(i);const c=[];return c.push(o.update(s)),c.push(o.final()),v.join(...c)}}class w extends h{constructor(){super(),this.ecdh=t.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const g=new class extends l{async digest(e,r){const n=t.createHash(e).update(r).digest();return new Uint8Array(n.buffer)}},m=t=>(new TextEncoder).encode(t),f=t=>(new TextDecoder).decode(t),x=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},b=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},E=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},S=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),T=t=>i.encode(t,!0,!1),N=t=>i.decode(t,!1),v={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(n/8),c=n%8,h=t[i]??0;const u=c-a;for(let r=0;r<s;r++){let r;r=u>=0?(h&128>>a)<<u:h&128>>a;const n=e[o]&~(128>>c)|r;e[o]=n,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return v.insertBits(t,s,e,0,r),s}};class O{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class P{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const A=async(t,e,n)=>{const s=new Uint8Array(16),i=new Uint8Array(96),a=E(t),o=E(e);v.insertBytes(n,i,0,0,32),v.insertBytes(a,i,0,32,32),v.insertBytes(o,i,0,64,32);const c=await r(i,s,1,32);return new Uint8Array(c)};class _{constructor(t,e,r,n,s,i,a,o){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new y("aes-256-gcm",a),this.decipher=new y("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:T(this.na),nb:T(this.nb),secret:T(this.secret)}}async fromHash(){return await a.digest(this.from)}async toHash(){return await a.digest(this.to)}static async fromSecret(t,e,r,n,s,i){const o=await a.digest(e),c=await a.digest(r),h=await A(o,c,i),u=await A(c,o,i);return new _(t,e,r,n,s,i,h,u)}static async fromJSON(t){const e=N(t.na),r=N(t.nb),n=N(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class R{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:S(this.code)}}static async fromJSON(t,e){const r=await _.fromJSON(e.masterKey),n=E(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new R(s,r,n)}}class L{constructor(t,e){this.buffer=t,this.l=e}toString(){return T(this.buffer)}extractPort(){const t=Math.ceil(c.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);v.insertBits(this.buffer,r,this.l,e,c.PORT_LENGTH);const n=b(r);return c.INITIAL_PORT+n}extractRb(){return v.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+c.PORT_LENGTH)/8),n=new Uint8Array(r);await p.randomFillBits(n,0,e);const s=t-c.INITIAL_PORT;if(s<0||s>c.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=x(s,2);return v.insertBits(i,n,16-c.PORT_LENGTH,e,c.PORT_LENGTH),new L(n,e)}static fromString(t,e){return new L(N(t),e)}}const K={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return m(JSON.stringify(e))},async getMasterKey(t){const e=f(t);return await _.fromJSON(JSON.parse(e))}};class U extends Error{}class B extends o{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??c.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new U("empty connection string");try{this.connString=L.fromString(r,this.opts.l)}catch(t){throw new U("invalid pin format")}const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await p.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new U("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:T(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:T(e.cx)}),n=await this.sendRequest({method:"nonce",nx:T(e.nx)}),s={cx:N(r.cx),nx:N(n.nx),r:e.r};return{a:e,b:{cx:N(r.cx),nx:N(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=N(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class C extends o{constructor(t={}){super(),this.opts={port:t.port??c.INITIAL_PORT,timeout:t.timeout??c.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??c.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??K},this.rpcSubject=new O}async pairing(t,e,r){this.stopPairing(),this.connString=await L.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:N(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:T(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:T(e.nx)});const i=s.req,a={cx:N(n.cx),nx:N(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:T(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class H{}class M extends H{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=o,exports.ConnectionString=L,exports.HttpInitiatorTransport=class extends B{async baseSend(t,e){{const r=require("http");return await new Promise((n=>{const s=e.body,i=r.request({path:`/${c.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=m(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:f(e)},body:T(s)});if(i.status<=300&&i.status>=200){const e=N(i.body),r=await t.decrypt(e);i.body=f(r)}return i}},exports.HttpResponderTransport=class extends C{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${c.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new M(e)})}async dispatchEncryptedMessage(t,e,r){const n=m(r),s=await this.opts.codeGenerator.getMasterKey(n),i=await this.readRequestBody(t),a=N(i),o=await s.decrypt(a),c=f(o),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const l=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=n[0],a=async()=>{let a;if("string"==typeof i)a=m(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await s.encrypt(a),c=T(o);e.setHeader("Content-Length",c.length),t.call(r,c,...n.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}},exports.InvalidPinError=U,exports.MasterKey=_,exports.Session=R,exports.WalletProtocol=class extends P{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(c.NONCE_LENGTH/8),e=new Uint8Array(t);return await p.randomFillBits(e,0,c.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(c.NONCE_LENGTH/8),s=Math.ceil(c.DEFAULT_RANDOM_LENGTH/8),i=E(t.a.publicKey),a=E(t.b.publicKey),o=new Uint8Array(64+n+s);v.insertBytes(i,o,1,0,32),v.insertBytes(a,o,1,32,32),v.insertBits(e,o,0,512,c.NONCE_LENGTH),v.insertBits(r,o,0,512+c.NONCE_LENGTH,c.DEFAULT_RANDOM_LENGTH);return await g.digest("sha256",o)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:a}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new U("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new U("received and sent Cx are the same");if(!(await this.computeCx(t,n,a)).every(((t,e)=>t===r[e])))throw new U("received a wrong Cx")}async computeMasterKey(t,e,n){const s=Math.ceil(c.NONCE_LENGTH/8),i=await t.deriveBits(e.received.publicKey),o=new Uint8Array(16),h=new Uint8Array(32+2*s+6+64),u=new Uint8Array([109,97,115,116,101,114]),d=await a.digest(e.a,"SHA-256"),l=E(d),p=await a.digest(e.b,"SHA-256"),y=E(p);v.insertBytes(i,h,0,0,32),v.insertBytes(n.a.nx,h,0,32,s),v.insertBytes(n.a.nx,h,0,32+s,s),v.insertBytes(u,h,0,32+2*s,6),v.insertBytes(l,h,0,32+2*s+6,32),v.insertBytes(y,h,0,32+2*s+6+32,32);const w=await r(h,o,1,32);return await _.fromSecret(e.port,e.sent.id,e.received.id,n.a.nx,n.b.nx,new Uint8Array(w))}async run(){return await(async()=>{const t=new w;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e);let n;try{n=await this.transport.publicKeyExchange(this,r)}catch(t){if(t instanceof TypeError)throw new U(t.message);throw t}const s=await this.computeR(n.a.rx,n.b.rx),i=await this.computeNx(),a={r:s,nx:i,cx:await this.computeCx(n,i,s)},o=await this.transport.authentication(this,a);await this.validateAuthData(n,o);const c=await this.computeMasterKey(t,n,o),h=await this.transport.verification(this,c),u=new R(this.transport,c,h);return this.emit("masterKey",c),u})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.constants=c,exports.defaultCodeGenerator=K;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy90cmFuc3BvcnQvdHJhbnNwb3J0LnRzIiwiLi4vc3JjL3RzL2NvbnN0YW50cy9pbmRleC50cyIsIi4uL3NyYy90cy9jb25zdGFudHMvcHJvdG9jb2wudHMiLCIuLi9zcmMvdHMvY29uc3RhbnRzL2h0dHAudHMiLCIuLi9zcmMvdHMvY3J5cHRvL3R5cGVzLnRzIiwiLi4vc3JjL3RzL2NyeXB0by9ub2RlanMvcmFuZG9tLnRzIiwiLi4vc3JjL3RzL2NyeXB0by9ub2RlanMvY2lwaGVyLnRzIiwiLi4vc3JjL3RzL2NyeXB0by9ub2RlanMvZWNkaC50cyIsIi4uL3NyYy90cy9jcnlwdG8vbm9kZWpzL2RpZ2VzdC50cyIsIi4uL3NyYy90cy91dGlsL2Zvcm1hdC50cyIsIi4uL3NyYy90cy91dGlsL2J1ZmZlci50cyIsIi4uL3NyYy90cy9zdWJqZWN0LnRzIiwiLi4vc3JjL3RzL3Byb3RvY29sL2V2ZW50LWVtaXR0ZXIudHMiLCIuLi9zcmMvdHMvcHJvdG9jb2wvbWFzdGVyLWtleS50cyIsIi4uL3NyYy90cy9wcm90b2NvbC9zZXNzaW9uLnRzIiwiLi4vc3JjL3RzL3Byb3RvY29sL2Nvbm5lY3Rpb24tc3RyaW5nLnRzIiwiLi4vc3JjL3RzL3Byb3RvY29sL2NvZGUtZ2VuZXJhdG9yLnRzIiwiLi4vc3JjL3RzL2Vycm9ycy50cyIsIi4uL3NyYy90cy90cmFuc3BvcnQvaW5pdGlhdG9yLXRyYW5zcG9ydC50cyIsIi4uL3NyYy90cy90cmFuc3BvcnQvcmVzcG9uZGVyLXRyYW5zcG9ydC50cyIsIi4uL3NyYy90cy90cmFuc3BvcnQvcmVzcG9uc2UudHMiLCIuLi9zcmMvdHMvdHJhbnNwb3J0L2h0dHAvaHR0cC1yZXNwb25zZS50cyIsIi4uL3NyYy90cy90cmFuc3BvcnQvaHR0cC9odHRwLWluaXRpYXRvci50cyIsIi4uL3NyYy90cy90cmFuc3BvcnQvaHR0cC9odHRwLXJlc3BvbmRlci50cyIsIi4uL3NyYy90cy9wcm90b2NvbC9wcm90b2NvbC50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsiQmFzZVRyYW5zcG9ydCIsImFzeW5jIiwibWFzdGVyS2V5IiwiY29kZSIsInJlcSIsIkVycm9yIiwiZmluaXNoIiwicHJvdG9jb2wiLCJlbWl0IiwiY29uc3RhbnRzIiwiQmFzZUVDREgiLCJwdWJsaWNLZXlIZXgiLCJCYXNlUmFuZG9tIiwiYnVmZmVyIiwic3RhcnQiLCJzaXplIiwiYnl0ZUxlbiIsIk1hdGgiLCJjZWlsIiwicmFuZG9tQnl0ZXMiLCJVaW50OEFycmF5IiwidGhpcyIsInJhbmRvbUZpbGwiLCJidWZmZXJVdGlscyIsImluc2VydEJpdHMiLCJCYXNlQ2lwaGVyIiwiY29uc3RydWN0b3IiLCJhbGdvcml0aG0iLCJrZXkiLCJwYXlsb2FkIiwiY2lwaGVydGV4dCIsIkJhc2VEaWdlc3QiLCJpbnB1dCIsInJhbmRvbSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3J5cHRvIiwiQ2lwaGVyIiwiaXYiLCJsZW5ndGgiLCJjcnlwdG9LZXkiLCJjcmVhdGVTZWNyZXRLZXkiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsImJ1ZmZlcnMiLCJwdXNoIiwidXBkYXRlIiwiZmluYWwiLCJnZXRBdXRoVGFnIiwiam9pbiIsImNyeXB0b3NlY3VlbmNlIiwic2l6ZXMiLCJhdXRoVGFnIiwic3BsaXQiLCJkZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJ1bmRlZmluZWQiLCJzZXRBdXRoVGFnIiwiRUNESCIsInN1cGVyIiwiZWNkaCIsImNyZWF0ZUVDREgiLCJnZW5lcmF0ZUtleXMiLCJnZXRQdWJsaWNLZXkiLCJjb21wdXRlU2VjcmV0IiwiZGlnZXN0IiwiY3JlYXRlSGFzaCIsImZvcm1hdCIsInRleHQiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImFyciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwibnVtIiwibGVuIiwicmVzdCIsImkiLCJuZXh0UmVzdCIsImhleCIsIm1hdGNoIiwibWFwIiwiYnl0ZSIsInBhcnNlSW50IiwicmVkdWNlIiwic3RyIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImJhc2U2NCIsImI2NCIsImxpc3QiLCJhIiwiYiIsImFjY0xlbiIsImVsIiwic2V0Iiwic2xpY2UiLCJpbnNlcnRCeXRlcyIsInNyYyIsImRzdCIsImZyb21TdGFydCIsInRvU3RhcnQiLCJmcm9tQnl0ZUluZGV4IiwiZmxvb3IiLCJmcm9tQml0SW5kZXgiLCJ0b0J5dGVJbmRleCIsInRvQml0SW5kZXgiLCJjdXJyRnJvbUJ5dGUiLCJkZWx0YU9mZnNldCIsImN1cnJCaXQiLCJiaXRTZXQiLCJleHRyYWN0Qml0cyIsImJ1ZiIsImJ5dGVTaXplIiwiU3ViamVjdCIsInByb21pc2UiLCJjcmVhdGVQcm9taXNlIiwicmVqZWN0IiwibmV4dCIsInZhbHVlIiwiZXJyIiwicmVhc29uIiwiRXZlbnRFbWl0dGVyIiwiZXZlbnRzIiwib24iLCJldmVudCIsImNiIiwiZGF0YSIsImV2ZW50Q2JzIiwiZm9yRWFjaCIsImV2ZW50Q2IiLCJkZXJpdmVLZXkiLCJmcm9tIiwidG8iLCJzZWNyZXQiLCJzYWx0IiwicGJrZGYySW5wdXQiLCJmcm9tQnVmZmVyIiwidG9CdWZmZXIiLCJkZXJpdmF0ZWRTZWNyZXQiLCJwYmtkZjJIbWFjIiwiTWFzdGVyS2V5IiwicG9ydCIsIm5hIiwibmIiLCJlbmNyeXB0S2V5IiwiZGVjcnlwdEtleSIsIm1lc3NhZ2UiLCJlbmNyeXB0IiwiZGVjcnlwdCIsInRvSlNPTiIsIm9iamVjdFNoYSIsInN0YXRpYyIsImZyb21IYXNoIiwidG9IYXNoIiwiZnJvbVNlY3JldCIsIlNlc3Npb24iLCJ0cmFuc3BvcnQiLCJyZXF1ZXN0Iiwic2VuZCIsIlRyYW5zcG9ydE9yQ29uc3RydWN0b3IiLCJqc29uIiwiZnJvbUpTT04iLCJGdW5jdGlvbiIsIkNvbm5lY3Rpb25TdHJpbmciLCJsIiwiZXh0cmFjdFBvcnQiLCJwb3J0Qnl0ZXNMZW4iLCJQT1JUX0xFTkdUSCIsInBvcnRCeXRlc09mZnNldCIsInBvcnRCeXRlcyIsImRwb3J0IiwiSU5JVElBTF9QT1JUIiwiZXh0cmFjdFJiIiwiY29ubkJ5dGVzTGVuIiwicmFuZG9tRmlsbEJpdHMiLCJQT1JUX1NQQUNFIiwiY29ublN0cmluZyIsImRlZmF1bHRDb2RlR2VuZXJhdG9yIiwiY29uc29sZSIsIndhcm4iLCJrZXlDb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwiSW52YWxpZFBpbkVycm9yIiwiSW5pdGlhdG9yVHJhbnNwb3J0Iiwib3B0cyIsImhvc3QiLCJpZCIsIm5hbWUiLCJERUZBVUxUX1JBTkRPTV9MRU5HVEgiLCJnZXRDb25uZWN0aW9uU3RyaW5nIiwicHVibGljS2V5IiwiZnJvbVN0cmluZyIsImxMZW4iLCJyYSIsInJ4IiwicGtlRGF0YSIsInJlc3BvbnNlIiwic2VuZFJlcXVlc3QiLCJtZXRob2QiLCJzZW5kZXIiLCJyZWNlaXZlZCIsInNlbnQiLCJhdXRoRGF0YSIsImNvbW1pdG1lbnRSZXEiLCJjeCIsIm5vbmNlUmVxIiwibngiLCJyIiwidmVyaWZDaGFsbGVuZ2UiLCJpbkNpcGhlcnRleHQiLCJSZXNwb25kZXJUcmFuc3BvcnQiLCJ0aW1lb3V0IiwiREVGQVVMVF9USU1FT1VUIiwiY29kZUdlbmVyYXRvciIsInJwY1N1YmplY3QiLCJzdG9wUGFpcmluZyIsImdlbmVyYXRlIiwibGFzdFBhaXJpbmciLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiaXNQYWlyaW5nIiwicGFpcmluZyIsInJwY1JlcXVlc3QiLCJyZXMiLCJ3YWl0UmVxdWVzdCIsImN4RGF0YSIsIm54RGF0YSIsInZlcmlmRGF0YSIsIlJlc3BvbnNlIiwiSHR0cFJlc3BvbnNlIiwid3JpdGUiLCJlbmQiLCJodHRwUmVxIiwiaHR0cCIsInJlcXVpcmUiLCJwb3N0RGF0YSIsImJvZHkiLCJwYXRoIiwiUlBDX1VSTF9QQVRIIiwiaGVhZGVycyIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJjaHVuayIsInN0YXR1cyIsInN0YXR1c0NvZGUiLCJyZXNwIiwiYmFzZVNlbmQiLCJBdXRob3JpemF0aW9uIiwiYm9keUNpcGhlcnRleHQiLCJqc29uQnVmZmVyIiwibGlzdGVuZXJzIiwicnBjVXJsIiwiY29uY2F0IiwicmVhZFJlcXVlc3RCb2R5IiwicmVxQm9keSIsImF1dGhlbnRpY2F0aW9uIiwiZ2V0TWFzdGVyS2V5IiwiY2lwaGVydGV4dEJhc2U2NCIsIm1lc3NhZ2VKc29uIiwiaW5uZXJCb2R5IiwiaW5pdCIsIk9iamVjdCIsImVudHJpZXMiLCJoIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXFQcm94eSIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwicCIsInVybCIsImFwcGx5IiwidGhpc0FyZyIsImFyZ3NBcnJheSIsInNldEhlYWRlciIsImNhbGwiLCJjYXRjaCIsImVycm9yIiwiY2FsbExpc3RlbmVycyIsImF1dGhvcml6YXRpb24iLCJkaXNwYXRjaEVuY3J5cHRlZE1lc3NhZ2UiLCJkaXNwYXRjaFByb3RvY29sTWVzc2FnZSIsImxpc3RlbmVyIiwidXNlIiwicmIiLCJ2YWwiLCJuTGVuIiwiTk9OQ0VfTEVOR1RIIiwickxlbiIsInBrYSIsInBrYiIsImZ1bGxQa2VEYXRhIiwiZnVsbEF1dGhEYXRhIiwicmVjZWl2ZWRDeCIsInJlY2VpdmVkTngiLCJzZW50Q3giLCJzZW50TngiLCJldmVyeSIsImNvbXB1dGVDeCIsInNoYXJlZFNlY3JldCIsImRlcml2ZUJpdHMiLCJzZWNyZXRXaXRoQ29udGV4dCIsIm1hc3RlckNvbnRleHQiLCJhSGFzaCIsImFIYXNoQnVmZmVyIiwiYkhhc2giLCJiSGFzaEJ1ZmZlciIsInByZXBhcmUiLCJwdWJsaWNLZXlFeGNoYW5nZSIsIlR5cGVFcnJvciIsImNvbXB1dGVSIiwiY29tcHV0ZU54IiwidmFsaWRhdGVBdXRoRGF0YSIsImNvbXB1dGVNYXN0ZXJLZXkiLCJ2ZXJpZmljYXRpb24iLCJzZXNzaW9uIiwiX3J1biIsImZpbmFsbHkiLCJhcmdzIl0sIm1hcHBpbmdzIjoiK1lBY3NCQSxFQU9wQkMsV0FBWUMsRUFBc0JDLEVBQWtCQyxHQUNsRCxN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
