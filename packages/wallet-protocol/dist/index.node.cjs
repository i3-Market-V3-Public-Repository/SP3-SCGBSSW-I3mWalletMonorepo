"use strict";var t=require("crypto"),e=require("@juanelas/base64"),n=require("pbkdf2-hmac"),r=require("object-sha");function s(t){var e=Object.create(null);return t&&Object.keys(t).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})}})),e.default=t,Object.freeze(e)}var i=s(e),a=s(r);class o{async send(t,e,n){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var c={...Object.freeze({__proto__:null,COMMITMENT_LENGTH:256,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,INITIAL_PORT:29170,NONCE_LENGTH:128,PORT_LENGTH:12,PORT_SPACE:4096}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class h{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class u{async randomFill(t,e,n){throw new Error("not implemented")}async randomFillBits(t,e,n){const r=Math.ceil(n/8),s=new Uint8Array(r);await this.randomFill(s,0,r),_.insertBits(s,t,0,e,n)}}class d{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class l{async digest(t,e){throw new Error("not implemented")}}const p=new class extends u{async randomFill(e,n,r){return await new Promise((s=>{t.randomFill(e,n,r,(()=>{s()}))}))}};class w extends d{async encrypt(e){const n=new Uint8Array(12);await p.randomFill(n,0,n.length);const r=t.createSecretKey(this.key),s=t.createCipheriv(this.algorithm,r,n),i=[];return i.push(n),i.push(s.update(e)),i.push(s.final()),i.push(s.getAuthTag()),_.join(...i)}async decrypt(e){const n=[];if("aes-256-gcm"===this.algorithm)n[0]=12,n[2]=16;n[1]=e.length-n[0]-(n[2]??0);const[r,s,i]=_.split(e,...n),a=t.createSecretKey(this.key),o=t.createDecipheriv(this.algorithm,a,r);void 0!==i&&o.setAuthTag(i);const c=[];return c.push(o.update(s)),c.push(o.final()),_.join(...c)}}class y extends h{constructor(){super(),this.ecdh=t.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const g=new class extends l{async digest(e,n){const r=t.createHash(e).update(n).digest();return new Uint8Array(r.buffer)}},m=t=>(new TextEncoder).encode(t),f=t=>(new TextDecoder).decode(t),x=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const n=new Uint8Array(e);let r=t;for(let t=e-1;t>=0;t--){const e=r>>8,s=r-(e<<8);n[t]=s,r=e}return n},b=t=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]<<t.length-1-n;return e},v=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},P=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),E=t=>i.encode(t,!0,!1),S=t=>i.decode(t,!1),_={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),n=new Uint8Array(e);let r=0;for(const e of t)n.set(e,r),r+=e.length;return n},split:(t,...e)=>{const n=[];let r=0;for(const s of e)n.push(t.slice(r,r+s)),r+=s;return n},insertBytes:(t,e,n,r,s)=>{for(let i=0;i<s;i++)e[i+r]=t[i+n]},insertBits:(t,e,n,r,s)=>{let i=Math.floor(n/8),a=n%8,o=Math.floor(r/8),c=r%8,h=t[i]??0;const u=c-a;for(let n=0;n<s;n++){let n;n=u>=0?(h&128>>a)<<u:h&128>>a;const r=e[o]&~(128>>c)|n;e[o]=r,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,n)=>{const r=Math.ceil(n/8),s=new Uint8Array(r);return _.insertBits(t,s,e,0,n),s}};class T{constructor(t){this.maxLength=t,this._values=new Array(t),this._first=0,this._length=0}get length(){return this._length}push(t){this._values[this.lastIndex]=t,this.length>=this.maxLength?this._first=(this._first+1)%this.maxLength:this._length++}pop(){if(this.length>0){const t=this._values[this._first];return this._first=(this._first+1)%this.maxLength,this._length--,t}}get lastIndex(){return(this._first+this._length)%this.maxLength}get last(){return this._values[this.lastIndex]}}class N{constructor(t=1){this.queueLength=t,this.queue=new T(t)}get promise(){return this.createPromise()}async createPromise(){const t=this.queue.pop();return void 0!==t?t:await new Promise(((t,e)=>{if(void 0!==this.rejectPending||void 0!==this.resolvePending)return e(new B("wallet protocol: cannot create two promises of one subject")),void this.unbindPromise();this.resolvePending=e=>{t(e)},this.rejectPending=t=>e(t)}))}next(t){null!=this.resolvePending?(this.resolvePending(t),this.unbindPromise()):this.queue.push(t)}err(t){null!=this.rejectPending&&(this.rejectPending(t),this.unbindPromise())}finish(){void 0!==this.rejectPending&&(this.rejectPending(new B("wallet protocol: the subject has a pending promise")),this.unbindPromise())}unbindPromise(){this.resolvePending=void 0,this.rejectPending=void 0}}class O{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const n=this.events[t];return void 0!==n&&(n.forEach((t=>t(...e))),!0)}}const A=async(t,e,r)=>{const s=new Uint8Array(16),i=new Uint8Array(96),a=v(t),o=v(e);_.insertBytes(r,i,0,0,32),_.insertBytes(a,i,0,32,32),_.insertBytes(o,i,0,64,32);const c=await n(i,s,1,32);return new Uint8Array(c)};class L{constructor(t,e,n,r,s,i,a,o){this.port=t,this.from=e,this.to=n,this.na=r,this.nb=s,this.secret=i,this.cipher=new w("aes-256-gcm",a),this.decipher=new w("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:E(this.na),nb:E(this.nb),secret:E(this.secret)}}async fromHash(){return await a.digest(this.from)}async toHash(){return await a.digest(this.to)}static async fromSecret(t,e,n,r,s,i){const o=await a.digest(e),c=await a.digest(n),h=await A(o,c,i),u=await A(c,o,i);return new L(t,e,n,r,s,i,h,u)}static async fromJSON(t){const e=S(t.na),n=S(t.nb),r=S(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,n,r)}}class R{constructor(t,e,n){this.transport=t,this.masterKey=e,this.code=n}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:P(this.code)}}static async fromJSON(t,e){const n=await L.fromJSON(e.masterKey),r=v(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new R(s,n,r)}}class K{constructor(t,e){this.buffer=t,this.l=e}toString(){return E(this.buffer)}extractPort(){const t=Math.ceil(c.PORT_LENGTH/8),e=this.l%8,n=new Uint8Array(t);_.insertBits(this.buffer,n,this.l,e,c.PORT_LENGTH);const r=b(n);return c.INITIAL_PORT+r}extractRb(){return _.extractBits(this.buffer,0,this.l)}static async generate(t,e){const n=Math.ceil((e+c.PORT_LENGTH)/8),r=new Uint8Array(n);await p.randomFillBits(r,0,e);const s=t-c.INITIAL_PORT;if(s<0||s>c.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=x(s,2);return _.insertBits(i,r,16-c.PORT_LENGTH,e,c.PORT_LENGTH),new K(r,e)}static fromString(t,e){return new K(S(t),e)}}const U={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return m(JSON.stringify(e))},async getMasterKey(t){const e=f(t);return await L.fromJSON(JSON.parse(e))}};class B extends Error{}class C extends B{}class H extends o{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??c.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const n=await this.opts.getConnectionString();if(""===n)throw new C("empty connection string");try{this.connString=K.fromString(n,this.opts.l)}catch(t){throw new C("invalid pin format")}const r=Math.ceil(this.opts.l/8),s=new Uint8Array(r);return await p.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new C("missing connection string");const n=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:E(e.rx)}),r={id:n.sender,publicKey:n.publicKey,rx:this.connString.extractRb()};return{a:e,b:r,port:this.connString.extractPort(),sent:e,received:r}}async authentication(t,e){const n=await this.sendRequest({method:"commitment",cx:E(e.cx)}),r=await this.sendRequest({method:"nonce",nx:E(e.nx)}),s={cx:S(n.cx),nx:S(r.nx),r:e.r};return{a:e,b:{cx:S(n.cx),nx:S(r.nx),r:e.r},sent:e,received:s}}async verification(t,e){const n=await this.sendRequest({method:"verification"}),r=S(n.ciphertext);return await e.decrypt(r)}finish(t){super.finish(t),this.connString=void 0}}class M extends o{constructor(t={}){super(),this.opts={port:t.port??c.INITIAL_PORT,timeout:t.timeout??c.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??c.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??U},this.rpcSubject=new N}async pairing(t,e,n){this.stopPairing(),this.connString=await K.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),n)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:n,res:r}=await this.waitRequest("publicKeyExchange");await r.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:n.sender,publicKey:n.publicKey,rx:S(n.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const n=await this.waitRequest("commitment");await n.res.send({method:"commitment",cx:E(e.cx)});const r=n.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:E(e.nx)});const i=s.req,a={cx:S(r.cx),nx:S(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const n=await this.waitRequest("verification"),r=await this.opts.codeGenerator.generate(e),s=await e.encrypt(r);return await n.res.send({method:"verificationChallenge",ciphertext:E(s)}),r}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.finish(),this.connString=void 0}}class j{}class q extends j{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=o,exports.ConnectionString=K,exports.HttpInitiatorTransport=class extends H{async baseSend(t,e){{const n=require("http");return await new Promise((r=>{const s=e.body,i=n.request({path:`/${c.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{r({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),n=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(n.body)}async send(t,e,n){const r=m(JSON.stringify(n)),s=await t.encrypt(r),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:f(e)},body:E(s)});if(i.status<=300&&i.status>=200){const e=S(i.body),n=await t.decrypt(e);i.body=f(n)}return i}},exports.HttpResponderTransport=class extends M{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${c.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const n of t)e.push(n);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const n=await this.readRequestBody(t),r=JSON.parse(n);this.rpcSubject.next({req:r,res:new q(e)})}async dispatchEncryptedMessage(t,e,n){const r=m(n),s=await this.opts.codeGenerator.getMasterKey(r),i=await this.readRequestBody(t),a=S(i),o=await s.decrypt(a),c=f(o),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const l=Object.entries(d.headers??{}).reduce(((t,[e,n])=>(t[e.toLocaleLowerCase()]=n,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,n,r)=>{const i=void 0===n.statusCode?500:n.statusCode;if(i>=200&&i<300){const i=r[0],a=async()=>{let a;if("string"==typeof i)a=m(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await s.encrypt(a),c=E(o);e.setHeader("Content-Length",c.length),t.call(n,c,...r.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(n,...r)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const n of this.listeners)n(t,e)}use(t){this.listeners.push(t)}},exports.InvalidPinError=C,exports.MasterKey=L,exports.Queue=T,exports.Session=R,exports.Subject=N,exports.WalletProtocol=class extends O{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,n)=>t^e[n]))}async computeNx(){const t=Math.ceil(c.NONCE_LENGTH/8),e=new Uint8Array(t);return await p.randomFillBits(e,0,c.NONCE_LENGTH),e}async computeCx(t,e,n){const r=Math.ceil(c.NONCE_LENGTH/8),s=Math.ceil(c.DEFAULT_RANDOM_LENGTH/8),i=v(t.a.publicKey),a=v(t.b.publicKey),o=new Uint8Array(64+r+s);_.insertBytes(i,o,1,0,32),_.insertBytes(a,o,1,32,32),_.insertBits(e,o,0,512,c.NONCE_LENGTH),_.insertBits(n,o,0,512+c.NONCE_LENGTH,c.DEFAULT_RANDOM_LENGTH);return await g.digest("sha256",o)}async validateAuthData(t,e){const{cx:n,nx:r}=e.received,{cx:s,nx:i,r:a}=e.sent;if(!(n.length===s.length&&r.length===i.length))throw new C("invalid received auth data length");if(n.every(((t,e)=>t===s[e])))throw new C("received and sent Cx are the same");if(!(await this.computeCx(t,r,a)).every(((t,e)=>t===n[e])))throw new C("received a wrong Cx")}async computeMasterKey(t,e,r){const s=Math.ceil(c.NONCE_LENGTH/8),i=await t.deriveBits(e.received.publicKey),o=new Uint8Array(16),h=new Uint8Array(32+2*s+6+64),u=new Uint8Array([109,97,115,116,101,114]),d=await a.digest(e.a,"SHA-256"),l=v(d),p=await a.digest(e.b,"SHA-256"),w=v(p);_.insertBytes(i,h,0,0,32),_.insertBytes(r.a.nx,h,0,32,s),_.insertBytes(r.a.nx,h,0,32+s,s),_.insertBytes(u,h,0,32+2*s,6),_.insertBytes(l,h,0,32+2*s+6,32),_.insertBytes(w,h,0,32+2*s+6+32,32);const y=await n(h,o,1,32);return await L.fromSecret(e.port,e.sent.id,e.received.id,r.a.nx,r.b.nx,new Uint8Array(y))}async run(){const t=(async()=>{const t=new y;await t.generateKeys();const e=await t.getPublicKey(),n=await this.transport.prepare(this,e);let r;try{r=await this.transport.publicKeyExchange(this,n)}catch(t){if(t instanceof TypeError)throw new C(t.message);throw t}const s=await this.computeR(r.a.rx,r.b.rx),i=await this.computeNx(),a={r:s,nx:i,cx:await this.computeCx(r,i,s)},o=await this.transport.authentication(this,a);await this.validateAuthData(r,o);const c=await this.computeMasterKey(t,r,o),h=await this.transport.verification(this,c),u=new R(this.transport,c,h);return this.emit("masterKey",c),u})();return this._running=t,t.finally((()=>{this.transport.finish(this),this._running=void 0})),await t}get isRunning(){return void 0!==this._running}async finish(){this.transport.finish(this),void 0!==this._running&&await this._running.catch((()=>{}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.WalletProtocolError=B,exports.constants=c,exports.defaultCodeGenerator=U;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
