"use strict";var t=require("crypto"),e=require("@juanelas/base64"),r=require("pbkdf2-hmac"),n=require("object-sha");function s(t){var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var i=s(e),a=s(n);class o{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var c={...Object.freeze({__proto__:null,COMMITMENT_LENGTH:256,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,INITIAL_PORT:29170,NONCE_LENGTH:128,PORT_LENGTH:12,PORT_SPACE:4096}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class h{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class u{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const n=Math.ceil(r/8),s=new Uint8Array(n);await this.randomFill(s,0,n),O.insertBits(s,t,0,e,r)}}class d{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class l{async digest(t,e){throw new Error("not implemented")}}const p=new class extends u{async randomFill(e,r,n){return await new Promise((s=>{t.randomFill(e,r,n,(()=>{s()}))}))}};class y extends d{async encrypt(e){const r=new Uint8Array(12);await p.randomFill(r,0,r.length);const n=t.createSecretKey(this.key),s=t.createCipheriv(this.algorithm,n,r),i=[];return i.push(r),i.push(s.update(e)),i.push(s.final()),i.push(s.getAuthTag()),O.join(...i)}async decrypt(e){const r=[];if("aes-256-gcm"===this.algorithm)r[0]=12,r[2]=16;r[1]=e.length-r[0]-(r[2]??0);const[n,s,i]=O.split(e,...r),a=t.createSecretKey(this.key),o=t.createDecipheriv(this.algorithm,a,n);void 0!==i&&o.setAuthTag(i);const c=[];return c.push(o.update(s)),c.push(o.final()),O.join(...c)}}class w extends h{constructor(){super(),this.ecdh=t.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const g=new class extends l{async digest(e,r){const n=t.createHash(e).update(r).digest();return new Uint8Array(n.buffer)}},m=t=>(new TextEncoder).encode(t),f=t=>(new TextDecoder).decode(t),x=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},b=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},E=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},S=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),T=t=>i.encode(t,!0,!1),N=t=>i.decode(t,!1),O={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(n/8),c=n%8,h=t[i]??0;const u=c-a;for(let r=0;r<s;r++){let r;r=u>=0?(h&128>>a)<<u:h&128>>a;const n=e[o]&~(128>>c)|r;e[o]=n,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return O.insertBits(t,s,e,0,r),s}};class v{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class P{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const A=async(t,e,n)=>{const s=new Uint8Array(16),i=new Uint8Array(96),a=E(t),o=E(e);O.insertBytes(n,i,0,0,32),O.insertBytes(a,i,0,32,32),O.insertBytes(o,i,0,64,32);const c=await r(i,s,1,32);return new Uint8Array(c)};class _{constructor(t,e,r,n,s,i,a,o){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new y("aes-256-gcm",a),this.decipher=new y("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:T(this.na),nb:T(this.nb),secret:T(this.secret)}}async fromHash(){return await a.digest(this.from)}async toHash(){return await a.digest(this.to)}static async fromSecret(t,e,r,n,s,i){const o=await a.digest(e),c=await a.digest(r),h=await A(o,c,i),u=await A(c,o,i);return new _(t,e,r,n,s,i,h,u)}static async fromJSON(t){const e=N(t.na),r=N(t.nb),n=N(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class R{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:S(this.code)}}static async fromJSON(t,e){const r=await _.fromJSON(e.masterKey),n=E(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new R(s,r,n)}}class L{constructor(t,e){this.buffer=t,this.l=e}toString(){return T(this.buffer)}extractPort(){const t=Math.ceil(c.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);O.insertBits(this.buffer,r,this.l,e,c.PORT_LENGTH);const n=b(r);return c.INITIAL_PORT+n}extractRb(){return O.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+c.PORT_LENGTH)/8),n=new Uint8Array(r);await p.randomFillBits(n,0,e);const s=t-c.INITIAL_PORT;if(s<0||s>c.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=x(s,2);return O.insertBits(i,n,16-c.PORT_LENGTH,e,c.PORT_LENGTH),new L(n,e)}static fromString(t,e){return new L(N(t),e)}}const K={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return m(JSON.stringify(e))},async getMasterKey(t){const e=f(t);return await _.fromJSON(JSON.parse(e))}};class U extends o{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??c.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=L.fromString(r,this.opts.l);const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await p.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:T(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:T(e.cx)}),n=await this.sendRequest({method:"nonce",nx:T(e.nx)}),s={cx:N(r.cx),nx:N(n.nx),r:e.r};return{a:e,b:{cx:N(r.cx),nx:N(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=N(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class B extends o{constructor(t={}){super(),this.opts={port:t.port??c.INITIAL_PORT,timeout:t.timeout??c.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??c.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??K},this.rpcSubject=new v}async pairing(t,e,r){this.stopPairing(),this.connString=await L.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:N(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:T(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:T(e.nx)});const i=s.req,a={cx:N(n.cx),nx:N(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:T(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class C{}class H extends C{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=o,exports.ConnectionString=L,exports.HttpInitiatorTransport=class extends U{async baseSend(t,e){{const r=require("http");return await new Promise((n=>{const s=e.body,i=r.request({path:`/${c.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=m(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:f(e)},body:T(s)});if(i.status<=300&&i.status>=200){const e=N(i.body),r=await t.decrypt(e);i.body=f(r)}return i}},exports.HttpResponderTransport=class extends B{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${c.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new H(e)})}async dispatchEncryptedMessage(t,e,r){const n=m(r),s=await this.opts.codeGenerator.getMasterKey(n),i=await this.readRequestBody(t),a=N(i),o=await s.decrypt(a),c=f(o),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const l=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=n[0],a=async()=>{let a;if("string"==typeof i)a=m(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await s.encrypt(a),c=T(o);e.setHeader("Content-Length",c.length),t.call(r,c,...n.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}},exports.MasterKey=_,exports.Session=R,exports.WalletProtocol=class extends P{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(c.NONCE_LENGTH/8),e=new Uint8Array(t);return await p.randomFillBits(e,0,c.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(c.NONCE_LENGTH/8),s=Math.ceil(c.DEFAULT_RANDOM_LENGTH/8),i=E(t.a.publicKey),a=E(t.b.publicKey),o=new Uint8Array(64+n+s);O.insertBytes(i,o,1,0,32),O.insertBytes(a,o,1,32,32),O.insertBits(e,o,0,512,c.NONCE_LENGTH),O.insertBits(r,o,0,512+c.NONCE_LENGTH,c.DEFAULT_RANDOM_LENGTH);return await g.digest("sha256",o)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:a}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,n,a)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,e,n){const s=Math.ceil(c.NONCE_LENGTH/8),i=await t.deriveBits(e.received.publicKey),o=new Uint8Array(16),h=new Uint8Array(32+2*s+6+64),u=new Uint8Array([109,97,115,116,101,114]),d=await a.digest(e.a,"SHA-256"),l=E(d),p=await a.digest(e.b,"SHA-256"),y=E(p);O.insertBytes(i,h,0,0,32),O.insertBytes(n.a.nx,h,0,32,s),O.insertBytes(n.a.nx,h,0,32+s,s),O.insertBytes(u,h,0,32+2*s,6),O.insertBytes(l,h,0,32+2*s+6,32),O.insertBytes(y,h,0,32+2*s+6+32,32);const w=await r(h,o,1,32);return await _.fromSecret(e.port,e.sent.id,e.received.id,n.a.nx,n.b.nx,new Uint8Array(w))}async run(){return await(async()=>{const t=new w;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e),n=await this.transport.publicKeyExchange(this,r),s=await this.computeR(n.a.rx,n.b.rx),i=await this.computeNx(),a={r:s,nx:i,cx:await this.computeCx(n,i,s)},o=await this.transport.authentication(this,a);await this.validateAuthData(n,o);const c=await this.computeMasterKey(t,n,o),h=await this.transport.verification(this,c),u=new R(this.transport,c,h);return this.emit("masterKey",c),u})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.constants=c,exports.defaultCodeGenerator=K;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
