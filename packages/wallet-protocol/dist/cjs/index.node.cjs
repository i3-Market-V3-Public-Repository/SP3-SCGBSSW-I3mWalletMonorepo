"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("@juanelas/base64"),r=require("pbkdf2-hmac"),n=require("object-sha");function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}function i(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var a=s(t),o=i(e),c=s(r),h=i(n);class u{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var d={...Object.freeze({__proto__:null,PORT_LENGTH:12,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,PORT_SPACE:4096,INITIAL_PORT:29170,NONCE_LENGTH:128,COMMITMENT_LENGTH:256}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class l{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class p{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const n=Math.ceil(r/8),s=new Uint8Array(n);await this.randomFill(s,0,n),_.insertBits(s,t,0,e,r)}}class y{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class w{async digest(t,e){throw new Error("not implemented")}}const f=new class extends p{async randomFill(t,e,r){return await new Promise((n=>{a.default.randomFill(t,e,r,(()=>{n()}))}))}};class g extends y{async encrypt(t){const e=new Uint8Array(12);await f.randomFill(e,0,e.length);const r=a.default.createSecretKey(this.key),n=a.default.createCipheriv(this.algorithm,r,e),s=[];return s.push(e),s.push(n.update(t)),s.push(n.final()),s.push(n.getAuthTag()),_.join(...s)}async decrypt(t){const e=[];if("aes-256-gcm"===this.algorithm)e[0]=12,e[2]=16;e[1]=t.length-e[0]-(e[2]??0);const[r,n,s]=_.split(t,...e),i=a.default.createSecretKey(this.key),o=a.default.createDecipheriv(this.algorithm,i,r);void 0!==s&&o.setAuthTag(s);const c=[];return c.push(o.update(n)),c.push(o.final()),_.join(...c)}}class m extends l{constructor(){super(),this.ecdh=a.default.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const x=new class extends w{async digest(t,e){const r=a.default.createHash(t).update(e).digest();return new Uint8Array(r.buffer)}},b=t=>(new TextEncoder).encode(t),E=t=>(new TextDecoder).decode(t),S=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},T=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},N=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},O=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),P=t=>o.encode(t,!0,!1),v=t=>o.decode(t,!1),_={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(n/8),c=n%8,h=t[i]??0;const u=c-a;for(let r=0;r<s;r++){let r;r=u>=0?(h&128>>a)<<u:h&128>>a;const n=e[o]&~(128>>c)|r;e[o]=n,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return _.insertBits(t,s,e,0,r),s}};class A{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class R{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const L=async(t,e,r)=>{const n=new Uint8Array(16),s=new Uint8Array(96),i=N(t),a=N(e);_.insertBytes(r,s,0,0,32),_.insertBytes(i,s,0,32,32),_.insertBytes(a,s,0,64,32);const o=await c.default(s,n,1,32);return new Uint8Array(o)};class K{constructor(t,e,r,n,s,i,a,o){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new g("aes-256-gcm",a),this.decipher=new g("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:P(this.na),nb:P(this.nb),secret:P(this.secret)}}async fromHash(){return await h.digest(this.from)}async toHash(){return await h.digest(this.to)}static async fromSecret(t,e,r,n,s,i){const a=await h.digest(e),o=await h.digest(r),c=await L(a,o,i),u=await L(o,a,i);return new K(t,e,r,n,s,i,c,u)}static async fromJSON(t){const e=v(t.na),r=v(t.nb),n=v(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class U{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:O(this.code)}}static async fromJSON(t,e){const r=await K.fromJSON(e.masterKey),n=N(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new U(s,r,n)}}class B{constructor(t,e){this.buffer=t,this.l=e}toString(){return P(this.buffer)}extractPort(){const t=Math.ceil(d.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);_.insertBits(this.buffer,r,this.l,e,d.PORT_LENGTH);const n=T(r);return d.INITIAL_PORT+n}extractRb(){return _.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+d.PORT_LENGTH)/8),n=new Uint8Array(r);await f.randomFillBits(n,0,e);const s=t-d.INITIAL_PORT;if(s<0||s>d.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=S(s,2);return _.insertBits(i,n,16-d.PORT_LENGTH,e,d.PORT_LENGTH),new B(n,e)}static fromString(t,e){return new B(v(t),e)}}const C={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return b(JSON.stringify(e))},async getMasterKey(t){const e=E(t);return await K.fromJSON(JSON.parse(e))}};class H extends u{constructor(t={}){super(),this.opts={host:t.host??"localhost",id:t.id??{name:"Initiator"},l:t.l??d.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=B.fromString(r,this.opts.l);const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await f.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:P(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:P(e.cx)}),n=await this.sendRequest({method:"nonce",nx:P(e.nx)}),s={cx:v(r.cx),nx:v(n.nx),r:e.r};return{a:e,b:{cx:v(r.cx),nx:v(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=v(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class M extends u{constructor(t={}){super(),this.opts={port:t.port??d.INITIAL_PORT,timeout:t.timeout??d.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??d.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??C},this.rpcSubject=new A}async pairing(t,e,r){this.stopPairing(),this.connString=await B.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:v(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:P(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:P(e.nx)});const i=s.req,a={cx:v(n.cx),nx:v(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:P(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class q{}class j extends q{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=u,exports.ConnectionString=B,exports.HttpInitiatorTransport=class extends H{buildRpcUrl(t){return`http://${this.opts.host}:${t}/${d.RPC_URL_PATH}`}async baseSend(t,e){{const r=require("http");return await new Promise((n=>{const s=e.body,i=r.request({path:`/${d.RPC_URL_PATH}`,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=b(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:E(e)},body:P(s)});if(i.status<=300&&i.status>=200){const e=v(i.body),r=await t.decrypt(e);i.body=E(r)}return i}},exports.HttpResponderTransport=class extends M{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${d.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new j(e)})}async dispatchEncryptedMessage(t,e,r){const n=b(r),s=await this.opts.codeGenerator.getMasterKey(n),i=await this.readRequestBody(t),a=v(i),o=await s.decrypt(a),c=E(o),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const l=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=n[0],a=async()=>{let a;if("string"==typeof i)a=b(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await s.encrypt(a),c=P(o);e.setHeader("Content-Length",c.length),t.call(r,c,...n.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}},exports.MasterKey=K,exports.Session=U,exports.WalletProtocol=class extends R{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(d.NONCE_LENGTH/8),e=new Uint8Array(t);return await f.randomFillBits(e,0,d.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(d.NONCE_LENGTH/8),s=Math.ceil(d.DEFAULT_RANDOM_LENGTH/8),i=N(t.a.publicKey),a=N(t.b.publicKey),o=new Uint8Array(64+n+s);_.insertBytes(i,o,1,0,32),_.insertBytes(a,o,1,32,32),_.insertBits(e,o,0,512,d.NONCE_LENGTH),_.insertBits(r,o,0,512+d.NONCE_LENGTH,d.DEFAULT_RANDOM_LENGTH);return await x.digest("sha256",o)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:a}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,n,a)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,e,r){const n=Math.ceil(d.NONCE_LENGTH/8),s=await t.deriveBits(e.received.publicKey),i=new Uint8Array(16),a=new Uint8Array(32+2*n+6+64),o=new Uint8Array([109,97,115,116,101,114]),u=await h.digest(e.a,"SHA-256"),l=N(u),p=await h.digest(e.b,"SHA-256"),y=N(p);_.insertBytes(s,a,0,0,32),_.insertBytes(r.a.nx,a,0,32,n),_.insertBytes(r.a.nx,a,0,32+n,n),_.insertBytes(o,a,0,32+2*n,6),_.insertBytes(l,a,0,32+2*n+6,32),_.insertBytes(y,a,0,32+2*n+6+32,32);const w=await c.default(a,i,1,32);return await K.fromSecret(e.port,e.sent.id,e.received.id,r.a.nx,r.b.nx,new Uint8Array(w))}async run(){return await(async()=>{const t=new m;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e),n=await this.transport.publicKeyExchange(this,r),s=await this.computeR(n.a.rx,n.b.rx),i=await this.computeNx(),a={r:s,nx:i,cx:await this.computeCx(n,i,s)},o=await this.transport.authentication(this,a);await this.validateAuthData(n,o);const c=await this.computeMasterKey(t,n,o),h=await this.transport.verification(this,c),u=new U(this.transport,c,h);return this.emit("masterKey",c),u})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.constants=d,exports.defaultCodeGenerator=C;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cy90cmFuc3BvcnQvdHJhbnNwb3J0LnRzIiwiLi4vLi4vc3JjL3RzL2NvbnN0YW50cy9pbmRleC50cyIsIi4uLy4uL3NyYy90cy9jb25zdGFudHMvcHJvdG9jb2wudHMiLCIuLi8uLi9zcmMvdHMvY29uc3RhbnRzL2h0dHAudHMiLCIuLi8uLi9zcmMvdHMvY3J5cHRvL3R5cGVzLnRzIiwiLi4vLi4vc3JjL3RzL2NyeXB0by9ub2RlanMvcmFuZG9tLnRzIiwiLi4vLi4vc3JjL3RzL2NyeXB0by9ub2RlanMvY2lwaGVyLnRzIiwiLi4vLi4vc3JjL3RzL2NyeXB0by9ub2RlanMvZWNkaC50cyIsIi4uLy4uL3NyYy90cy9jcnlwdG8vbm9kZWpzL2RpZ2VzdC50cyIsIi4uLy4uL3NyYy90cy91dGlsL2Zvcm1hdC50cyIsIi4uLy4uL3NyYy90cy91dGlsL2J1ZmZlci50cyIsIi4uLy4uL3NyYy90cy9zdWJqZWN0LnRzIiwiLi4vLi4vc3JjL3RzL3Byb3RvY29sL2V2ZW50LWVtaXR0ZXIudHMiLCIuLi8uLi9zcmMvdHMvcHJvdG9jb2wvbWFzdGVyLWtleS50cyIsIi4uLy4uL3NyYy90cy9wcm90b2NvbC9zZXNzaW9uLnRzIiwiLi4vLi4vc3JjL3RzL3Byb3RvY29sL2Nvbm5lY3Rpb24tc3RyaW5nLnRzIiwiLi4vLi4vc3JjL3RzL3Byb3RvY29sL2NvZGUtZ2VuZXJhdG9yLnRzIiwiLi4vLi4vc3JjL3RzL3RyYW5zcG9ydC9pbml0aWF0b3ItdHJhbnNwb3J0LnRzIiwiLi4vLi4vc3JjL3RzL3RyYW5zcG9ydC9yZXNwb25kZXItdHJhbnNwb3J0LnRzIiwiLi4vLi4vc3JjL3RzL3RyYW5zcG9ydC9yZXNwb25zZS50cyIsIi4uLy4uL3NyYy90cy90cmFuc3BvcnQvaHR0cC9odHRwLXJlc3BvbnNlLnRzIiwiLi4vLi4vc3JjL3RzL3RyYW5zcG9ydC9odHRwL2h0dHAtaW5pdGlhdG9yLnRzIiwiLi4vLi4vc3JjL3RzL3RyYW5zcG9ydC9odHRwL2h0dHAtcmVzcG9uZGVyLnRzIiwiLi4vLi4vc3JjL3RzL3Byb3RvY29sL3Byb3RvY29sLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJCYXNlVHJhbnNwb3J0IiwiYXN5bmMiLCJtYXN0ZXJLZXkiLCJjb2RlIiwicmVxIiwiRXJyb3IiLCJmaW5pc2giLCJwcm90b2NvbCIsImVtaXQiLCJjb25zdGFudHMiLCJCYXNlRUNESCIsInB1YmxpY0tleUhleCIsIkJhc2VSYW5kb20iLCJidWZmZXIiLCJzdGFydCIsInNpemUiLCJieXRlTGVuIiwiTWF0aCIsImNlaWwiLCJyYW5kb21CeXRlcyIsIlVpbnQ4QXJyYXkiLCJ0aGlzIiwicmFuZG9tRmlsbCIsImJ1ZmZlclV0aWxzIiwiaW5zZXJ0Qml0cyIsIkJhc2VDaXBoZXIiLCJjb25zdHJ1Y3RvciIsImFsZ29yaXRobSIsImtleSIsInBheWxvYWQiLCJjaXBoZXJ0ZXh0IiwiQmFzZURpZ2VzdCIsImlucHV0IiwicmFuZG9tIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjcnlwdG8iLCJDaXBoZXIiLCJpdiIsImxlbmd0aCIsImNyeXB0b0tleSIsImNyZWF0ZVNlY3JldEtleSIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiYnVmZmVycyIsInB1c2giLCJ1cGRhdGUiLCJmaW5hbCIsImdldEF1dGhUYWciLCJqb2luIiwiY3J5cHRvc2VjdWVuY2UiLCJzaXplcyIsImF1dGhUYWciLCJzcGxpdCIsImRlY2lwaGVyIiwiY3JlYXRlRGVjaXBoZXJpdiIsInVuZGVmaW5lZCIsInNldEF1dGhUYWciLCJFQ0RIIiwic3VwZXIiLCJlY2RoIiwiY3JlYXRlRUNESCIsImdlbmVyYXRlS2V5cyIsImdldFB1YmxpY0tleSIsImNvbXB1dGVTZWNyZXQiLCJkaWdlc3QiLCJjcmVhdGVIYXNoIiwiZm9ybWF0IiwidGV4dCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYXJyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJudW0iLCJsZW4iLCJyZXN0IiwiaSIsIm5leHRSZXN0IiwiaGV4IiwibWF0Y2giLCJtYXAiLCJieXRlIiwicGFyc2VJbnQiLCJyZWR1Y2UiLCJzdHIiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiYmFzZTY0IiwiYjY0IiwibGlzdCIsImEiLCJiIiwiYWNjTGVuIiwiZWwiLCJzZXQiLCJzbGljZSIsImluc2VydEJ5dGVzIiwic3JjIiwiZHN0IiwiZnJvbVN0YXJ0IiwidG9TdGFydCIsImZyb21CeXRlSW5kZXgiLCJmbG9vciIsImZyb21CaXRJbmRleCIsInRvQnl0ZUluZGV4IiwidG9CaXRJbmRleCIsImN1cnJGcm9tQnl0ZSIsImRlbHRhT2Zmc2V0IiwiY3VyckJpdCIsImJpdFNldCIsImV4dHJhY3RCaXRzIiwiYnVmIiwiYnl0ZVNpemUiLCJTdWJqZWN0IiwicHJvbWlzZSIsImNyZWF0ZVByb21pc2UiLCJyZWplY3QiLCJuZXh0IiwidmFsdWUiLCJlcnIiLCJyZWFzb24iLCJFdmVudEVtaXR0ZXIiLCJldmVudHMiLCJvbiIsImV2ZW50IiwiY2IiLCJkYXRhIiwiZXZlbnRDYnMiLCJmb3JFYWNoIiwiZXZlbnRDYiIsImRlcml2ZUtleSIsImZyb20iLCJ0byIsInNlY3JldCIsInNhbHQiLCJwYmtkZjJJbnB1dCIsImZyb21CdWZmZXIiLCJ0b0J1ZmZlciIsImRlcml2YXRlZFNlY3JldCIsInBia2RmMkhtYWMiLCJNYXN0ZXJLZXkiLCJwb3J0IiwibmEiLCJuYiIsImVuY3J5cHRLZXkiLCJkZWNyeXB0S2V5IiwibWVzc2FnZSIsImVuY3J5cHQiLCJkZWNyeXB0IiwidG9KU09OIiwib2JqZWN0U2hhIiwic3RhdGljIiwiZnJvbUhhc2giLCJ0b0hhc2giLCJmcm9tU2VjcmV0IiwiU2Vzc2lvbiIsInRyYW5zcG9ydCIsInJlcXVlc3QiLCJzZW5kIiwiVHJhbnNwb3J0T3JDb25zdHJ1Y3RvciIsImpzb24iLCJmcm9tSlNPTiIsIkZ1bmN0aW9uIiwiQ29ubmVjdGlvblN0cmluZyIsImwiLCJleHRyYWN0UG9ydCIsInBvcnRCeXRlc0xlbiIsIlBPUlRfTEVOR1RIIiwicG9ydEJ5dGVzT2Zmc2V0IiwicG9ydEJ5dGVzIiwiZHBvcnQiLCJJTklUSUFMX1BPUlQiLCJleHRyYWN0UmIiLCJjb25uQnl0ZXNMZW4iLCJyYW5kb21GaWxsQml0cyIsIlBPUlRfU1BBQ0UiLCJjb25uU3RyaW5nIiwiZGVmYXVsdENvZGVHZW5lcmF0b3IiLCJjb25zb2xlIiwid2FybiIsImtleUNvZGUiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJJbml0aWF0b3JUcmFuc3BvcnQiLCJvcHRzIiwiaG9zdCIsImlkIiwibmFtZSIsIkRFRkFVTFRfUkFORE9NX0xFTkdUSCIsImdldENvbm5lY3Rpb25TdHJpbmciLCJwdWJsaWNLZXkiLCJmcm9tU3RyaW5nIiwibExlbiIsInJhIiwicngiLCJwa2VEYXRhIiwicmVzcG9uc2UiLCJzZW5kUmVxdWVzdCIsIm1ldGhvZCIsInNlbmRlciIsInJlY2VpdmVkIiwic2VudCIsImF1dGhEYXRhIiwiY29tbWl0bWVudFJlcSIsImN4Iiwibm9uY2VSZXEiLCJueCIsInIiLCJ2ZXJpZkNoYWxsZW5nZSIsImluQ2lwaGVydGV4dCIsIlJlc3BvbmRlclRyYW5zcG9ydCIsInRpbWVvdXQiLCJERUZBVUxUX1RJTUVPVVQiLCJjb2RlR2VuZXJhdG9yIiwicnBjU3ViamVjdCIsInN0b3BQYWlyaW5nIiwiZ2VuZXJhdGUiLCJsYXN0UGFpcmluZyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJpc1BhaXJpbmciLCJwYWlyaW5nIiwicnBjUmVxdWVzdCIsInJlcyIsIndhaXRSZXF1ZXN0IiwiY3hEYXRhIiwibnhEYXRhIiwidmVyaWZEYXRhIiwiUmVzcG9uc2UiLCJIdHRwUmVzcG9uc2UiLCJ3cml0ZSIsImVuZCIsImJ1aWxkUnBjVXJsIiwiUlBDX1VSTF9QQVRIIiwiaHR0cFJlcSIsImh0dHAiLCJyZXF1aXJlIiwicG9zdERhdGEiLCJib2R5IiwicGF0aCIsImhlYWRlcnMiLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiY2h1bmsiLCJzdGF0dXMiLCJzdGF0dXNDb2RlIiwicmVzcCIsImJhc2VTZW5kIiwiQXV0aG9yaXphdGlvbiIsImJvZHlDaXBoZXJ0ZXh0IiwianNvbkJ1ZmZlciIsImxpc3RlbmVycyIsInJwY1VybCIsImNvbmNhdCIsInJlYWRSZXF1ZXN0Qm9keSIsInJlcUJvZHkiLCJhdXRoZW50aWNhdGlvbiIsImdldE1hc3RlcktleSIsImNpcGhlcnRleHRCYXNlNjQiLCJtZXNzYWdlSnNvbiIsImlubmVyQm9keSIsImluaXQiLCJPYmplY3QiLCJlbnRyaWVzIiwiaCIsInRvTG9jYWxlTG93ZXJDYXNlIiwicmVxUHJveHkiLCJQcm94eSIsImdldCIsInRhcmdldCIsInAiLCJ1cmwiLCJhcHBseSIsInRoaXNBcmciLCJhcmdzQXJyYXkiLCJzZXRIZWFkZXIiLCJjYWxsIiwiY2F0Y2giLCJlcnJvciIsImNhbGxMaXN0ZW5lcnMiLCJhdXRob3JpemF0aW9uIiwiZGlzcGF0Y2hFbmNyeXB0ZWRNZXNzYWdlIiwiZGlzcGF0Y2hQcm90b2NvbE1lc3NhZ2UiLCJsaXN0ZW5lciIsInVzZSIsInJiIiwidmFsIiwibkxlbiIsIk5PTkNFX0xFTkdUSCIsInJMZW4iLCJwa2EiLCJwa2IiLCJmdWxsUGtlRGF0YSIsImZ1bGxBdXRoRGF0YSIsInJlY2VpdmVkQ3giLCJyZWNlaXZlZE54Iiwic2VudEN4Iiwic2VudE54IiwiZXZlcnkiLCJjb21wdXRlQ3giLCJzaGFyZWRTZWNyZXQiLCJkZXJpdmVCaXRzIiwic2VjcmV0V2l0aENvbnRleHQiLCJtYXN0ZXJDb250ZXh0IiwiYUhhc2giLCJhSGFzaEJ1ZmZlciIsImJIYXNoIiwiYkhhc2hCdWZmZXIiLCJwcmVwYXJlIiwicHVibGljS2V5RXhjaGFuZ2UiLCJjb21wdXRlUiIsImNvbXB1dGVOeCIsInZhbGlkYXRlQXV0aERhdGEiLCJjb21wdXRlTWFzdGVyS2V5IiwidmVyaWZpY2F0aW9uIiwic2Vzc2lvbiIsIl9ydW4iLCJmaW5hbGx5IiwiYXJncyJdLCJtYXBwaW5ncyI6IndqQkFjc0JB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
