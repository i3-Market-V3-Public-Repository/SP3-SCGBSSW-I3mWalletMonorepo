"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("crypto"),e=require("@juanelas/base64"),r=require("pbkdf2-hmac"),n=require("object-sha");function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}function i(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var a=s(t),o=i(e),c=s(r),h=i(n);class u{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var d={...Object.freeze({__proto__:null,PORT_LENGTH:12,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,PORT_SPACE:4096,INITIAL_PORT:29170,NONCE_LENGTH:128,COMMITMENT_LENGTH:256}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class l{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class p{async randomFill(t,e,r){throw new Error("not implemented")}async randomFillBits(t,e,r){const n=Math.ceil(r/8),s=new Uint8Array(n);await this.randomFill(s,0,n),_.insertBits(s,t,0,e,r)}}class y{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}class w{async digest(t,e){throw new Error("not implemented")}}const f=new class extends p{async randomFill(t,e,r){return await new Promise((n=>{a.default.randomFill(t,e,r,(()=>{n()}))}))}};class g extends y{async encrypt(t){const e=new Uint8Array(12);await f.randomFill(e,0,e.length);const r=a.default.createSecretKey(this.key),n=a.default.createCipheriv(this.algorithm,r,e),s=[];return s.push(e),s.push(n.update(t)),s.push(n.final()),s.push(n.getAuthTag()),_.join(...s)}async decrypt(t){const e=[];if("aes-256-gcm"===this.algorithm)e[0]=12,e[2]=16;e[1]=t.length-e[0]-(e[2]??0);const[r,n,s]=_.split(t,...e),i=a.default.createSecretKey(this.key),o=a.default.createDecipheriv(this.algorithm,i,r);void 0!==s&&o.setAuthTag(s);const c=[];return c.push(o.update(n)),c.push(o.final()),_.join(...c)}}class m extends l{constructor(){super(),this.ecdh=a.default.createECDH("prime256v1")}async generateKeys(){this.ecdh.generateKeys()}async getPublicKey(){return this.ecdh.getPublicKey("hex")}async deriveBits(t){const e=this.ecdh.computeSecret(t,"hex");return new Uint8Array(e)}}const x=new class extends w{async digest(t,e){const r=a.default.createHash(t).update(e).digest();return new Uint8Array(r.buffer)}},b=t=>(new TextEncoder).encode(t),E=t=>(new TextDecoder).decode(t),S=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},T=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},N=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},O=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),v=t=>o.encode(t,!0,!1),P=t=>o.decode(t,!1),_={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),a=r%8,o=Math.floor(n/8),c=n%8,h=t[i]??0;const u=c-a;for(let r=0;r<s;r++){let r;r=u>=0?(h&128>>a)<<u:h&128>>a;const n=e[o]&~(128>>c)|r;e[o]=n,a++,c++,a>=8&&(i++,a=0,h=t[i]??0),c>=8&&(o++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return _.insertBits(t,s,e,0,r),s}};class A{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class R{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const L=async(t,e,r)=>{const n=new Uint8Array(16),s=new Uint8Array(96),i=N(t),a=N(e);_.insertBytes(r,s,0,0,32),_.insertBytes(i,s,0,32,32),_.insertBytes(a,s,0,64,32);const o=await c.default(s,n,1,32);return new Uint8Array(o)};class K{constructor(t,e,r,n,s,i,a,o){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new g("aes-256-gcm",a),this.decipher=new g("aes-256-gcm",o)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:v(this.na),nb:v(this.nb),secret:v(this.secret)}}async fromHash(){return await h.digest(this.from)}async toHash(){return await h.digest(this.to)}static async fromSecret(t,e,r,n,s,i){const a=await h.digest(e),o=await h.digest(r),c=await L(a,o,i),u=await L(o,a,i);return new K(t,e,r,n,s,i,c,u)}static async fromJSON(t){const e=P(t.na),r=P(t.nb),n=P(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class U{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:O(this.code)}}static async fromJSON(t,e){const r=await K.fromJSON(e.masterKey),n=N(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new U(s,r,n)}}class B{constructor(t,e){this.buffer=t,this.l=e}toString(){return v(this.buffer)}extractPort(){const t=Math.ceil(d.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);_.insertBits(this.buffer,r,this.l,e,d.PORT_LENGTH);const n=T(r);return d.INITIAL_PORT+n}extractRb(){return _.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+d.PORT_LENGTH)/8),n=new Uint8Array(r);await f.randomFillBits(n,0,e);const s=t-d.INITIAL_PORT;if(s<0||s>d.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=S(s,2);return _.insertBits(i,n,16-d.PORT_LENGTH,e,d.PORT_LENGTH),new B(n,e)}static fromString(t,e){return new B(P(t),e)}}const C={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return b(JSON.stringify(e))},async getMasterKey(t){const e=E(t);return await K.fromJSON(JSON.parse(e))}};class M extends u{constructor(t={}){super(),this.opts={host:t.host??"::1",id:t.id??{name:"Initiator"},l:t.l??d.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=B.fromString(r,this.opts.l);const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await f.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:v(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:v(e.cx)}),n=await this.sendRequest({method:"nonce",nx:v(e.nx)}),s={cx:P(r.cx),nx:P(n.nx),r:e.r};return{a:e,b:{cx:P(r.cx),nx:P(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=P(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class H extends u{constructor(t={}){super(),this.opts={port:t.port??d.INITIAL_PORT,timeout:t.timeout??d.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??d.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??C},this.rpcSubject=new A}async pairing(t,e,r){this.stopPairing(),this.connString=await B.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:P(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:v(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:v(e.nx)});const i=s.req,a={cx:P(n.cx),nx:P(i.nx),r:e.r};return{a:a,b:e,sent:e,received:a}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:v(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class q{}class j extends q{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=u,exports.ConnectionString=B,exports.HttpInitiatorTransport=class extends M{async baseSend(t,e){{const r=require("http");return await new Promise((n=>{const s=e.body,i=r.request({path:`/${d.RPC_URL_PATH}`,host:this.opts.host,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=b(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:E(e)},body:v(s)});if(i.status<=300&&i.status>=200){const e=P(i.body),r=await t.decrypt(e);i.body=E(r)}return i}},exports.HttpResponderTransport=class extends H{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${d.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new j(e)})}async dispatchEncryptedMessage(t,e,r){const n=b(r),s=await this.opts.codeGenerator.getMasterKey(n),i=await this.readRequestBody(t),a=P(i),o=await s.decrypt(a),c=E(o),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const l=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),p=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return l;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=n[0],a=async()=>{let a;if("string"==typeof i)a=b(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");a=i}const o=await s.encrypt(a),c=v(o);e.setHeader("Content-Length",c.length),t.call(r,c,...n.slice(1))};a().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(p,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}},exports.MasterKey=K,exports.Session=U,exports.WalletProtocol=class extends R{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(d.NONCE_LENGTH/8),e=new Uint8Array(t);return await f.randomFillBits(e,0,d.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(d.NONCE_LENGTH/8),s=Math.ceil(d.DEFAULT_RANDOM_LENGTH/8),i=N(t.a.publicKey),a=N(t.b.publicKey),o=new Uint8Array(64+n+s);_.insertBytes(i,o,1,0,32),_.insertBytes(a,o,1,32,32),_.insertBits(e,o,0,512,d.NONCE_LENGTH),_.insertBits(r,o,0,512+d.NONCE_LENGTH,d.DEFAULT_RANDOM_LENGTH);return await x.digest("sha256",o)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:a}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,n,a)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,e,r){const n=Math.ceil(d.NONCE_LENGTH/8),s=await t.deriveBits(e.received.publicKey),i=new Uint8Array(16),a=new Uint8Array(32+2*n+6+64),o=new Uint8Array([109,97,115,116,101,114]),u=await h.digest(e.a,"SHA-256"),l=N(u),p=await h.digest(e.b,"SHA-256"),y=N(p);_.insertBytes(s,a,0,0,32),_.insertBytes(r.a.nx,a,0,32,n),_.insertBytes(r.a.nx,a,0,32+n,n),_.insertBytes(o,a,0,32+2*n,6),_.insertBytes(l,a,0,32+2*n+6,32),_.insertBytes(y,a,0,32+2*n+6+32,32);const w=await c.default(a,i,1,32);return await K.fromSecret(e.port,e.sent.id,e.received.id,r.a.nx,r.b.nx,new Uint8Array(w))}async run(){return await(async()=>{const t=new m;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e),n=await this.transport.publicKeyExchange(this,r),s=await this.computeR(n.a.rx,n.b.rx),i=await this.computeNx(),a={r:s,nx:i,cx:await this.computeCx(n,i,s)},o=await this.transport.authentication(this,a);await this.validateAuthData(n,o);const c=await this.computeMasterKey(t,n,o),h=await this.transport.verification(this,c),u=new U(this.transport,c,h);return this.emit("masterKey",c),u})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.constants=d,exports.defaultCodeGenerator=C;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
