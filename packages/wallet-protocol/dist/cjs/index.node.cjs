"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("@juanelas/base64"),e=require("pbkdf2-hmac"),r=require("object-sha");function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}function s(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var i=s(t),o=n(e),a=s(r);class c{async send(t,e,r){throw new Error("this transport cannot send messages")}finish(t){t.emit("finished")}}var h={...Object.freeze({__proto__:null,PORT_LENGTH:12,DEFAULT_RANDOM_LENGTH:36,DEFAULT_TIMEOUT:3e4,PORT_SPACE:4096,INITIAL_PORT:29170,NONCE_LENGTH:128,COMMITMENT_LENGTH:256}),...Object.freeze({__proto__:null,RPC_URL_PATH:".well-known/wallet-protocol"})};class u{async generateKeys(){throw new Error("not implemented")}async getPublicKey(){throw new Error("not implemented")}async deriveBits(t){throw new Error("not implemented")}}class d{constructor(t,e){this.algorithm=t,this.key=e}async encrypt(t){throw new Error("not implemented")}async decrypt(t){throw new Error("not implemented")}}const p=void 0,l=void 0,w=t=>(new TextEncoder).encode(t),y=t=>(new TextDecoder).decode(t),f=(t,e)=>{if(void 0===e)for(e=1;2**(8*e)<t;)e++;const r=new Uint8Array(e);let n=t;for(let t=e-1;t>=0;t--){const e=n>>8,s=n-(e<<8);r[t]=s,n=e}return r},g=t=>{let e=0;for(let r=0;r<t.length;r++)e+=t[r]<<t.length-1-r;return e},m=t=>{const e=t.match(/.{1,2}/g);if(null===e)throw new Error(`not a hex: ${t}`);return new Uint8Array(e.map((t=>parseInt(t,16))))},x=t=>t.reduce(((t,e)=>t+e.toString(16).padStart(2,"0")),""),b=t=>i.encode(t,!0,!1),E=t=>i.decode(t,!1),S={join:(...t)=>{const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);let n=0;for(const e of t)r.set(e,n),n+=e.length;return r},split:(t,...e)=>{const r=[];let n=0;for(const s of e)r.push(t.slice(n,n+s)),n+=s;return r},insertBytes:(t,e,r,n,s)=>{for(let i=0;i<s;i++)e[i+n]=t[i+r]},insertBits:(t,e,r,n,s)=>{let i=Math.floor(r/8),o=r%8,a=Math.floor(n/8),c=n%8,h=t[i]??0;const u=c-o;for(let r=0;r<s;r++){let r;r=u>=0?(h&128>>o)<<u:h&128>>o;const n=e[a]&~(128>>c)|r;e[a]=n,o++,c++,o>=8&&(i++,o=0,h=t[i]??0),c>=8&&(a++,c=0)}},extractBits:(t,e,r)=>{const n=Math.ceil(r/8),s=new Uint8Array(n);return S.insertBits(t,s,e,0,r),s}};class T{get promise(){return this.createPromise()}async createPromise(){return await new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}next(t){null!=this.resolve&&this.resolve(t)}err(t){null!=this.reject&&this.reject(t)}}class N{constructor(){this.events={}}on(t,e){return void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this}emit(t,...e){const r=this.events[t];return void 0!==r&&(r.forEach((t=>t(...e))),!0)}}const O=async(t,e,r)=>{const n=new Uint8Array(16),s=new Uint8Array(96),i=m(t),a=m(e);S.insertBytes(r,s,0,0,32),S.insertBytes(i,s,0,32,32),S.insertBytes(a,s,0,64,32);const c=await o.default(s,n,1,32);return new Uint8Array(c)};class P{constructor(t,e,r,n,s,i,o,a){this.port=t,this.from=e,this.to=r,this.na=n,this.nb=s,this.secret=i,this.cipher=new d("aes-256-gcm",o),this.decipher=new d("aes-256-gcm",a)}async encrypt(t){return await this.cipher.encrypt(t)}async decrypt(t){return await this.decipher.decrypt(t)}toJSON(){return{from:this.from,to:this.to,port:this.port,na:b(this.na),nb:b(this.nb),secret:b(this.secret)}}async fromHash(){return await a.digest(this.from)}async toHash(){return await a.digest(this.to)}static async fromSecret(t,e,r,n,s,i){const o=await a.digest(e),c=await a.digest(r),h=await O(o,c,i),u=await O(c,o,i);return new P(t,e,r,n,s,i,h,u)}static async fromJSON(t){const e=E(t.na),r=E(t.nb),n=E(t.secret);return await this.fromSecret(t.port,t.from,t.to,e,r,n)}}class v{constructor(t,e,r){this.transport=t,this.masterKey=e,this.code=r}async send(t){return await this.transport.send(this.masterKey,this.code,t)}toJSON(){return{masterKey:this.masterKey.toJSON(),code:x(this.code)}}static async fromJSON(t,e){const r=await P.fromJSON(e.masterKey),n=m(e.code);let s;if("object"==typeof t)s=t;else{if(!(t instanceof Function))throw new Error("First param must be transport or constructor of transport");s=new t}return new v(s,r,n)}}class _{constructor(t,e){this.buffer=t,this.l=e}toString(){return b(this.buffer)}extractPort(){const t=Math.ceil(h.PORT_LENGTH/8),e=this.l%8,r=new Uint8Array(t);S.insertBits(this.buffer,r,this.l,e,h.PORT_LENGTH);const n=g(r);return h.INITIAL_PORT+n}extractRb(){return S.extractBits(this.buffer,0,this.l)}static async generate(t,e){const r=Math.ceil((e+h.PORT_LENGTH)/8),n=new Uint8Array(r);await p.randomFillBits(n,0,e);const s=t-h.INITIAL_PORT;if(s<0||s>h.PORT_SPACE)throw new Error(`the port ${t} is out of the port space`);const i=f(s,2);return S.insertBits(i,n,16-h.PORT_LENGTH,e,h.PORT_LENGTH),new _(n,e)}static fromString(t,e){return new _(E(t),e)}}const R={async generate(t){console.warn("Using the default code verifier. Note that it is not secure for production.");const e=await t.toJSON();return w(JSON.stringify(e))},async getMasterKey(t){const e=y(t);return await P.fromJSON(JSON.parse(e))}};class A extends c{constructor(t={}){super(),this.opts={host:t.host??"localhost",id:t.id??{name:"Initiator"},l:t.l??h.DEFAULT_RANDOM_LENGTH,getConnectionString:t.getConnectionString??(async()=>{throw new Error("getConnectionString must be provided")})}}async prepare(t,e){const r=await this.opts.getConnectionString();if(""===r)throw new Error("empty connection string");this.connString=_.fromString(r,this.opts.l);const n=Math.ceil(this.opts.l/8),s=new Uint8Array(n);return await p.randomFillBits(s,0,this.opts.l),{id:this.opts.id,publicKey:e,rx:s}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("missing connection string");const r=await this.sendRequest({method:"publicKeyExchange",sender:this.opts.id,publicKey:e.publicKey,ra:b(e.rx)}),n={id:r.sender,publicKey:r.publicKey,rx:this.connString.extractRb()};return{a:e,b:n,port:this.connString.extractPort(),sent:e,received:n}}async authentication(t,e){const r=await this.sendRequest({method:"commitment",cx:b(e.cx)}),n=await this.sendRequest({method:"nonce",nx:b(e.nx)}),s={cx:E(r.cx),nx:E(n.nx),r:e.r};return{a:e,b:{cx:E(r.cx),nx:E(n.nx),r:e.r},sent:e,received:s}}async verification(t,e){const r=await this.sendRequest({method:"verification"}),n=E(r.ciphertext);return await e.decrypt(n)}finish(t){super.finish(t),this.connString=void 0}}class L extends c{constructor(t={}){super(),this.opts={port:t.port??h.INITIAL_PORT,timeout:t.timeout??h.DEFAULT_TIMEOUT,id:t.id??{name:"Responder"},l:t.l??h.DEFAULT_RANDOM_LENGTH,codeGenerator:t.codeGenerator??R},this.rpcSubject=new T}async pairing(t,e,r){this.stopPairing(),this.connString=await _.generate(e,this.opts.l),this.lastPairing=setTimeout((()=>{this.stopPairing(),this.finish(t)}),r)}stopPairing(){null!=this.lastPairing&&(clearTimeout(this.lastPairing),this.lastPairing=void 0)}get isPairing(){return void 0!==this.connString}get port(){return this.opts.port}get timeout(){return this.opts.timeout}async prepare(t,e){if(await this.pairing(t,this.port,this.timeout),null===this.connString||void 0===this.connString)throw new Error("could not generate connection string");return t.emit("connString",this.connString),{id:this.opts.id,publicKey:e,rx:this.connString.extractRb()}}async waitRequest(t){for(;;){const e=await this.rpcSubject.promise;if(e.req.method===t)return e}}async publicKeyExchange(t,e){if(void 0===this.connString)throw new Error("protocol not properly initialized");const{req:r,res:n}=await this.waitRequest("publicKeyExchange");await n.send({method:"publicKeyExchange",sender:e.id,publicKey:e.publicKey});const s={id:r.sender,publicKey:r.publicKey,rx:E(r.ra??"")};return{a:s,b:e,port:this.connString.extractPort(),sent:e,received:s}}async authentication(t,e){const r=await this.waitRequest("commitment");await r.res.send({method:"commitment",cx:b(e.cx)});const n=r.req,s=await this.waitRequest("nonce");await s.res.send({method:"nonce",nx:b(e.nx)});const i=s.req,o={cx:E(n.cx),nx:E(i.nx),r:e.r};return{a:o,b:e,sent:e,received:o}}async verification(t,e){const r=await this.waitRequest("verification"),n=await this.opts.codeGenerator.generate(e),s=await e.encrypt(n);return await r.res.send({method:"verificationChallenge",ciphertext:b(s)}),n}finish(t){super.finish(t),this.stopPairing(),this.rpcSubject.err("Finished"),this.connString=void 0}}class K{}class U extends K{constructor(t){super(),this.res=t}async send(t){this.res.write(JSON.stringify(t)),this.res.end()}}exports.BaseTransport=c,exports.ConnectionString=_,exports.HttpInitiatorTransport=class extends A{buildRpcUrl(t){return`http://${this.opts.host}:${t}/${h.RPC_URL_PATH}`}async baseSend(t,e){{const r=require("http");return await new Promise((n=>{const s=e.body,i=r.request({path:`/${h.RPC_URL_PATH}`,port:t,method:e.method??"POST",headers:{...e.headers,"Content-Length":Buffer.byteLength(s)}},(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{n({status:t.statusCode??200,body:e})}))}));i.write(s),i.end()}))}}async sendRequest(t){if(void 0===this.connString)throw new Error("cannot connect to the rpc yet: port missing");const e=this.connString.extractPort(),r=await this.baseSend(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return JSON.parse(r.body)}async send(t,e,r){const n=w(JSON.stringify(r)),s=await t.encrypt(n),i=await this.baseSend(t.port,{method:"POST",headers:{Authorization:y(e)},body:b(s)});if(i.status<=300&&i.status>=200){const e=E(i.body),r=await t.decrypt(e);i.body=y(r)}return i}},exports.HttpResponderTransport=class extends L{constructor(t){super(t),this.listeners=[],this.rpcUrl=t?.rpcUrl??`/${h.RPC_URL_PATH}`}async readRequestBody(t){const e=[];for await(const r of t)e.push(r);return Buffer.concat(e).toString()}async dispatchProtocolMessage(t,e){if(!this.isPairing)throw new Error("not in pairing mode");const r=await this.readRequestBody(t),n=JSON.parse(r);this.rpcSubject.next({req:n,res:new U(e)})}async dispatchEncryptedMessage(t,e,r){const n=w(r),s=await this.opts.codeGenerator.getMasterKey(n),i=await this.readRequestBody(t),o=E(i),a=await s.decrypt(o),c=y(a),h=JSON.parse(c);let u={};const d=h.init??{};void 0!==d.body&&""!==d.body&&(u=JSON.parse(d.body));const p=Object.entries(d.headers??{}).reduce(((t,[e,r])=>(t[e.toLocaleLowerCase()]=r,t)),t.headers),l=new Proxy(t,{get(t,e){switch(e){case"url":return h.url;case"method":return d.method;case"headers":return p;case"_body":case"walletProtocol":return!0;case"body":return u;default:return t[e]}}});e.end=new Proxy(e.end,{apply:(t,r,n)=>{const i=void 0===r.statusCode?500:r.statusCode;if(i>=200&&i<300){const i=n[0],o=async()=>{let o;if("string"==typeof i)o=w(i);else{if(!(i instanceof Buffer))throw new Error("cannot manage this chunk...");o=i}const a=await s.encrypt(o),c=b(a);e.setHeader("Content-Length",c.length),t.call(r,c,...n.slice(1))};o().catch((t=>{console.error(t)}))}else t.call(r,...n)}}),await this.callListeners(l,e)}async dispatchRequest(t,e){if(t.url===this.rpcUrl){if("POST"!==t.method)throw new Error("method must be POST");return void 0!==t.headers.authorization?await this.dispatchEncryptedMessage(t,e,t.headers.authorization):await this.dispatchProtocolMessage(t,e)}await this.callListeners(t,e)}async callListeners(t,e){for(const r of this.listeners)r(t,e)}use(t){this.listeners.push(t)}},exports.MasterKey=P,exports.Session=v,exports.WalletProtocol=class extends N{constructor(t){super(),this.transport=t}async computeR(t,e){return t.map(((t,r)=>t^e[r]))}async computeNx(){const t=Math.ceil(h.NONCE_LENGTH/8),e=new Uint8Array(t);return await p.randomFillBits(e,0,h.NONCE_LENGTH),e}async computeCx(t,e,r){const n=Math.ceil(h.NONCE_LENGTH/8),s=Math.ceil(h.DEFAULT_RANDOM_LENGTH/8),i=m(t.a.publicKey),o=m(t.b.publicKey),a=new Uint8Array(64+n+s);S.insertBytes(i,a,1,0,32),S.insertBytes(o,a,1,32,32),S.insertBits(e,a,0,512,h.NONCE_LENGTH),S.insertBits(r,a,0,512+h.NONCE_LENGTH,h.DEFAULT_RANDOM_LENGTH);return await l.digest("sha256",a)}async validateAuthData(t,e){const{cx:r,nx:n}=e.received,{cx:s,nx:i,r:o}=e.sent;if(!(r.length===s.length&&n.length===i.length))throw new Error("invalid received auth data length");if(r.every(((t,e)=>t===s[e])))throw new Error("received and sent Cx are the same");if(!(await this.computeCx(t,n,o)).every(((t,e)=>t===r[e])))throw new Error("received a wrong Cx")}async computeMasterKey(t,e,r){const n=Math.ceil(h.NONCE_LENGTH/8),s=await t.deriveBits(e.received.publicKey),i=new Uint8Array(16),c=new Uint8Array(32+2*n+6+64),u=new Uint8Array([109,97,115,116,101,114]),d=await a.digest(e.a,"SHA-256"),p=m(d),l=await a.digest(e.b,"SHA-256"),w=m(l);S.insertBytes(s,c,0,0,32),S.insertBytes(r.a.nx,c,0,32,n),S.insertBytes(r.a.nx,c,0,32+n,n),S.insertBytes(u,c,0,32+2*n,6),S.insertBytes(p,c,0,32+2*n+6,32),S.insertBytes(w,c,0,32+2*n+6+32,32);const y=await o.default(c,i,1,32);return await P.fromSecret(e.port,e.sent.id,e.received.id,r.a.nx,r.b.nx,new Uint8Array(y))}async run(){return await(async()=>{const t=new u;await t.generateKeys();const e=await t.getPublicKey(),r=await this.transport.prepare(this,e),n=await this.transport.publicKeyExchange(this,r),s=await this.computeR(n.a.rx,n.b.rx),i=await this.computeNx(),o={r:s,nx:i,cx:await this.computeCx(n,i,s)},a=await this.transport.authentication(this,o);await this.validateAuthData(n,a);const c=await this.computeMasterKey(t,n,a),h=await this.transport.verification(this,c),d=new v(this.transport,c,h);return this.emit("masterKey",c),d})().finally((()=>{this.transport.finish(this)}))}on(t,e){return super.on(t,e)}emit(t,...e){return super.emit(t,...e)}},exports.constants=h,exports.defaultCodeGenerator=R;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
